(window["webpackJsonpCheckout"] = window["webpackJsonpCheckout"] || []).push([["sentry~checkout"],{

/***/ "./node_modules/@sentry/browser/dist/backend.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/backend.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar eventbuilder_1 = __webpack_require__(/*! ./eventbuilder */ \"./node_modules/@sentry/browser/dist/eventbuilder.js\");\n\nvar transports_1 = __webpack_require__(/*! ./transports */ \"./node_modules/@sentry/browser/dist/transports/index.js\");\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\n\n\nvar BrowserBackend =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BrowserBackend, _super);\n\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventbuilder_1.eventFromException(this._options, exception, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = types_1.Severity.Info;\n    }\n\n    return eventbuilder_1.eventFromMessage(this._options, message, level, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n\n    var transportOptions = tslib_1.__assign(tslib_1.__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn\n    });\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (utils_1.supportsFetch()) {\n      return new transports_1.FetchTransport(transportOptions);\n    }\n\n    return new transports_1.XHRTransport(transportOptions);\n  };\n\n  return BrowserBackend;\n}(core_1.BaseBackend);\n\nexports.BrowserBackend = BrowserBackend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvYmFja2VuZC50cz9jNjQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUNBO0FBa0NBOzs7Ozs7QUFJQTtBQUFBO0FBQUE7QUFBb0M7O0FBQXBDOztBQW9DQztBQW5DQzs7Ozs7QUFHTyxnREFBUCxVQUEwQixTQUExQixFQUE4QyxJQUE5QyxFQUE4RDtBQUM1RCxXQUFPLGtDQUFtQixLQUFLLFFBQXhCLEVBQWtDLFNBQWxDLEVBQTZDLElBQTdDLENBQVA7QUFDRCxHQUZNO0FBR1A7Ozs7O0FBR08sOENBQVAsVUFBd0IsT0FBeEIsRUFBeUMsS0FBekMsRUFBMEUsSUFBMUUsRUFBMEY7QUFBakQ7QUFBQSxjQUFrQixpQkFBUyxJQUEzQjtBQUErQjs7QUFDdEUsV0FBTyxnQ0FBaUIsS0FBSyxRQUF0QixFQUFnQyxPQUFoQyxFQUF5QyxLQUF6QyxFQUFnRCxJQUFoRCxDQUFQO0FBQ0QsR0FGTTtBQUlQOzs7OztBQUdVLDZDQUFWO0FBQ0UsUUFBSSxDQUFDLEtBQUssUUFBTCxDQUFjLEdBQW5CLEVBQXdCO0FBQ3RCO0FBQ0EsYUFBTyxpQkFBTSxlQUFOLENBQXFCLElBQXJCLENBQXFCLElBQXJCLENBQVA7QUFDRDs7QUFFRCxRQUFNLGdCQUFnQix5Q0FDakIsS0FBSyxRQUFMLENBQWMsZ0JBREcsR0FDYTtBQUNqQyxTQUFHLEVBQUUsS0FBSyxRQUFMLENBQWM7QUFEYyxLQURiLENBQXRCOztBQUtBLFFBQUksS0FBSyxRQUFMLENBQWMsU0FBbEIsRUFBNkI7QUFDM0IsYUFBTyxJQUFJLEtBQUssUUFBTCxDQUFjLFNBQWxCLENBQTRCLGdCQUE1QixDQUFQO0FBQ0Q7O0FBQ0QsUUFBSSx1QkFBSixFQUFxQjtBQUNuQixhQUFPLElBQUksMkJBQUosQ0FBbUIsZ0JBQW5CLENBQVA7QUFDRDs7QUFDRCxXQUFPLElBQUkseUJBQUosQ0FBaUIsZ0JBQWpCLENBQVA7QUFDRCxHQWxCUzs7QUFtQlo7QUFBQyxDQXBDRCxDQUFvQyxrQkFBcEM7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Rpc3QvYmFja2VuZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VCYWNrZW5kIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IEV2ZW50LCBFdmVudEhpbnQsIE9wdGlvbnMsIFNldmVyaXR5LCBUcmFuc3BvcnQgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IHN1cHBvcnRzRmV0Y2ggfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgZXZlbnRGcm9tRXhjZXB0aW9uLCBldmVudEZyb21NZXNzYWdlIH0gZnJvbSAnLi9ldmVudGJ1aWxkZXInO1xuaW1wb3J0IHsgRmV0Y2hUcmFuc3BvcnQsIFhIUlRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0cyc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgU2VudHJ5IEJyb3dzZXIgU0RLLlxuICogQHNlZSBCcm93c2VyQ2xpZW50IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJPcHRpb25zIGV4dGVuZHMgT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBIHBhdHRlcm4gZm9yIGVycm9yIFVSTHMgd2hpY2ggc2hvdWxkIGV4Y2x1c2l2ZWx5IGJlIHNlbnQgdG8gU2VudHJ5LlxuICAgKiBUaGlzIGlzIHRoZSBvcHBvc2l0ZSBvZiB7QGxpbmsgT3B0aW9ucy5kZW55VXJsc30uXG4gICAqIEJ5IGRlZmF1bHQsIGFsbCBlcnJvcnMgd2lsbCBiZSBzZW50LlxuICAgKi9cbiAgYWxsb3dVcmxzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcblxuICAvKipcbiAgICogQSBwYXR0ZXJuIGZvciBlcnJvciBVUkxzIHdoaWNoIHNob3VsZCBub3QgYmUgc2VudCB0byBTZW50cnkuXG4gICAqIFRvIGFsbG93IGNlcnRhaW4gZXJyb3JzIGluc3RlYWQsIHVzZSB7QGxpbmsgT3B0aW9ucy5hbGxvd1VybHN9LlxuICAgKiBCeSBkZWZhdWx0LCBhbGwgZXJyb3JzIHdpbGwgYmUgc2VudC5cbiAgICovXG4gIGRlbnlVcmxzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBPcHRpb25zLmFsbG93VXJsc30gaW5zdGVhZC4gKi9cbiAgd2hpdGVsaXN0VXJscz86IEFycmF5PHN0cmluZyB8IFJlZ0V4cD47XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgT3B0aW9ucy5kZW55VXJsc30gaW5zdGVhZC4gKi9cbiAgYmxhY2tsaXN0VXJscz86IEFycmF5PHN0cmluZyB8IFJlZ0V4cD47XG5cbiAgLyoqXG4gICAqIEEgZmxhZyBlbmFibGluZyBTZXNzaW9ucyBUcmFja2luZyBmZWF0dXJlLlxuICAgKiBCeSBkZWZhdWx0IFNlc3Npb25zIFRyYWNraW5nIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgYXV0b1Nlc3Npb25UcmFja2luZz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIFNlbnRyeSBCcm93c2VyIFNESyBCYWNrZW5kLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQnJvd3NlckJhY2tlbmQgZXh0ZW5kcyBCYXNlQmFja2VuZDxCcm93c2VyT3B0aW9ucz4ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBldmVudEZyb21FeGNlcHRpb24oZXhjZXB0aW9uOiB1bmtub3duLCBoaW50PzogRXZlbnRIaW50KTogUHJvbWlzZUxpa2U8RXZlbnQ+IHtcbiAgICByZXR1cm4gZXZlbnRGcm9tRXhjZXB0aW9uKHRoaXMuX29wdGlvbnMsIGV4Y2VwdGlvbiwgaGludCk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZXZlbnRGcm9tTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGxldmVsOiBTZXZlcml0eSA9IFNldmVyaXR5LkluZm8sIGhpbnQ/OiBFdmVudEhpbnQpOiBQcm9taXNlTGlrZTxFdmVudD4ge1xuICAgIHJldHVybiBldmVudEZyb21NZXNzYWdlKHRoaXMuX29wdGlvbnMsIG1lc3NhZ2UsIGxldmVsLCBoaW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHJvdGVjdGVkIF9zZXR1cFRyYW5zcG9ydCgpOiBUcmFuc3BvcnQge1xuICAgIGlmICghdGhpcy5fb3B0aW9ucy5kc24pIHtcbiAgICAgIC8vIFdlIHJldHVybiB0aGUgbm9vcCB0cmFuc3BvcnQgaGVyZSBpbiBjYXNlIHRoZXJlIGlzIG5vIERzbi5cbiAgICAgIHJldHVybiBzdXBlci5fc2V0dXBUcmFuc3BvcnQoKTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc3BvcnRPcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5fb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zLFxuICAgICAgZHNuOiB0aGlzLl9vcHRpb25zLmRzbixcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMudHJhbnNwb3J0KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuX29wdGlvbnMudHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgICByZXR1cm4gbmV3IEZldGNoVHJhbnNwb3J0KHRyYW5zcG9ydE9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFhIUlRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/backend.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/client.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/client.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar backend_1 = __webpack_require__(/*! ./backend */ \"./node_modules/@sentry/browser/dist/backend.js\");\n\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@sentry/browser/dist/helpers.js\");\n\nvar integrations_1 = __webpack_require__(/*! ./integrations */ \"./node_modules/@sentry/browser/dist/integrations/index.js\");\n\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@sentry/browser/dist/version.js\");\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\n\nvar BrowserClient =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, backend_1.BrowserBackend, options) || this;\n  }\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n\n\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    } // doesn't work without a document (React Native)\n\n\n    var document = utils_1.getGlobalObject().document;\n\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      utils_1.logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    helpers_1.injectReportDialog(tslib_1.__assign(tslib_1.__assign({}, options), {\n      dsn: options.dsn || this.getDsn()\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    event.sdk = tslib_1.__assign(tslib_1.__assign({}, event.sdk), {\n      name: version_1.SDK_NAME,\n      packages: tslib_1.__spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/browser',\n        version: version_1.SDK_VERSION\n      }]),\n      version: version_1.SDK_VERSION\n    });\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._sendEvent = function (event) {\n    var integration = this.getIntegration(integrations_1.Breadcrumbs);\n\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n\n    _super.prototype._sendEvent.call(this, event);\n  };\n\n  return BrowserClient;\n}(core_1.BaseClient);\n\nexports.BrowserClient = BrowserClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvY2xpZW50LnRzPzFmYjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7QUFFQTs7Ozs7Ozs7QUFNQTtBQUFBO0FBQUE7QUFBbUM7QUFDakM7Ozs7Ozs7QUFLQSx5QkFBbUIsT0FBbkIsRUFBK0M7QUFBNUI7QUFBQTtBQUE0Qjs7V0FDN0Msa0JBQU0sd0JBQU4sRUFBc0IsT0FBdEIsS0FBOEIsSTtBQUMvQjtBQUVEOzs7Ozs7O0FBS08sNkNBQVAsVUFBd0IsT0FBeEIsRUFBeUQ7QUFBakM7QUFBQTtBQUFpQyxNQUN2RDs7O0FBQ0EsUUFBTSxRQUFRLEdBQUcsMEJBQTBCLFFBQTNDOztBQUNBLFFBQUksQ0FBQyxRQUFMLEVBQWU7QUFDYjtBQUNEOztBQUVELFFBQUksQ0FBQyxLQUFLLFVBQUwsRUFBTCxFQUF3QjtBQUN0QixxQkFBTyxLQUFQLENBQWEsNkRBQWI7QUFDQTtBQUNEOztBQUVELGlDQUFrQixzQ0FDYixPQURhLEdBQ047QUFDVixTQUFHLEVBQUUsT0FBTyxDQUFDLEdBQVIsSUFBZSxLQUFLLE1BQUw7QUFEVixLQURNLENBQWxCO0FBSUQsR0FoQk07QUFrQlA7Ozs7O0FBR1UsMENBQVYsVUFBd0IsS0FBeEIsRUFBc0MsS0FBdEMsRUFBcUQsSUFBckQsRUFBcUU7QUFDbkUsU0FBSyxDQUFDLFFBQU4sR0FBaUIsS0FBSyxDQUFDLFFBQU4sSUFBa0IsWUFBbkM7QUFDQSxTQUFLLENBQUMsR0FBTixHQUFTLHNDQUNKLEtBQUssQ0FBQyxHQURGLEdBQ0s7QUFDWixVQUFJLEVBQUUsa0JBRE07QUFFWixjQUFRLG1CQUNELEtBQUssQ0FBQyxHQUFOLElBQWEsS0FBSyxDQUFDLEdBQU4sQ0FBVSxRQUF4QixJQUFxQyxFQURuQyxFQUNzQyxDQUM1QztBQUNFLFlBQUksRUFBRSxxQkFEUjtBQUVFLGVBQU8sRUFBRTtBQUZYLE9BRDRDLENBRHRDLENBRkk7QUFTWixhQUFPLEVBQUU7QUFURyxLQURMLENBQVQ7QUFhQSxXQUFPLGlCQUFNLGFBQU4sQ0FBbUIsSUFBbkIsQ0FBbUIsSUFBbkIsRUFBb0IsS0FBcEIsRUFBMkIsS0FBM0IsRUFBa0MsSUFBbEMsQ0FBUDtBQUNELEdBaEJTO0FBa0JWOzs7OztBQUdVLHVDQUFWLFVBQXFCLEtBQXJCLEVBQWlDO0FBQy9CLFFBQU0sV0FBVyxHQUFHLEtBQUssY0FBTCxDQUFvQiwwQkFBcEIsQ0FBcEI7O0FBQ0EsUUFBSSxXQUFKLEVBQWlCO0FBQ2YsaUJBQVcsQ0FBQyxtQkFBWixDQUFnQyxLQUFoQztBQUNEOztBQUNELHFCQUFNLFVBQU4sQ0FBZ0IsSUFBaEIsQ0FBZ0IsSUFBaEIsRUFBaUIsS0FBakI7QUFDRCxHQU5TOztBQU9aO0FBQUMsQ0FoRUQsQ0FBbUMsaUJBQW5DOztBQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L2NsaWVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDbGllbnQsIFNjb3BlIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IEV2ZW50LCBFdmVudEhpbnQgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IEJyb3dzZXJCYWNrZW5kLCBCcm93c2VyT3B0aW9ucyB9IGZyb20gJy4vYmFja2VuZCc7XG5pbXBvcnQgeyBpbmplY3RSZXBvcnREaWFsb2csIFJlcG9ydERpYWxvZ09wdGlvbnMgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYnMgfSBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5pbXBvcnQgeyBTREtfTkFNRSwgU0RLX1ZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuXG4vKipcbiAqIFRoZSBTZW50cnkgQnJvd3NlciBTREsgQ2xpZW50LlxuICpcbiAqIEBzZWUgQnJvd3Nlck9wdGlvbnMgZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICogQHNlZSBTZW50cnlDbGllbnQgZm9yIHVzYWdlIGRvY3VtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBCcm93c2VyQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudDxCcm93c2VyQmFja2VuZCwgQnJvd3Nlck9wdGlvbnM+IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQnJvd3NlciBTREsgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBTREsuXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogQnJvd3Nlck9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKEJyb3dzZXJCYWNrZW5kLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGEgcmVwb3J0IGRpYWxvZyB0byB0aGUgdXNlciB0byBzZW5kIGZlZWRiYWNrIHRvIGEgc3BlY2lmaWMgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIFNldCBpbmRpdmlkdWFsIG9wdGlvbnMgZm9yIHRoZSBkaWFsb2dcbiAgICovXG4gIHB1YmxpYyBzaG93UmVwb3J0RGlhbG9nKG9wdGlvbnM6IFJlcG9ydERpYWxvZ09wdGlvbnMgPSB7fSk6IHZvaWQge1xuICAgIC8vIGRvZXNuJ3Qgd29yayB3aXRob3V0IGEgZG9jdW1lbnQgKFJlYWN0IE5hdGl2ZSlcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldEdsb2JhbE9iamVjdDxXaW5kb3c+KCkuZG9jdW1lbnQ7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5faXNFbmFibGVkKCkpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignVHJ5aW5nIHRvIGNhbGwgc2hvd1JlcG9ydERpYWxvZyB3aXRoIFNlbnRyeSBDbGllbnQgZGlzYWJsZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbmplY3RSZXBvcnREaWFsb2coe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGRzbjogb3B0aW9ucy5kc24gfHwgdGhpcy5nZXREc24oKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHJvdGVjdGVkIF9wcmVwYXJlRXZlbnQoZXZlbnQ6IEV2ZW50LCBzY29wZT86IFNjb3BlLCBoaW50PzogRXZlbnRIaW50KTogUHJvbWlzZUxpa2U8RXZlbnQgfCBudWxsPiB7XG4gICAgZXZlbnQucGxhdGZvcm0gPSBldmVudC5wbGF0Zm9ybSB8fCAnamF2YXNjcmlwdCc7XG4gICAgZXZlbnQuc2RrID0ge1xuICAgICAgLi4uZXZlbnQuc2RrLFxuICAgICAgbmFtZTogU0RLX05BTUUsXG4gICAgICBwYWNrYWdlczogW1xuICAgICAgICAuLi4oKGV2ZW50LnNkayAmJiBldmVudC5zZGsucGFja2FnZXMpIHx8IFtdKSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICducG06QHNlbnRyeS9icm93c2VyJyxcbiAgICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN1cGVyLl9wcmVwYXJlRXZlbnQoZXZlbnQsIHNjb3BlLCBoaW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHJvdGVjdGVkIF9zZW5kRXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSB0aGlzLmdldEludGVncmF0aW9uKEJyZWFkY3J1bWJzKTtcbiAgICBpZiAoaW50ZWdyYXRpb24pIHtcbiAgICAgIGludGVncmF0aW9uLmFkZFNlbnRyeUJyZWFkY3J1bWIoZXZlbnQpO1xuICAgIH1cbiAgICBzdXBlci5fc2VuZEV2ZW50KGV2ZW50KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/client.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/eventbuilder.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/eventbuilder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar parsers_1 = __webpack_require__(/*! ./parsers */ \"./node_modules/@sentry/browser/dist/parsers.js\");\n\nvar tracekit_1 = __webpack_require__(/*! ./tracekit */ \"./node_modules/@sentry/browser/dist/tracekit.js\");\n/**\n * Builds and Event from a Exception\n * @hidden\n */\n\n\nfunction eventFromException(options, exception, hint) {\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace\n  });\n  utils_1.addExceptionMechanism(event, {\n    handled: true,\n    type: 'generic'\n  });\n  event.level = types_1.Severity.Error;\n\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n\n  return utils_1.SyncPromise.resolve(event);\n}\n\nexports.eventFromException = eventFromException;\n/**\n * Builds and Event from a Message\n * @hidden\n */\n\nfunction eventFromMessage(options, message, level, hint) {\n  if (level === void 0) {\n    level = types_1.Severity.Info;\n  }\n\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace\n  });\n  event.level = level;\n\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n\n  return utils_1.SyncPromise.resolve(event);\n}\n\nexports.eventFromMessage = eventFromMessage;\n/**\n * @hidden\n */\n\nfunction eventFromUnknownInput(exception, syntheticException, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var event;\n\n  if (utils_1.isErrorEvent(exception) && exception.error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    var errorEvent = exception; // eslint-disable-next-line no-param-reassign\n\n    exception = errorEvent.error;\n    event = parsers_1.eventFromStacktrace(tracekit_1.computeStackTrace(exception));\n    return event;\n  }\n\n  if (utils_1.isDOMError(exception) || utils_1.isDOMException(exception)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name, code, and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    var domException = exception;\n    var name_1 = domException.name || (utils_1.isDOMError(domException) ? 'DOMError' : 'DOMException');\n    var message = domException.message ? name_1 + \": \" + domException.message : name_1;\n    event = eventFromString(message, syntheticException, options);\n    utils_1.addExceptionTypeValue(event, message);\n\n    if ('code' in domException) {\n      event.tags = tslib_1.__assign(tslib_1.__assign({}, event.tags), {\n        'DOMException.code': \"\" + domException.code\n      });\n    }\n\n    return event;\n  }\n\n  if (utils_1.isError(exception)) {\n    // we have a real Error object, do nothing\n    event = parsers_1.eventFromStacktrace(tracekit_1.computeStackTrace(exception));\n    return event;\n  }\n\n  if (utils_1.isPlainObject(exception) || utils_1.isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    var objectException = exception;\n    event = parsers_1.eventFromPlainObject(objectException, syntheticException, options.rejection);\n    utils_1.addExceptionMechanism(event, {\n      synthetic: true\n    });\n    return event;\n  } // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n\n\n  event = eventFromString(exception, syntheticException, options);\n  utils_1.addExceptionTypeValue(event, \"\" + exception, undefined);\n  utils_1.addExceptionMechanism(event, {\n    synthetic: true\n  });\n  return event;\n}\n\nexports.eventFromUnknownInput = eventFromUnknownInput;\n/**\n * @hidden\n */\n\nfunction eventFromString(input, syntheticException, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var event = {\n    message: input\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    var stacktrace = tracekit_1.computeStackTrace(syntheticException);\n    var frames_1 = parsers_1.prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames: frames_1\n    };\n  }\n\n  return event;\n}\n\nexports.eventFromString = eventFromString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZXZlbnRidWlsZGVyLnRzPzBlNjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFZQTs7QUFDQTtBQUVBOzs7Ozs7QUFJQSxTQUFnQixrQkFBaEIsQ0FBbUMsT0FBbkMsRUFBcUQsU0FBckQsRUFBeUUsSUFBekUsRUFBeUY7QUFDdkYsTUFBTSxrQkFBa0IsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDLGtCQUFkLElBQXFDLFNBQWhFO0FBQ0EsTUFBTSxLQUFLLEdBQUcscUJBQXFCLENBQUMsU0FBRCxFQUFZLGtCQUFaLEVBQWdDO0FBQ2pFLG9CQUFnQixFQUFFLE9BQU8sQ0FBQztBQUR1QyxHQUFoQyxDQUFuQztBQUdBLGdDQUFzQixLQUF0QixFQUE2QjtBQUMzQixXQUFPLEVBQUUsSUFEa0I7QUFFM0IsUUFBSSxFQUFFO0FBRnFCLEdBQTdCO0FBSUEsT0FBSyxDQUFDLEtBQU4sR0FBYyxpQkFBUyxLQUF2Qjs7QUFDQSxNQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBakIsRUFBMkI7QUFDekIsU0FBSyxDQUFDLFFBQU4sR0FBaUIsSUFBSSxDQUFDLFFBQXRCO0FBQ0Q7O0FBQ0QsU0FBTyxvQkFBWSxPQUFaLENBQW9CLEtBQXBCLENBQVA7QUFDRDs7QUFkRDtBQWdCQTs7Ozs7QUFJQSxTQUFnQixnQkFBaEIsQ0FDRSxPQURGLEVBRUUsT0FGRixFQUdFLEtBSEYsRUFJRSxJQUpGLEVBSWtCO0FBRGhCO0FBQUEsWUFBa0IsaUJBQVMsSUFBM0I7QUFBK0I7O0FBRy9CLE1BQU0sa0JBQWtCLEdBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxrQkFBZCxJQUFxQyxTQUFoRTtBQUNBLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxPQUFELEVBQVUsa0JBQVYsRUFBOEI7QUFDekQsb0JBQWdCLEVBQUUsT0FBTyxDQUFDO0FBRCtCLEdBQTlCLENBQTdCO0FBR0EsT0FBSyxDQUFDLEtBQU4sR0FBYyxLQUFkOztBQUNBLE1BQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFqQixFQUEyQjtBQUN6QixTQUFLLENBQUMsUUFBTixHQUFpQixJQUFJLENBQUMsUUFBdEI7QUFDRDs7QUFDRCxTQUFPLG9CQUFZLE9BQVosQ0FBb0IsS0FBcEIsQ0FBUDtBQUNEOztBQWZEO0FBaUJBOzs7O0FBR0EsU0FBZ0IscUJBQWhCLENBQ0UsU0FERixFQUVFLGtCQUZGLEVBR0UsT0FIRixFQU1RO0FBSE47QUFBQTtBQUdNOztBQUVOLE1BQUksS0FBSjs7QUFFQSxNQUFJLHFCQUFhLFNBQWIsS0FBMEMsU0FBd0IsQ0FBQyxLQUF2RSxFQUE4RTtBQUM1RTtBQUNBLFFBQU0sVUFBVSxHQUFHLFNBQW5CLENBRjRFLENBRzVFOztBQUNBLGFBQVMsR0FBRyxVQUFVLENBQUMsS0FBdkI7QUFDQSxTQUFLLEdBQUcsOEJBQW9CLDZCQUFrQixTQUFsQixDQUFwQixDQUFSO0FBQ0EsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxtQkFBVyxTQUFYLEtBQXFDLHVCQUFlLFNBQWYsQ0FBekMsRUFBb0Y7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFNLFlBQVksR0FBRyxTQUFyQjtBQUNBLFFBQU0sTUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFiLEtBQXNCLG1CQUFXLFlBQVgsSUFBMkIsVUFBM0IsR0FBd0MsY0FBOUQsQ0FBYjtBQUNBLFFBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFiLEdBQTBCLE1BQUksT0FBSixHQUFTLFlBQVksQ0FBQyxPQUFoRCxHQUE0RCxNQUE1RTtBQUVBLFNBQUssR0FBRyxlQUFlLENBQUMsT0FBRCxFQUFVLGtCQUFWLEVBQThCLE9BQTlCLENBQXZCO0FBQ0Esa0NBQXNCLEtBQXRCLEVBQTZCLE9BQTdCOztBQUNBLFFBQUksVUFBVSxZQUFkLEVBQTRCO0FBQzFCLFdBQUssQ0FBQyxJQUFOLEdBQVUsc0NBQVEsS0FBSyxDQUFDLElBQWQsR0FBa0I7QUFBRSw2QkFBcUIsS0FBRyxZQUFZLENBQUM7QUFBdkMsT0FBbEIsQ0FBVjtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUksZ0JBQVEsU0FBUixDQUFKLEVBQWlDO0FBQy9CO0FBQ0EsU0FBSyxHQUFHLDhCQUFvQiw2QkFBa0IsU0FBbEIsQ0FBcEIsQ0FBUjtBQUNBLFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUksc0JBQWMsU0FBZCxLQUE0QixnQkFBUSxTQUFSLENBQWhDLEVBQW9EO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFFBQU0sZUFBZSxHQUFHLFNBQXhCO0FBQ0EsU0FBSyxHQUFHLCtCQUFxQixlQUFyQixFQUFzQyxrQkFBdEMsRUFBMEQsT0FBTyxDQUFDLFNBQWxFLENBQVI7QUFDQSxrQ0FBc0IsS0FBdEIsRUFBNkI7QUFDM0IsZUFBUyxFQUFFO0FBRGdCLEtBQTdCO0FBR0EsV0FBTyxLQUFQO0FBQ0QsR0E1Q0ssQ0E4Q047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxPQUFLLEdBQUcsZUFBZSxDQUFDLFNBQUQsRUFBc0Isa0JBQXRCLEVBQTBDLE9BQTFDLENBQXZCO0FBQ0EsZ0NBQXNCLEtBQXRCLEVBQTZCLEtBQUcsU0FBaEMsRUFBNkMsU0FBN0M7QUFDQSxnQ0FBc0IsS0FBdEIsRUFBNkI7QUFDM0IsYUFBUyxFQUFFO0FBRGdCLEdBQTdCO0FBSUEsU0FBTyxLQUFQO0FBQ0Q7O0FBcEVEO0FBc0VBOzs7O0FBR0EsU0FBZ0IsZUFBaEIsQ0FDRSxLQURGLEVBRUUsa0JBRkYsRUFHRSxPQUhGLEVBS1E7QUFGTjtBQUFBO0FBRU07O0FBRU4sTUFBTSxLQUFLLEdBQVU7QUFDbkIsV0FBTyxFQUFFO0FBRFUsR0FBckI7O0FBSUEsTUFBSSxPQUFPLENBQUMsZ0JBQVIsSUFBNEIsa0JBQWhDLEVBQW9EO0FBQ2xELFFBQU0sVUFBVSxHQUFHLDZCQUFrQixrQkFBbEIsQ0FBbkI7QUFDQSxRQUFNLFFBQU0sR0FBRyxnQ0FBc0IsVUFBVSxDQUFDLEtBQWpDLENBQWY7QUFDQSxTQUFLLENBQUMsVUFBTixHQUFtQjtBQUNqQixZQUFNO0FBRFcsS0FBbkI7QUFHRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFwQkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Rpc3QvZXZlbnRidWlsZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50SGludCwgT3B0aW9ucywgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7XG4gIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbSxcbiAgYWRkRXhjZXB0aW9uVHlwZVZhbHVlLFxuICBpc0RPTUVycm9yLFxuICBpc0RPTUV4Y2VwdGlvbixcbiAgaXNFcnJvcixcbiAgaXNFcnJvckV2ZW50LFxuICBpc0V2ZW50LFxuICBpc1BsYWluT2JqZWN0LFxuICBTeW5jUHJvbWlzZSxcbn0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IGV2ZW50RnJvbVBsYWluT2JqZWN0LCBldmVudEZyb21TdGFja3RyYWNlLCBwcmVwYXJlRnJhbWVzRm9yRXZlbnQgfSBmcm9tICcuL3BhcnNlcnMnO1xuaW1wb3J0IHsgY29tcHV0ZVN0YWNrVHJhY2UgfSBmcm9tICcuL3RyYWNla2l0JztcblxuLyoqXG4gKiBCdWlsZHMgYW5kIEV2ZW50IGZyb20gYSBFeGNlcHRpb25cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbUV4Y2VwdGlvbihvcHRpb25zOiBPcHRpb25zLCBleGNlcHRpb246IHVua25vd24sIGhpbnQ/OiBFdmVudEhpbnQpOiBQcm9taXNlTGlrZTxFdmVudD4ge1xuICBjb25zdCBzeW50aGV0aWNFeGNlcHRpb24gPSAoaGludCAmJiBoaW50LnN5bnRoZXRpY0V4Y2VwdGlvbikgfHwgdW5kZWZpbmVkO1xuICBjb25zdCBldmVudCA9IGV2ZW50RnJvbVVua25vd25JbnB1dChleGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwge1xuICAgIGF0dGFjaFN0YWNrdHJhY2U6IG9wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSxcbiAgfSk7XG4gIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgdHlwZTogJ2dlbmVyaWMnLFxuICB9KTtcbiAgZXZlbnQubGV2ZWwgPSBTZXZlcml0eS5FcnJvcjtcbiAgaWYgKGhpbnQgJiYgaGludC5ldmVudF9pZCkge1xuICAgIGV2ZW50LmV2ZW50X2lkID0gaGludC5ldmVudF9pZDtcbiAgfVxuICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG59XG5cbi8qKlxuICogQnVpbGRzIGFuZCBFdmVudCBmcm9tIGEgTWVzc2FnZVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tTWVzc2FnZShcbiAgb3B0aW9uczogT3B0aW9ucyxcbiAgbWVzc2FnZTogc3RyaW5nLFxuICBsZXZlbDogU2V2ZXJpdHkgPSBTZXZlcml0eS5JbmZvLFxuICBoaW50PzogRXZlbnRIaW50LFxuKTogUHJvbWlzZUxpa2U8RXZlbnQ+IHtcbiAgY29uc3Qgc3ludGhldGljRXhjZXB0aW9uID0gKGhpbnQgJiYgaGludC5zeW50aGV0aWNFeGNlcHRpb24pIHx8IHVuZGVmaW5lZDtcbiAgY29uc3QgZXZlbnQgPSBldmVudEZyb21TdHJpbmcobWVzc2FnZSwgc3ludGhldGljRXhjZXB0aW9uLCB7XG4gICAgYXR0YWNoU3RhY2t0cmFjZTogb3B0aW9ucy5hdHRhY2hTdGFja3RyYWNlLFxuICB9KTtcbiAgZXZlbnQubGV2ZWwgPSBsZXZlbDtcbiAgaWYgKGhpbnQgJiYgaGludC5ldmVudF9pZCkge1xuICAgIGV2ZW50LmV2ZW50X2lkID0gaGludC5ldmVudF9pZDtcbiAgfVxuICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tVW5rbm93bklucHV0KFxuICBleGNlcHRpb246IHVua25vd24sXG4gIHN5bnRoZXRpY0V4Y2VwdGlvbj86IEVycm9yLFxuICBvcHRpb25zOiB7XG4gICAgcmVqZWN0aW9uPzogYm9vbGVhbjtcbiAgICBhdHRhY2hTdGFja3RyYWNlPzogYm9vbGVhbjtcbiAgfSA9IHt9LFxuKTogRXZlbnQge1xuICBsZXQgZXZlbnQ6IEV2ZW50O1xuXG4gIGlmIChpc0Vycm9yRXZlbnQoZXhjZXB0aW9uIGFzIEVycm9yRXZlbnQpICYmIChleGNlcHRpb24gYXMgRXJyb3JFdmVudCkuZXJyb3IpIHtcbiAgICAvLyBJZiBpdCBpcyBhbiBFcnJvckV2ZW50IHdpdGggYGVycm9yYCBwcm9wZXJ0eSwgZXh0cmFjdCBpdCB0byBnZXQgYWN0dWFsIEVycm9yXG4gICAgY29uc3QgZXJyb3JFdmVudCA9IGV4Y2VwdGlvbiBhcyBFcnJvckV2ZW50O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGV4Y2VwdGlvbiA9IGVycm9yRXZlbnQuZXJyb3I7XG4gICAgZXZlbnQgPSBldmVudEZyb21TdGFja3RyYWNlKGNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbiBhcyBFcnJvcikpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBpZiAoaXNET01FcnJvcihleGNlcHRpb24gYXMgRE9NRXJyb3IpIHx8IGlzRE9NRXhjZXB0aW9uKGV4Y2VwdGlvbiBhcyBET01FeGNlcHRpb24pKSB7XG4gICAgLy8gSWYgaXQgaXMgYSBET01FcnJvciBvciBET01FeGNlcHRpb24gKHdoaWNoIGFyZSBsZWdhY3kgQVBJcywgYnV0IHN0aWxsIHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzKVxuICAgIC8vIHRoZW4gd2UganVzdCBleHRyYWN0IHRoZSBuYW1lLCBjb2RlLCBhbmQgbWVzc2FnZSwgYXMgdGhleSBkb24ndCBwcm92aWRlIGFueXRoaW5nIGVsc2VcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXJyb3JcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NRXhjZXB0aW9uXG4gICAgY29uc3QgZG9tRXhjZXB0aW9uID0gZXhjZXB0aW9uIGFzIERPTUV4Y2VwdGlvbjtcbiAgICBjb25zdCBuYW1lID0gZG9tRXhjZXB0aW9uLm5hbWUgfHwgKGlzRE9NRXJyb3IoZG9tRXhjZXB0aW9uKSA/ICdET01FcnJvcicgOiAnRE9NRXhjZXB0aW9uJyk7XG4gICAgY29uc3QgbWVzc2FnZSA9IGRvbUV4Y2VwdGlvbi5tZXNzYWdlID8gYCR7bmFtZX06ICR7ZG9tRXhjZXB0aW9uLm1lc3NhZ2V9YCA6IG5hbWU7XG5cbiAgICBldmVudCA9IGV2ZW50RnJvbVN0cmluZyhtZXNzYWdlLCBzeW50aGV0aWNFeGNlcHRpb24sIG9wdGlvbnMpO1xuICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgbWVzc2FnZSk7XG4gICAgaWYgKCdjb2RlJyBpbiBkb21FeGNlcHRpb24pIHtcbiAgICAgIGV2ZW50LnRhZ3MgPSB7IC4uLmV2ZW50LnRhZ3MsICdET01FeGNlcHRpb24uY29kZSc6IGAke2RvbUV4Y2VwdGlvbi5jb2RlfWAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgaWYgKGlzRXJyb3IoZXhjZXB0aW9uIGFzIEVycm9yKSkge1xuICAgIC8vIHdlIGhhdmUgYSByZWFsIEVycm9yIG9iamVjdCwgZG8gbm90aGluZ1xuICAgIGV2ZW50ID0gZXZlbnRGcm9tU3RhY2t0cmFjZShjb21wdXRlU3RhY2tUcmFjZShleGNlcHRpb24gYXMgRXJyb3IpKTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgaWYgKGlzUGxhaW5PYmplY3QoZXhjZXB0aW9uKSB8fCBpc0V2ZW50KGV4Y2VwdGlvbikpIHtcbiAgICAvLyBJZiBpdCBpcyBwbGFpbiBPYmplY3Qgb3IgRXZlbnQsIHNlcmlhbGl6ZSBpdCBtYW51YWxseSBhbmQgZXh0cmFjdCBvcHRpb25zXG4gICAgLy8gVGhpcyB3aWxsIGFsbG93IHVzIHRvIGdyb3VwIGV2ZW50cyBiYXNlZCBvbiB0b3AtbGV2ZWwga2V5c1xuICAgIC8vIHdoaWNoIGlzIG11Y2ggYmV0dGVyIHRoYW4gY3JlYXRpbmcgbmV3IGdyb3VwIHdoZW4gYW55IGtleS92YWx1ZSBjaGFuZ2VcbiAgICBjb25zdCBvYmplY3RFeGNlcHRpb24gPSBleGNlcHRpb24gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgZXZlbnQgPSBldmVudEZyb21QbGFpbk9iamVjdChvYmplY3RFeGNlcHRpb24sIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucy5yZWplY3Rpb24pO1xuICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgc3ludGhldGljOiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgcHJldmlvdXMgY2hlY2tzIHdlcmUgdmFsaWQsIHRoZW4gaXQgbWVhbnMgdGhhdCBpdCdzIG5vdDpcbiAgLy8gLSBhbiBpbnN0YW5jZSBvZiBET01FcnJvclxuICAvLyAtIGFuIGluc3RhbmNlIG9mIERPTUV4Y2VwdGlvblxuICAvLyAtIGFuIGluc3RhbmNlIG9mIEV2ZW50XG4gIC8vIC0gYW4gaW5zdGFuY2Ugb2YgRXJyb3JcbiAgLy8gLSBhIHZhbGlkIEVycm9yRXZlbnQgKG9uZSB3aXRoIGFuIGVycm9yIHByb3BlcnR5KVxuICAvLyAtIGEgcGxhaW4gT2JqZWN0XG4gIC8vXG4gIC8vIFNvIGJhaWwgb3V0IGFuZCBjYXB0dXJlIGl0IGFzIGEgc2ltcGxlIG1lc3NhZ2U6XG4gIGV2ZW50ID0gZXZlbnRGcm9tU3RyaW5nKGV4Y2VwdGlvbiBhcyBzdHJpbmcsIHN5bnRoZXRpY0V4Y2VwdGlvbiwgb3B0aW9ucyk7XG4gIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgYCR7ZXhjZXB0aW9ufWAsIHVuZGVmaW5lZCk7XG4gIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgIHN5bnRoZXRpYzogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RnJvbVN0cmluZyhcbiAgaW5wdXQ6IHN0cmluZyxcbiAgc3ludGhldGljRXhjZXB0aW9uPzogRXJyb3IsXG4gIG9wdGlvbnM6IHtcbiAgICBhdHRhY2hTdGFja3RyYWNlPzogYm9vbGVhbjtcbiAgfSA9IHt9LFxuKTogRXZlbnQge1xuICBjb25zdCBldmVudDogRXZlbnQgPSB7XG4gICAgbWVzc2FnZTogaW5wdXQsXG4gIH07XG5cbiAgaWYgKG9wdGlvbnMuYXR0YWNoU3RhY2t0cmFjZSAmJiBzeW50aGV0aWNFeGNlcHRpb24pIHtcbiAgICBjb25zdCBzdGFja3RyYWNlID0gY29tcHV0ZVN0YWNrVHJhY2Uoc3ludGhldGljRXhjZXB0aW9uKTtcbiAgICBjb25zdCBmcmFtZXMgPSBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2t0cmFjZS5zdGFjayk7XG4gICAgZXZlbnQuc3RhY2t0cmFjZSA9IHtcbiAgICAgIGZyYW1lcyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/eventbuilder.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/exports.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/exports.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nexports.Severity = types_1.Severity;\nexports.Status = types_1.Status;\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nexports.addGlobalEventProcessor = core_1.addGlobalEventProcessor;\nexports.addBreadcrumb = core_1.addBreadcrumb;\nexports.captureException = core_1.captureException;\nexports.captureEvent = core_1.captureEvent;\nexports.captureMessage = core_1.captureMessage;\nexports.configureScope = core_1.configureScope;\nexports.getHubFromCarrier = core_1.getHubFromCarrier;\nexports.getCurrentHub = core_1.getCurrentHub;\nexports.Hub = core_1.Hub;\nexports.makeMain = core_1.makeMain;\nexports.Scope = core_1.Scope;\nexports.startTransaction = core_1.startTransaction;\nexports.setContext = core_1.setContext;\nexports.setExtra = core_1.setExtra;\nexports.setExtras = core_1.setExtras;\nexports.setTag = core_1.setTag;\nexports.setTags = core_1.setTags;\nexports.setUser = core_1.setUser;\nexports.withScope = core_1.withScope;\n\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/@sentry/browser/dist/client.js\");\n\nexports.BrowserClient = client_1.BrowserClient;\n\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@sentry/browser/dist/helpers.js\");\n\nexports.injectReportDialog = helpers_1.injectReportDialog;\n\nvar eventbuilder_1 = __webpack_require__(/*! ./eventbuilder */ \"./node_modules/@sentry/browser/dist/eventbuilder.js\");\n\nexports.eventFromException = eventbuilder_1.eventFromException;\nexports.eventFromMessage = eventbuilder_1.eventFromMessage;\n\nvar sdk_1 = __webpack_require__(/*! ./sdk */ \"./node_modules/@sentry/browser/dist/sdk.js\");\n\nexports.defaultIntegrations = sdk_1.defaultIntegrations;\nexports.forceLoad = sdk_1.forceLoad;\nexports.init = sdk_1.init;\nexports.lastEventId = sdk_1.lastEventId;\nexports.onLoad = sdk_1.onLoad;\nexports.showReportDialog = sdk_1.showReportDialog;\nexports.flush = sdk_1.flush;\nexports.close = sdk_1.close;\nexports.wrap = sdk_1.wrap;\n\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@sentry/browser/dist/version.js\");\n\nexports.SDK_NAME = version_1.SDK_NAME;\nexports.SDK_VERSION = version_1.SDK_VERSION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZXhwb3J0cy50cz9iY2RlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFTRTtBQUdBOztBQUtGOztBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlGOztBQUFTOztBQUNUOztBQUFTOztBQUNUOztBQUFTO0FBQW9COztBQUM3Qjs7QUFBUztBQUFxQjtBQUFXO0FBQU07QUFBYTtBQUFRO0FBQWtCO0FBQU87QUFBTzs7QUFDcEc7O0FBQVM7QUFBVSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC9leHBvcnRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtcbiAgQnJlYWRjcnVtYixcbiAgQnJlYWRjcnVtYkhpbnQsXG4gIFJlcXVlc3QsXG4gIFNka0luZm8sXG4gIEV2ZW50LFxuICBFdmVudEhpbnQsXG4gIEV4Y2VwdGlvbixcbiAgUmVzcG9uc2UsXG4gIFNldmVyaXR5LFxuICBTdGFja0ZyYW1lLFxuICBTdGFja3RyYWNlLFxuICBTdGF0dXMsXG4gIFRocmVhZCxcbiAgVXNlcixcbn0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbmV4cG9ydCB7XG4gIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLFxuICBhZGRCcmVhZGNydW1iLFxuICBjYXB0dXJlRXhjZXB0aW9uLFxuICBjYXB0dXJlRXZlbnQsXG4gIGNhcHR1cmVNZXNzYWdlLFxuICBjb25maWd1cmVTY29wZSxcbiAgZ2V0SHViRnJvbUNhcnJpZXIsXG4gIGdldEN1cnJlbnRIdWIsXG4gIEh1YixcbiAgbWFrZU1haW4sXG4gIFNjb3BlLFxuICBzdGFydFRyYW5zYWN0aW9uLFxuICBzZXRDb250ZXh0LFxuICBzZXRFeHRyYSxcbiAgc2V0RXh0cmFzLFxuICBzZXRUYWcsXG4gIHNldFRhZ3MsXG4gIHNldFVzZXIsXG4gIHdpdGhTY29wZSxcbn0gZnJvbSAnQHNlbnRyeS9jb3JlJztcblxuZXhwb3J0IHsgQnJvd3Nlck9wdGlvbnMgfSBmcm9tICcuL2JhY2tlbmQnO1xuZXhwb3J0IHsgQnJvd3NlckNsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmV4cG9ydCB7IGluamVjdFJlcG9ydERpYWxvZywgUmVwb3J0RGlhbG9nT3B0aW9ucyB9IGZyb20gJy4vaGVscGVycyc7XG5leHBvcnQgeyBldmVudEZyb21FeGNlcHRpb24sIGV2ZW50RnJvbU1lc3NhZ2UgfSBmcm9tICcuL2V2ZW50YnVpbGRlcic7XG5leHBvcnQgeyBkZWZhdWx0SW50ZWdyYXRpb25zLCBmb3JjZUxvYWQsIGluaXQsIGxhc3RFdmVudElkLCBvbkxvYWQsIHNob3dSZXBvcnREaWFsb2csIGZsdXNoLCBjbG9zZSwgd3JhcCB9IGZyb20gJy4vc2RrJztcbmV4cG9ydCB7IFNES19OQU1FLCBTREtfVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbic7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/exports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/helpers.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/helpers.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar ignoreOnError = 0;\n/**\n * @hidden\n */\n\nfunction shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n\nexports.shouldIgnoreOnError = shouldIgnoreOnError;\n/**\n * @hidden\n */\n\nfunction ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(function () {\n    ignoreOnError -= 1;\n  });\n}\n\nexports.ignoreNextOnError = ignoreNextOnError;\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\n\nfunction wrap(fn, options, before) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    } // If this has already been wrapped in the past, return that wrapped function\n\n\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  var sentryWrapped = function sentryWrapped() {\n    var args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n\n\n      var wrappedArguments = args.map(function (arg) {\n        return wrap(arg, options);\n      });\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      } // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n      core_1.withScope(function (scope) {\n        scope.addEventProcessor(function (event) {\n          var processedEvent = tslib_1.__assign({}, event);\n\n          if (options.mechanism) {\n            utils_1.addExceptionTypeValue(processedEvent, undefined, undefined);\n            utils_1.addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = tslib_1.__assign(tslib_1.__assign({}, processedEvent.extra), {\n            arguments: args\n          });\n          return processedEvent;\n        });\n        core_1.captureException(ex);\n      });\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n\n\n  try {\n    for (var property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped\n  }); // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn\n    }\n  }); // Restore original function name (not all browsers allow that)\n\n  try {\n    var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get: function get() {\n          return fn.name;\n        }\n      });\n    } // eslint-disable-next-line no-empty\n\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\nexports.wrap = wrap;\n/**\n * Injects the Report Dialog script\n * @hidden\n */\n\nfunction injectReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.eventId) {\n    utils_1.logger.error(\"Missing eventId option in showReportDialog call\");\n    return;\n  }\n\n  if (!options.dsn) {\n    utils_1.logger.error(\"Missing dsn option in showReportDialog call\");\n    return;\n  }\n\n  var script = document.createElement('script');\n  script.async = true;\n  script.src = new core_1.API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  (document.head || document.body).appendChild(script);\n}\n\nexports.injectReportDialog = injectReportDialog;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaGVscGVycy50cz81YTE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUEsSUFBSSxhQUFhLEdBQVcsQ0FBNUI7QUFFQTs7OztBQUdBLFNBQWdCLG1CQUFoQixHQUFtQztBQUNqQyxTQUFPLGFBQWEsR0FBRyxDQUF2QjtBQUNEOztBQUZEO0FBSUE7Ozs7QUFHQSxTQUFnQixpQkFBaEIsR0FBaUM7QUFDL0I7QUFDQSxlQUFhLElBQUksQ0FBakI7QUFDQSxZQUFVLENBQUM7QUFDVCxpQkFBYSxJQUFJLENBQWpCO0FBQ0QsR0FGUyxDQUFWO0FBR0Q7O0FBTkQ7QUFRQTs7Ozs7Ozs7O0FBUUEsU0FBZ0IsSUFBaEIsQ0FDRSxFQURGLEVBRUUsT0FGRixFQUtFLE1BTEYsRUFLMEI7QUFIeEI7QUFBQTtBQUVNOztBQUlOLE1BQUksT0FBTyxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGO0FBQ0EsUUFBSSxFQUFFLENBQUMsVUFBUCxFQUFtQjtBQUNqQixhQUFPLEVBQVA7QUFDRCxLQUpDLENBTUY7OztBQUNBLFFBQUksRUFBRSxDQUFDLGtCQUFQLEVBQTJCO0FBQ3pCLGFBQU8sRUFBRSxDQUFDLGtCQUFWO0FBQ0Q7QUFDRixHQVZELENBVUUsT0FBTyxDQUFQLEVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFPLEVBQVA7QUFDRDtBQUVEO0FBQ0E7OztBQUNBLE1BQU0sYUFBYSxHQUFvQixTQUFqQyxhQUFpQztBQUNyQyxRQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBTixDQUFnQixLQUFoQixDQUFzQixJQUF0QixDQUEyQixTQUEzQixDQUFiOztBQUVBLFFBQUk7QUFDRixVQUFJLE1BQU0sSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBaEMsRUFBNEM7QUFDMUMsY0FBTSxDQUFDLEtBQVAsQ0FBYSxJQUFiLEVBQW1CLFNBQW5CO0FBQ0QsT0FIQyxDQUtGOzs7QUFDQSxVQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsVUFBQyxHQUFELEVBQVM7QUFBSyxtQkFBSSxDQUFDLEdBQUQsRUFBSixPQUFJLENBQUo7QUFBa0IsT0FBekMsQ0FBekI7O0FBRUEsVUFBSSxFQUFFLENBQUMsV0FBUCxFQUFvQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBTyxFQUFFLENBQUMsV0FBSCxDQUFlLEtBQWYsQ0FBcUIsSUFBckIsRUFBMkIsZ0JBQTNCLENBQVA7QUFDRCxPQWZDLENBZ0JGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxhQUFPLEVBQUUsQ0FBQyxLQUFILENBQVMsSUFBVCxFQUFlLGdCQUFmLENBQVA7QUFDRCxLQXJCRCxDQXFCRSxPQUFPLEVBQVAsRUFBVztBQUNYLHVCQUFpQjtBQUVqQix1QkFBVSxVQUFDLEtBQUQsRUFBYTtBQUNyQixhQUFLLENBQUMsaUJBQU4sQ0FBd0IsVUFBQyxLQUFELEVBQW1CO0FBQ3pDLGNBQU0sY0FBYyx3QkFBUSxLQUFSLENBQXBCOztBQUVBLGNBQUksT0FBTyxDQUFDLFNBQVosRUFBdUI7QUFDckIsMENBQXNCLGNBQXRCLEVBQXNDLFNBQXRDLEVBQWlELFNBQWpEO0FBQ0EsMENBQXNCLGNBQXRCLEVBQXNDLE9BQU8sQ0FBQyxTQUE5QztBQUNEOztBQUVELHdCQUFjLENBQUMsS0FBZixHQUFvQixzQ0FDZixjQUFjLENBQUMsS0FEQSxHQUNLO0FBQ3ZCLHFCQUFTLEVBQUU7QUFEWSxXQURMLENBQXBCO0FBS0EsaUJBQU8sY0FBUDtBQUNELFNBZEQ7QUFnQkEsZ0NBQWlCLEVBQWpCO0FBQ0QsT0FsQkQ7QUFvQkEsWUFBTSxFQUFOO0FBQ0Q7QUFDRixHQWpERDtBQWtEQTtBQUVBO0FBQ0E7OztBQUNBLE1BQUk7QUFDRixTQUFLLElBQU0sUUFBWCxJQUF1QixFQUF2QixFQUEyQjtBQUN6QixVQUFJLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGNBQWpCLENBQWdDLElBQWhDLENBQXFDLEVBQXJDLEVBQXlDLFFBQXpDLENBQUosRUFBd0Q7QUFDdEQscUJBQWEsQ0FBQyxRQUFELENBQWIsR0FBMEIsRUFBRSxDQUFDLFFBQUQsQ0FBNUI7QUFDRDtBQUNGO0FBQ0YsR0FORCxDQU1FLE9BQU8sR0FBUCxFQUFZLENBQUUsQ0F0RlEsQ0FzRlA7OztBQUVqQixJQUFFLENBQUMsU0FBSCxHQUFlLEVBQUUsQ0FBQyxTQUFILElBQWdCLEVBQS9CO0FBQ0EsZUFBYSxDQUFDLFNBQWQsR0FBMEIsRUFBRSxDQUFDLFNBQTdCO0FBRUEsUUFBTSxDQUFDLGNBQVAsQ0FBc0IsRUFBdEIsRUFBMEIsb0JBQTFCLEVBQWdEO0FBQzlDLGNBQVUsRUFBRSxLQURrQztBQUU5QyxTQUFLLEVBQUU7QUFGdUMsR0FBaEQsRUEzRndCLENBZ0d4QjtBQUNBOztBQUNBLFFBQU0sQ0FBQyxnQkFBUCxDQUF3QixhQUF4QixFQUF1QztBQUNyQyxjQUFVLEVBQUU7QUFDVixnQkFBVSxFQUFFLEtBREY7QUFFVixXQUFLLEVBQUU7QUFGRyxLQUR5QjtBQUtyQyx1QkFBbUIsRUFBRTtBQUNuQixnQkFBVSxFQUFFLEtBRE87QUFFbkIsV0FBSyxFQUFFO0FBRlk7QUFMZ0IsR0FBdkMsRUFsR3dCLENBNkd4Qjs7QUFDQSxNQUFJO0FBQ0YsUUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLHdCQUFQLENBQWdDLGFBQWhDLEVBQStDLE1BQS9DLENBQW5COztBQUNBLFFBQUksVUFBVSxDQUFDLFlBQWYsRUFBNkI7QUFDM0IsWUFBTSxDQUFDLGNBQVAsQ0FBc0IsYUFBdEIsRUFBcUMsTUFBckMsRUFBNkM7QUFDM0MsV0FBRyxFQUFIO0FBQ0UsaUJBQU8sRUFBRSxDQUFDLElBQVY7QUFDRDtBQUgwQyxPQUE3QztBQUtELEtBUkMsQ0FTRjs7QUFDRCxHQVZELENBVUUsT0FBTyxHQUFQLEVBQVksQ0FBRTs7QUFFaEIsU0FBTyxhQUFQO0FBQ0Q7O0FBaElEO0FBOEpBOzs7OztBQUlBLFNBQWdCLGtCQUFoQixDQUFtQyxPQUFuQyxFQUFvRTtBQUFqQztBQUFBO0FBQWlDOztBQUNsRSxNQUFJLENBQUMsT0FBTyxDQUFDLE9BQWIsRUFBc0I7QUFDcEIsbUJBQU8sS0FBUCxDQUFhLGlEQUFiO0FBQ0E7QUFDRDs7QUFDRCxNQUFJLENBQUMsT0FBTyxDQUFDLEdBQWIsRUFBa0I7QUFDaEIsbUJBQU8sS0FBUCxDQUFhLDZDQUFiO0FBQ0E7QUFDRDs7QUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0EsUUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFmO0FBQ0EsUUFBTSxDQUFDLEdBQVAsR0FBYSxJQUFJLFVBQUosQ0FBUSxPQUFPLENBQUMsR0FBaEIsRUFBcUIsdUJBQXJCLENBQTZDLE9BQTdDLENBQWI7O0FBRUEsTUFBSSxPQUFPLENBQUMsTUFBWixFQUFvQjtBQUNsQjtBQUNBLFVBQU0sQ0FBQyxNQUFQLEdBQWdCLE9BQU8sQ0FBQyxNQUF4QjtBQUNEOztBQUVELEdBQUMsUUFBUSxDQUFDLElBQVQsSUFBaUIsUUFBUSxDQUFDLElBQTNCLEVBQWlDLFdBQWpDLENBQTZDLE1BQTdDO0FBQ0Q7O0FBcEJEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L2hlbHBlcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUEksIGNhcHR1cmVFeGNlcHRpb24sIHdpdGhTY29wZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBEc25MaWtlLCBFdmVudCBhcyBTZW50cnlFdmVudCwgTWVjaGFuaXNtLCBTY29wZSwgV3JhcHBlZEZ1bmN0aW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGRFeGNlcHRpb25NZWNoYW5pc20sIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZSwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmxldCBpZ25vcmVPbkVycm9yOiBudW1iZXIgPSAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZElnbm9yZU9uRXJyb3IoKTogYm9vbGVhbiB7XG4gIHJldHVybiBpZ25vcmVPbkVycm9yID4gMDtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZ25vcmVOZXh0T25FcnJvcigpOiB2b2lkIHtcbiAgLy8gb25lcnJvciBzaG91bGQgdHJpZ2dlciBiZWZvcmUgc2V0VGltZW91dFxuICBpZ25vcmVPbkVycm9yICs9IDE7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlnbm9yZU9uRXJyb3IgLT0gMTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGdpdmVuIGZ1bmN0aW9uIGFuZCBzZW5kcyBhbiBldmVudCB0byBTZW50cnkgZXZlcnkgdGltZSB0aGVcbiAqIGZ1bmN0aW9uIHRocm93cyBhbiBleGNlcHRpb24uXG4gKlxuICogQHBhcmFtIGZuIEEgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIGZ1bmN0aW9uLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcChcbiAgZm46IFdyYXBwZWRGdW5jdGlvbixcbiAgb3B0aW9uczoge1xuICAgIG1lY2hhbmlzbT86IE1lY2hhbmlzbTtcbiAgfSA9IHt9LFxuICBiZWZvcmU/OiBXcmFwcGVkRnVuY3Rpb24sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4pOiBhbnkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBXZSBkb24ndCB3YW5uYSB3cmFwIGl0IHR3aWNlXG4gICAgaWYgKGZuLl9fc2VudHJ5X18pIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGhhcyBhbHJlYWR5IGJlZW4gd3JhcHBlZCBpbiB0aGUgcGFzdCwgcmV0dXJuIHRoYXQgd3JhcHBlZCBmdW5jdGlvblxuICAgIGlmIChmbi5fX3NlbnRyeV93cmFwcGVkX18pIHtcbiAgICAgIHJldHVybiBmbi5fX3NlbnRyeV93cmFwcGVkX187XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIHJhdmVuLWpzIzQ5NSkuXG4gICAgLy8gQmFpbCBvbiB3cmFwcGluZyBhbmQgcmV0dXJuIHRoZSBmdW5jdGlvbiBhcy1pcyAoZGVmZXJzIHRvIHdpbmRvdy5vbmVycm9yKS5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgY29uc3Qgc2VudHJ5V3JhcHBlZDogV3JhcHBlZEZ1bmN0aW9uID0gZnVuY3Rpb24odGhpczogYW55KTogdm9pZCB7XG4gICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGJlZm9yZSAmJiB0eXBlb2YgYmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGJlZm9yZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICBjb25zdCB3cmFwcGVkQXJndW1lbnRzID0gYXJncy5tYXAoKGFyZzogYW55KSA9PiB3cmFwKGFyZywgb3B0aW9ucykpO1xuXG4gICAgICBpZiAoZm4uaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBpbnZva2UgdXNlci1sYW5kIGZ1bmN0aW9uXG4gICAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAgIC8vICAgICAgIG1lYW5zIHRoZSBzZW50cnkuamF2YXNjcmlwdCBTREsgY2F1Z2h0IGFuIGVycm9yIGludm9raW5nIHlvdXIgYXBwbGljYXRpb24gY29kZS4gVGhpc1xuICAgICAgICAvLyAgICAgICBpcyBleHBlY3RlZCBiZWhhdmlvciBhbmQgTk9UIGluZGljYXRpdmUgb2YgYSBidWcgd2l0aCBzZW50cnkuamF2YXNjcmlwdC5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICByZXR1cm4gZm4uaGFuZGxlRXZlbnQuYXBwbHkodGhpcywgd3JhcHBlZEFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICAvLyBBdHRlbXB0IHRvIGludm9rZSB1c2VyLWxhbmQgZnVuY3Rpb25cbiAgICAgIC8vIE5PVEU6IElmIHlvdSBhcmUgYSBTZW50cnkgdXNlciwgYW5kIHlvdSBhcmUgc2VlaW5nIHRoaXMgc3RhY2sgZnJhbWUsIGl0XG4gICAgICAvLyAgICAgICBtZWFucyB0aGUgc2VudHJ5LmphdmFzY3JpcHQgU0RLIGNhdWdodCBhbiBlcnJvciBpbnZva2luZyB5b3VyIGFwcGxpY2F0aW9uIGNvZGUuIFRoaXNcbiAgICAgIC8vICAgICAgIGlzIGV4cGVjdGVkIGJlaGF2aW9yIGFuZCBOT1QgaW5kaWNhdGl2ZSBvZiBhIGJ1ZyB3aXRoIHNlbnRyeS5qYXZhc2NyaXB0LlxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIHdyYXBwZWRBcmd1bWVudHMpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBpZ25vcmVOZXh0T25FcnJvcigpO1xuXG4gICAgICB3aXRoU2NvcGUoKHNjb3BlOiBTY29wZSkgPT4ge1xuICAgICAgICBzY29wZS5hZGRFdmVudFByb2Nlc3NvcigoZXZlbnQ6IFNlbnRyeUV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2VkRXZlbnQgPSB7IC4uLmV2ZW50IH07XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5tZWNoYW5pc20pIHtcbiAgICAgICAgICAgIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShwcm9jZXNzZWRFdmVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgYWRkRXhjZXB0aW9uTWVjaGFuaXNtKHByb2Nlc3NlZEV2ZW50LCBvcHRpb25zLm1lY2hhbmlzbSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJvY2Vzc2VkRXZlbnQuZXh0cmEgPSB7XG4gICAgICAgICAgICAuLi5wcm9jZXNzZWRFdmVudC5leHRyYSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEV2ZW50O1xuICAgICAgICB9KTtcblxuICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGV4KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aHJvdyBleDtcbiAgICB9XG4gIH07XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG5cbiAgLy8gQWNjZXNzaW5nIHNvbWUgb2JqZWN0cyBtYXkgdGhyb3dcbiAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8xMTY4XG4gIHRyeSB7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBmbikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmbiwgcHJvcGVydHkpKSB7XG4gICAgICAgIHNlbnRyeVdyYXBwZWRbcHJvcGVydHldID0gZm5bcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoX29PKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbiAgZm4ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlIHx8IHt9O1xuICBzZW50cnlXcmFwcGVkLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdfX3NlbnRyeV93cmFwcGVkX18nLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IHNlbnRyeVdyYXBwZWQsXG4gIH0pO1xuXG4gIC8vIFNpZ25hbCB0aGF0IHRoaXMgZnVuY3Rpb24gaGFzIGJlZW4gd3JhcHBlZC9maWxsZWQgYWxyZWFkeVxuICAvLyBmb3IgYm90aCBkZWJ1Z2dpbmcgYW5kIHRvIHByZXZlbnQgaXQgdG8gYmVpbmcgd3JhcHBlZC9maWxsZWQgdHdpY2VcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2VudHJ5V3JhcHBlZCwge1xuICAgIF9fc2VudHJ5X186IHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBfX3NlbnRyeV9vcmlnaW5hbF9fOiB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBmbixcbiAgICB9LFxuICB9KTtcblxuICAvLyBSZXN0b3JlIG9yaWdpbmFsIGZ1bmN0aW9uIG5hbWUgKG5vdCBhbGwgYnJvd3NlcnMgYWxsb3cgdGhhdClcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzZW50cnlXcmFwcGVkLCAnbmFtZScpIGFzIFByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICBpZiAoZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZW50cnlXcmFwcGVkLCAnbmFtZScsIHtcbiAgICAgICAgZ2V0KCk6IHN0cmluZyB7XG4gICAgICAgICAgcmV0dXJuIGZuLm5hbWU7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKF9vTykge31cblxuICByZXR1cm4gc2VudHJ5V3JhcHBlZDtcbn1cblxuLyoqXG4gKiBBbGwgcHJvcGVydGllcyB0aGUgcmVwb3J0IGRpYWxvZyBzdXBwb3J0c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9ydERpYWxvZ09wdGlvbnMge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIGV2ZW50SWQ/OiBzdHJpbmc7XG4gIGRzbj86IERzbkxpa2U7XG4gIHVzZXI/OiB7XG4gICAgZW1haWw/OiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgfTtcbiAgbGFuZz86IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIHN1YnRpdGxlPzogc3RyaW5nO1xuICBzdWJ0aXRsZTI/OiBzdHJpbmc7XG4gIGxhYmVsTmFtZT86IHN0cmluZztcbiAgbGFiZWxFbWFpbD86IHN0cmluZztcbiAgbGFiZWxDb21tZW50cz86IHN0cmluZztcbiAgbGFiZWxDbG9zZT86IHN0cmluZztcbiAgbGFiZWxTdWJtaXQ/OiBzdHJpbmc7XG4gIGVycm9yR2VuZXJpYz86IHN0cmluZztcbiAgZXJyb3JGb3JtRW50cnk/OiBzdHJpbmc7XG4gIHN1Y2Nlc3NNZXNzYWdlPzogc3RyaW5nO1xuICAvKiogQ2FsbGJhY2sgYWZ0ZXIgcmVwb3J0RGlhbG9nIHNob3dlZCB1cCAqL1xuICBvbkxvYWQ/KCk6IHZvaWQ7XG59XG5cbi8qKlxuICogSW5qZWN0cyB0aGUgUmVwb3J0IERpYWxvZyBzY3JpcHRcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJlcG9ydERpYWxvZyhvcHRpb25zOiBSZXBvcnREaWFsb2dPcHRpb25zID0ge30pOiB2b2lkIHtcbiAgaWYgKCFvcHRpb25zLmV2ZW50SWQpIHtcbiAgICBsb2dnZXIuZXJyb3IoYE1pc3NpbmcgZXZlbnRJZCBvcHRpb24gaW4gc2hvd1JlcG9ydERpYWxvZyBjYWxsYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghb3B0aW9ucy5kc24pIHtcbiAgICBsb2dnZXIuZXJyb3IoYE1pc3NpbmcgZHNuIG9wdGlvbiBpbiBzaG93UmVwb3J0RGlhbG9nIGNhbGxgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgc2NyaXB0LnNyYyA9IG5ldyBBUEkob3B0aW9ucy5kc24pLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50KG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLm9uTG9hZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBzY3JpcHQub25sb2FkID0gb3B0aW9ucy5vbkxvYWQ7XG4gIH1cblxuICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/helpers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\ntslib_1.__exportStar(__webpack_require__(/*! ./exports */ \"./node_modules/@sentry/browser/dist/exports.js\"), exports);\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar BrowserIntegrations = __webpack_require__(/*! ./integrations */ \"./node_modules/@sentry/browser/dist/integrations/index.js\");\n\nvar Transports = __webpack_require__(/*! ./transports */ \"./node_modules/@sentry/browser/dist/transports/index.js\");\n\nexports.Transports = Transports;\nvar windowIntegrations = {}; // This block is needed to add compatibility with the integrations packages when used with a CDN\n\nvar _window = utils_1.getGlobalObject();\n\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nvar INTEGRATIONS = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, windowIntegrations), core_1.Integrations), BrowserIntegrations);\n\nexports.Integrations = INTEGRATIONS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFnQnVDO0FBZHZDLElBQUksa0JBQWtCLEdBQUcsRUFBekIsQyxDQUVBOztBQUNBLElBQU0sT0FBTyxHQUFHLHlCQUFoQjs7QUFDQSxJQUFJLE9BQU8sQ0FBQyxNQUFSLElBQWtCLE9BQU8sQ0FBQyxNQUFSLENBQWUsWUFBckMsRUFBbUQ7QUFDakQsb0JBQWtCLEdBQUcsT0FBTyxDQUFDLE1BQVIsQ0FBZSxZQUFwQztBQUNEOztBQUVELElBQU0sWUFBWSwwREFDYixrQkFEYSxHQUViLG1CQUZhLEdBR2IsbUJBSGEsQ0FBbEI7O0FBTXlCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJztcblxuaW1wb3J0IHsgSW50ZWdyYXRpb25zIGFzIENvcmVJbnRlZ3JhdGlvbnMgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCAqIGFzIEJyb3dzZXJJbnRlZ3JhdGlvbnMgZnJvbSAnLi9pbnRlZ3JhdGlvbnMnO1xuaW1wb3J0ICogYXMgVHJhbnNwb3J0cyBmcm9tICcuL3RyYW5zcG9ydHMnO1xuXG5sZXQgd2luZG93SW50ZWdyYXRpb25zID0ge307XG5cbi8vIFRoaXMgYmxvY2sgaXMgbmVlZGVkIHRvIGFkZCBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGludGVncmF0aW9ucyBwYWNrYWdlcyB3aGVuIHVzZWQgd2l0aCBhIENETlxuY29uc3QgX3dpbmRvdyA9IGdldEdsb2JhbE9iamVjdDxXaW5kb3c+KCk7XG5pZiAoX3dpbmRvdy5TZW50cnkgJiYgX3dpbmRvdy5TZW50cnkuSW50ZWdyYXRpb25zKSB7XG4gIHdpbmRvd0ludGVncmF0aW9ucyA9IF93aW5kb3cuU2VudHJ5LkludGVncmF0aW9ucztcbn1cblxuY29uc3QgSU5URUdSQVRJT05TID0ge1xuICAuLi53aW5kb3dJbnRlZ3JhdGlvbnMsXG4gIC4uLkNvcmVJbnRlZ3JhdGlvbnMsXG4gIC4uLkJyb3dzZXJJbnRlZ3JhdGlvbnMsXG59O1xuXG5leHBvcnQgeyBJTlRFR1JBVElPTlMgYXMgSW50ZWdyYXRpb25zLCBUcmFuc3BvcnRzIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/breadcrumbs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/breadcrumbs.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable max-lines */\n\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\n\n\nvar Breadcrumbs =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = tslib_1.__assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n\n\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n\n    core_1.getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: utils_1.getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n\n\n  Breadcrumbs.prototype.setupOnce = function () {\n    var _this = this;\n\n    if (this._options.console) {\n      utils_1.addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._consoleBreadcrumb.apply(_this, tslib_1.__spread(args));\n        },\n        type: 'console'\n      });\n    }\n\n    if (this._options.dom) {\n      utils_1.addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._domBreadcrumb.apply(_this, tslib_1.__spread(args));\n        },\n        type: 'dom'\n      });\n    }\n\n    if (this._options.xhr) {\n      utils_1.addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._xhrBreadcrumb.apply(_this, tslib_1.__spread(args));\n        },\n        type: 'xhr'\n      });\n    }\n\n    if (this._options.fetch) {\n      utils_1.addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._fetchBreadcrumb.apply(_this, tslib_1.__spread(args));\n        },\n        type: 'fetch'\n      });\n    }\n\n    if (this._options.history) {\n      utils_1.addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._historyBreadcrumb.apply(_this, tslib_1.__spread(args));\n        },\n        type: 'history'\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._consoleBreadcrumb = function (handlerData) {\n    var breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: types_1.Severity.fromString(handlerData.level),\n      message: utils_1.safeJoin(handlerData.args, ' ')\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = \"Assertion failed: \" + (utils_1.safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    core_1.getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._domBreadcrumb = function (handlerData) {\n    var target; // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n    try {\n      target = handlerData.event.target ? utils_1.htmlTreeAsString(handlerData.event.target) : utils_1.htmlTreeAsString(handlerData.event);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    core_1.getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name\n    });\n  };\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._xhrBreadcrumb = function (handlerData) {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      var _a = handlerData.xhr.__sentry_xhr__ || {},\n          method = _a.method,\n          url = _a.url,\n          status_code = _a.status_code,\n          body = _a.body;\n\n      core_1.getCurrentHub().addBreadcrumb({\n        category: 'xhr',\n        data: {\n          method: method,\n          url: url,\n          status_code: status_code\n        },\n        type: 'http'\n      }, {\n        xhr: handlerData.xhr,\n        input: body\n      });\n      return;\n    }\n  };\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._fetchBreadcrumb = function (handlerData) {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      core_1.getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: types_1.Severity.Error,\n        type: 'http'\n      }, {\n        data: handlerData.error,\n        input: handlerData.args\n      });\n    } else {\n      core_1.getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: tslib_1.__assign(tslib_1.__assign({}, handlerData.fetchData), {\n          status_code: handlerData.response.status\n        }),\n        type: 'http'\n      }, {\n        input: handlerData.args,\n        response: handlerData.response\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._historyBreadcrumb = function (handlerData) {\n    var global = utils_1.getGlobalObject();\n    var from = handlerData.from;\n    var to = handlerData.to;\n    var parsedLoc = utils_1.parseUrl(global.location.href);\n    var parsedFrom = utils_1.parseUrl(from);\n    var parsedTo = utils_1.parseUrl(to); // Initial pushState doesn't provide `from` information\n\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    } // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n\n\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    core_1.getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from: from,\n        to: to\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\n\nexports.Breadcrumbs = Breadcrumbs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/breadcrumbs.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/globalhandlers.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/globalhandlers.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.parse-int */ \"./node_modules/core-js/modules/es.parse-int.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar eventbuilder_1 = __webpack_require__(/*! ../eventbuilder */ \"./node_modules/@sentry/browser/dist/eventbuilder.js\");\n\nvar helpers_1 = __webpack_require__(/*! ../helpers */ \"./node_modules/@sentry/browser/dist/helpers.js\");\n/** Global handlers */\n\n\nvar GlobalHandlers =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /** JSDoc */\n\n    this._onErrorHandlerInstalled = false;\n    /** JSDoc */\n\n    this._onUnhandledRejectionHandlerInstalled = false;\n    this._options = tslib_1.__assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      utils_1.logger.log('Global Handler attached: onerror');\n\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      utils_1.logger.log('Global Handler attached: onunhandledrejection');\n\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n    var _this = this;\n\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    utils_1.addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(data) {\n        var error = data.error;\n        var currentHub = core_1.getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || helpers_1.shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        var client = currentHub.getClient();\n        var event = utils_1.isPrimitive(error) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame(eventbuilder_1.eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: false\n        }), data.url, data.line, data.column);\n        utils_1.addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n      },\n      type: 'error'\n    });\n    this._onErrorHandlerInstalled = true;\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n    var _this = this;\n\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    utils_1.addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(e) {\n        var error = e; // dig the object of the rejection out of known event types\n\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n              error = e.detail.reason;\n            }\n        } catch (_oO) {// no-empty\n        }\n\n        var currentHub = core_1.getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || helpers_1.shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        var client = currentHub.getClient();\n        var event = utils_1.isPrimitive(error) ? _this._eventFromIncompleteRejection(error) : eventbuilder_1.eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: true\n        });\n        event.level = types_1.Severity.Error;\n        utils_1.addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n        return;\n      },\n      type: 'unhandledrejection'\n    });\n    this._onUnhandledRejectionHandlerInstalled = true;\n  };\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n    var message = utils_1.isErrorEvent(msg) ? msg.message : msg;\n    var name;\n\n    if (utils_1.isString(message)) {\n      var groups = message.match(ERROR_TYPES_RE);\n\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    var event = {\n      exception: {\n        values: [{\n          type: name || 'Error',\n          value: message\n        }]\n      }\n    };\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  };\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._eventFromIncompleteRejection = function (error) {\n    return {\n      exception: {\n        values: [{\n          type: 'UnhandledRejection',\n          value: \"Non-Error promise rejection captured with value: \" + error\n        }]\n      }\n    };\n  };\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n    var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    var filename = utils_1.isString(url) && url.length > 0 ? url : utils_1.getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno: colno,\n        filename: filename,\n        function: '?',\n        in_app: true,\n        lineno: lineno\n      });\n    }\n\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\n\nexports.GlobalHandlers = GlobalHandlers;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/globalhandlers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar globalhandlers_1 = __webpack_require__(/*! ./globalhandlers */ \"./node_modules/@sentry/browser/dist/integrations/globalhandlers.js\");\n\nexports.GlobalHandlers = globalhandlers_1.GlobalHandlers;\n\nvar trycatch_1 = __webpack_require__(/*! ./trycatch */ \"./node_modules/@sentry/browser/dist/integrations/trycatch.js\");\n\nexports.TryCatch = trycatch_1.TryCatch;\n\nvar breadcrumbs_1 = __webpack_require__(/*! ./breadcrumbs */ \"./node_modules/@sentry/browser/dist/integrations/breadcrumbs.js\");\n\nexports.Breadcrumbs = breadcrumbs_1.Breadcrumbs;\n\nvar linkederrors_1 = __webpack_require__(/*! ./linkederrors */ \"./node_modules/@sentry/browser/dist/integrations/linkederrors.js\");\n\nexports.LinkedErrors = linkederrors_1.LinkedErrors;\n\nvar useragent_1 = __webpack_require__(/*! ./useragent */ \"./node_modules/@sentry/browser/dist/integrations/useragent.js\");\n\nexports.UserAgent = useragent_1.UserAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL2luZGV4LnRzP2VjMjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUFTOztBQUNUOztBQUFTOztBQUNUOztBQUFTOztBQUNUOztBQUFTOztBQUNUOztBQUFTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L2ludGVncmF0aW9ucy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEdsb2JhbEhhbmRsZXJzIH0gZnJvbSAnLi9nbG9iYWxoYW5kbGVycyc7XG5leHBvcnQgeyBUcnlDYXRjaCB9IGZyb20gJy4vdHJ5Y2F0Y2gnO1xuZXhwb3J0IHsgQnJlYWRjcnVtYnMgfSBmcm9tICcuL2JyZWFkY3J1bWJzJztcbmV4cG9ydCB7IExpbmtlZEVycm9ycyB9IGZyb20gJy4vbGlua2VkZXJyb3JzJztcbmV4cG9ydCB7IFVzZXJBZ2VudCB9IGZyb20gJy4vdXNlcmFnZW50JztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/linkederrors.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/linkederrors.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar parsers_1 = __webpack_require__(/*! ../parsers */ \"./node_modules/@sentry/browser/dist/parsers.js\");\n\nvar tracekit_1 = __webpack_require__(/*! ../tracekit */ \"./node_modules/@sentry/browser/dist/tracekit.js\");\n\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype.setupOnce = function () {\n    core_1.addGlobalEventProcessor(function (event, hint) {\n      var self = core_1.getCurrentHub().getIntegration(LinkedErrors);\n\n      if (self) {\n        return self._handler(event, hint);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._handler = function (event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !utils_1.isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n\n    var linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n\n    event.exception.values = tslib_1.__spread(linkedErrors, event.exception.values);\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    if (stack === void 0) {\n      stack = [];\n    }\n\n    if (!utils_1.isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n\n    var stacktrace = tracekit_1.computeStackTrace(error[key]);\n    var exception = parsers_1.exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, tslib_1.__spread([exception], stack));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\n\nexports.LinkedErrors = LinkedErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy50cz8yODYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBRUEsSUFBTSxXQUFXLEdBQUcsT0FBcEI7QUFDQSxJQUFNLGFBQWEsR0FBRyxDQUF0QjtBQUVBOztBQUNBO0FBQUE7QUFBQTtBQXFCRTs7O0FBR0Esd0JBQW1CLE9BQW5CLEVBQWlFO0FBQTlDO0FBQUE7QUFBOEM7QUFsQmpFOzs7OztBQUdnQixnQkFBZSxZQUFZLENBQUMsRUFBNUI7QUFnQmQsU0FBSyxJQUFMLEdBQVksT0FBTyxDQUFDLEdBQVIsSUFBZSxXQUEzQjtBQUNBLFNBQUssTUFBTCxHQUFjLE9BQU8sQ0FBQyxLQUFSLElBQWlCLGFBQS9CO0FBQ0Q7QUFFRDs7Ozs7QUFHTyxxQ0FBUDtBQUNFLG1DQUF3QixVQUFDLEtBQUQsRUFBZSxJQUFmLEVBQStCO0FBQ3JELFVBQU0sSUFBSSxHQUFHLHVCQUFnQixjQUFoQixDQUErQixZQUEvQixDQUFiOztBQUNBLFVBQUksSUFBSixFQUFVO0FBQ1IsZUFBTyxJQUFJLENBQUMsUUFBTCxDQUFjLEtBQWQsRUFBcUIsSUFBckIsQ0FBUDtBQUNEOztBQUNELGFBQU8sS0FBUDtBQUNELEtBTkQ7QUFPRCxHQVJNO0FBVVA7Ozs7O0FBR1Esb0NBQVIsVUFBaUIsS0FBakIsRUFBK0IsSUFBL0IsRUFBK0M7QUFDN0MsUUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFQLElBQW9CLENBQUMsS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsTUFBckMsSUFBK0MsQ0FBQyxJQUFoRCxJQUF3RCxDQUFDLHFCQUFhLElBQUksQ0FBQyxpQkFBbEIsRUFBcUMsS0FBckMsQ0FBN0QsRUFBMEc7QUFDeEcsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsUUFBTSxZQUFZLEdBQUcsS0FBSyxjQUFMLENBQW9CLElBQUksQ0FBQyxpQkFBekIsRUFBNkQsS0FBSyxJQUFsRSxDQUFyQjs7QUFDQSxTQUFLLENBQUMsU0FBTixDQUFnQixNQUFoQixHQUFzQixpQkFBTyxZQUFQLEVBQXdCLEtBQUssQ0FBQyxTQUFOLENBQWdCLE1BQXhDLENBQXRCO0FBQ0EsV0FBTyxLQUFQO0FBQ0QsR0FQTztBQVNSOzs7OztBQUdRLDBDQUFSLFVBQXVCLEtBQXZCLEVBQTZDLEdBQTdDLEVBQTBELEtBQTFELEVBQWlGO0FBQXZCO0FBQUE7QUFBdUI7O0FBQy9FLFFBQUksQ0FBQyxxQkFBYSxLQUFLLENBQUMsR0FBRCxDQUFsQixFQUF5QixLQUF6QixDQUFELElBQW9DLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBZixJQUFvQixLQUFLLE1BQWpFLEVBQXlFO0FBQ3ZFLGFBQU8sS0FBUDtBQUNEOztBQUNELFFBQU0sVUFBVSxHQUFHLDZCQUFrQixLQUFLLENBQUMsR0FBRCxDQUF2QixDQUFuQjtBQUNBLFFBQU0sU0FBUyxHQUFHLGtDQUF3QixVQUF4QixDQUFsQjtBQUNBLFdBQU8sS0FBSyxjQUFMLENBQW9CLEtBQUssQ0FBQyxHQUFELENBQXpCLEVBQWdDLEdBQWhDLEVBQW1DLGtCQUFHLFNBQUgsR0FBaUIsS0FBakIsQ0FBbkMsQ0FBUDtBQUNELEdBUE87QUF4RFI7Ozs7O0FBR2Msb0JBQWEsY0FBYjtBQTZEaEI7QUFBQyxDQWpFRDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgRXZlbnQsIEV2ZW50SGludCwgRXhjZXB0aW9uLCBFeHRlbmRlZEVycm9yLCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlIH0gZnJvbSAnLi4vcGFyc2Vycyc7XG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSB9IGZyb20gJy4uL3RyYWNla2l0JztcblxuY29uc3QgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xuY29uc3QgREVGQVVMVF9MSU1JVCA9IDU7XG5cbi8qKiBBZGRzIFNESyBpbmZvIHRvIGFuIGV2ZW50LiAqL1xuZXhwb3J0IGNsYXNzIExpbmtlZEVycm9ycyBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnTGlua2VkRXJyb3JzJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSBMaW5rZWRFcnJvcnMuaWQ7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9rZXk6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2xpbWl0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogeyBrZXk/OiBzdHJpbmc7IGxpbWl0PzogbnVtYmVyIH0gPSB7fSkge1xuICAgIHRoaXMuX2tleSA9IG9wdGlvbnMua2V5IHx8IERFRkFVTFRfS0VZO1xuICAgIHRoaXMuX2xpbWl0ID0gb3B0aW9ucy5saW1pdCB8fCBERUZBVUxUX0xJTUlUO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKCk6IHZvaWQge1xuICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKChldmVudDogRXZlbnQsIGhpbnQ/OiBFdmVudEhpbnQpID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oTGlua2VkRXJyb3JzKTtcbiAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9oYW5kbGVyKGV2ZW50LCBoaW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHJpdmF0ZSBfaGFuZGxlcihldmVudDogRXZlbnQsIGhpbnQ/OiBFdmVudEhpbnQpOiBFdmVudCB8IG51bGwge1xuICAgIGlmICghZXZlbnQuZXhjZXB0aW9uIHx8ICFldmVudC5leGNlcHRpb24udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGxpbmtlZEVycm9ycyA9IHRoaXMuX3dhbGtFcnJvclRyZWUoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiBhcyBFeHRlbmRlZEVycm9yLCB0aGlzLl9rZXkpO1xuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBbLi4ubGlua2VkRXJyb3JzLCAuLi5ldmVudC5leGNlcHRpb24udmFsdWVzXTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHByaXZhdGUgX3dhbGtFcnJvclRyZWUoZXJyb3I6IEV4dGVuZGVkRXJyb3IsIGtleTogc3RyaW5nLCBzdGFjazogRXhjZXB0aW9uW10gPSBbXSk6IEV4Y2VwdGlvbltdIHtcbiAgICBpZiAoIWlzSW5zdGFuY2VPZihlcnJvcltrZXldLCBFcnJvcikgfHwgc3RhY2subGVuZ3RoICsgMSA+PSB0aGlzLl9saW1pdCkge1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH1cbiAgICBjb25zdCBzdGFja3RyYWNlID0gY29tcHV0ZVN0YWNrVHJhY2UoZXJyb3Jba2V5XSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSk7XG4gICAgcmV0dXJuIHRoaXMuX3dhbGtFcnJvclRyZWUoZXJyb3Jba2V5XSwga2V5LCBbZXhjZXB0aW9uLCAuLi5zdGFja10pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/linkederrors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/trycatch.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/trycatch.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.fill */ \"./node_modules/core-js/modules/es.array.fill.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar helpers_1 = __webpack_require__(/*! ../helpers */ \"./node_modules/@sentry/browser/dist/helpers.js\");\n\nvar DEFAULT_EVENT_TARGET = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\n\nvar TryCatch =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function TryCatch(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = TryCatch.id;\n    this._options = tslib_1.__assign({\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true\n    }, options);\n  }\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n\n\n  TryCatch.prototype.setupOnce = function () {\n    var global = utils_1.getGlobalObject();\n\n    if (this._options.setTimeout) {\n      utils_1.fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      utils_1.fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      utils_1.fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      utils_1.fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      var eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  };\n  /** JSDoc */\n\n\n  TryCatch.prototype._wrapTimeFunction = function (original) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var originalCallback = args[0];\n      args[0] = helpers_1.wrap(originalCallback, {\n        mechanism: {\n          data: {\n            function: utils_1.getFunctionName(original)\n          },\n          handled: true,\n          type: 'instrument'\n        }\n      });\n      return original.apply(this, args);\n    };\n  };\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  TryCatch.prototype._wrapRAF = function (original) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (callback) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(this, helpers_1.wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: utils_1.getFunctionName(original)\n          },\n          handled: true,\n          type: 'instrument'\n        }\n      }));\n    };\n  };\n  /** JSDoc */\n\n\n  TryCatch.prototype._wrapEventTarget = function (target) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var global = utils_1.getGlobalObject(); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    var proto = global[target] && global[target].prototype; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    utils_1.fill(proto, 'addEventListener', function (original) {\n      return function (eventName, fn, options) {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = helpers_1.wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: utils_1.getFunctionName(fn),\n                  target: target\n                },\n                handled: true,\n                type: 'instrument'\n              }\n            });\n          }\n        } catch (err) {// can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(this, eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        helpers_1.wrap(fn, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: utils_1.getFunctionName(fn),\n              target: target\n            },\n            handled: true,\n            type: 'instrument'\n          }\n        }), options);\n      };\n    });\n    utils_1.fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (eventName, fn, options) {\n        var _a;\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n\n\n        var wrappedEventHandler = fn;\n\n        try {\n          var originalEventHandler = (_a = wrappedEventHandler) === null || _a === void 0 ? void 0 : _a.__sentry_wrapped__;\n\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    });\n  };\n  /** JSDoc */\n\n\n  TryCatch.prototype._wrapXHR = function (originalSend) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      } // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n      var xhr = this;\n      var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n      xmlHttpRequestProps.forEach(function (prop) {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          utils_1.fill(xhr, prop, function (original) {\n            var wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: utils_1.getFunctionName(original)\n                },\n                handled: true,\n                type: 'instrument'\n              }\n            }; // If Instrument integration has been called before TryCatch, get the name of original function\n\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = utils_1.getFunctionName(original.__sentry_original__);\n            } // Otherwise wrap directly\n\n\n            return helpers_1.wrap(original, wrapOptions);\n          });\n        }\n      });\n      return originalSend.apply(this, args);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TryCatch.id = 'TryCatch';\n  return TryCatch;\n}();\n\nexports.TryCatch = TryCatch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/trycatch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/integrations/useragent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/integrations/useragent.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar global = utils_1.getGlobalObject();\n/** UserAgent */\n\nvar UserAgent =\n/** @class */\nfunction () {\n  function UserAgent() {\n    /**\n     * @inheritDoc\n     */\n    this.name = UserAgent.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  UserAgent.prototype.setupOnce = function () {\n    core_1.addGlobalEventProcessor(function (event) {\n      var _a, _b, _c;\n\n      if (core_1.getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        } // grab as much info as exists and add it to the event\n\n\n        var url = ((_a = event.request) === null || _a === void 0 ? void 0 : _a.url) || ((_b = global.location) === null || _b === void 0 ? void 0 : _b.href);\n        var referrer = (global.document || {}).referrer;\n        var userAgent = (global.navigator || {}).userAgent;\n\n        var headers = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, (_c = event.request) === null || _c === void 0 ? void 0 : _c.headers), referrer && {\n          Referer: referrer\n        }), userAgent && {\n          'User-Agent': userAgent\n        });\n\n        var request = tslib_1.__assign(tslib_1.__assign({}, url && {\n          url: url\n        }), {\n          headers: headers\n        });\n\n        return tslib_1.__assign(tslib_1.__assign({}, event), {\n          request: request\n        });\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  UserAgent.id = 'UserAgent';\n  return UserAgent;\n}();\n\nexports.UserAgent = UserAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL3VzZXJhZ2VudC50cz8yN2NmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUEsSUFBTSxNQUFNLEdBQUcseUJBQWY7QUFFQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQU1FOzs7QUFHTyxnQkFBZSxTQUFTLENBQUMsRUFBekI7QUE4QlI7QUE1QkM7Ozs7O0FBR08sa0NBQVA7QUFDRSxtQ0FBd0IsVUFBQyxLQUFELEVBQWE7OztBQUNuQyxVQUFJLHVCQUFnQixjQUFoQixDQUErQixTQUEvQixDQUFKLEVBQStDO0FBQzdDO0FBQ0EsWUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFSLElBQXFCLENBQUMsTUFBTSxDQUFDLFFBQTdCLElBQXlDLENBQUMsTUFBTSxDQUFDLFFBQXJELEVBQStEO0FBQzdELGlCQUFPLEtBQVA7QUFDRCxTQUo0QyxDQU03Qzs7O0FBQ0EsWUFBTSxHQUFHLEdBQUcsWUFBSyxDQUFDLE9BQU4sTUFBYSxJQUFiLElBQWEsYUFBYixHQUFhLE1BQWIsR0FBYSxHQUFFLEdBQWYsTUFBa0IsTUFBSSxNQUFNLENBQUMsUUFBWCxNQUFtQixJQUFuQixJQUFtQixhQUFuQixHQUFtQixNQUFuQixHQUFtQixHQUFFLElBQXZDLENBQVo7QUFDUTtBQUNBOztBQUVSLFlBQU0sT0FBTyxnRUFDUixLQUFLLENBQUMsT0FERSxNQUNLLElBREwsSUFDSyxhQURMLEdBQ0ssTUFETCxHQUNLLEdBQUUsT0FEUCxHQUVQLFFBQVEsSUFBSTtBQUFFLGlCQUFPLEVBQUU7QUFBWCxTQUZMLEdBR1AsU0FBUyxJQUFJO0FBQUUsd0JBQWM7QUFBaEIsU0FITixDQUFiOztBQUtBLFlBQU0sT0FBTyx5Q0FBUyxHQUFHLElBQUk7QUFBRSxhQUFHO0FBQUwsU0FBaEIsR0FBd0I7QUFBRSxpQkFBTztBQUFULFNBQXhCLENBQWI7O0FBRUEscURBQVksS0FBWixHQUFpQjtBQUFFLGlCQUFPO0FBQVQsU0FBakI7QUFDRDs7QUFDRCxhQUFPLEtBQVA7QUFDRCxLQXRCRDtBQXVCRCxHQXhCTTtBQWJQOzs7OztBQUdjLGlCQUFhLFdBQWI7QUFtQ2hCO0FBQUMsQ0F2Q0Q7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Rpc3QvaW50ZWdyYXRpb25zL3VzZXJhZ2VudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IEV2ZW50LCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmNvbnN0IGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdDxXaW5kb3c+KCk7XG5cbi8qKiBVc2VyQWdlbnQgKi9cbmV4cG9ydCBjbGFzcyBVc2VyQWdlbnQgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ1VzZXJBZ2VudCc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gVXNlckFnZW50LmlkO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZSgpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcigoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKFVzZXJBZ2VudCkpIHtcbiAgICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgaW5mb3JtYXRpb24gd2Ugd2FudCBleGlzdHMsIGRvbid0IGJvdGhlclxuICAgICAgICBpZiAoIWdsb2JhbC5uYXZpZ2F0b3IgJiYgIWdsb2JhbC5sb2NhdGlvbiAmJiAhZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ3JhYiBhcyBtdWNoIGluZm8gYXMgZXhpc3RzIGFuZCBhZGQgaXQgdG8gdGhlIGV2ZW50XG4gICAgICAgIGNvbnN0IHVybCA9IGV2ZW50LnJlcXVlc3Q/LnVybCB8fCBnbG9iYWwubG9jYXRpb24/LmhyZWY7XG4gICAgICAgIGNvbnN0IHsgcmVmZXJyZXIgfSA9IGdsb2JhbC5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IGdsb2JhbC5uYXZpZ2F0b3IgfHwge307XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAuLi5ldmVudC5yZXF1ZXN0Py5oZWFkZXJzLFxuICAgICAgICAgIC4uLihyZWZlcnJlciAmJiB7IFJlZmVyZXI6IHJlZmVycmVyIH0pLFxuICAgICAgICAgIC4uLih1c2VyQWdlbnQgJiYgeyAnVXNlci1BZ2VudCc6IHVzZXJBZ2VudCB9KSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHsgLi4uKHVybCAmJiB7IHVybCB9KSwgaGVhZGVycyB9O1xuXG4gICAgICAgIHJldHVybiB7IC4uLmV2ZW50LCByZXF1ZXN0IH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/integrations/useragent.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/parsers.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/parsers.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar tracekit_1 = __webpack_require__(/*! ./tracekit */ \"./node_modules/@sentry/browser/dist/tracekit.js\");\n\nvar STACKTRACE_LIMIT = 50;\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\n\nfunction exceptionFromStacktrace(stacktrace) {\n  var frames = prepareFramesForEvent(stacktrace.stack);\n  var exception = {\n    type: stacktrace.name,\n    value: stacktrace.message\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = {\n      frames: frames\n    };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\nexports.exceptionFromStacktrace = exceptionFromStacktrace;\n/**\n * @hidden\n */\n\nfunction eventFromPlainObject(exception, syntheticException, rejection) {\n  var event = {\n    exception: {\n      values: [{\n        type: utils_1.isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n        value: \"Non-Error \" + (rejection ? 'promise rejection' : 'exception') + \" captured with keys: \" + utils_1.extractExceptionKeysForMessage(exception)\n      }]\n    },\n    extra: {\n      __serialized__: utils_1.normalizeToSize(exception)\n    }\n  };\n\n  if (syntheticException) {\n    var stacktrace = tracekit_1.computeStackTrace(syntheticException);\n    var frames_1 = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames: frames_1\n    };\n  }\n\n  return event;\n}\n\nexports.eventFromPlainObject = eventFromPlainObject;\n/**\n * @hidden\n */\n\nfunction eventFromStacktrace(stacktrace) {\n  var exception = exceptionFromStacktrace(stacktrace);\n  return {\n    exception: {\n      values: [exception]\n    }\n  };\n}\n\nexports.eventFromStacktrace = eventFromStacktrace;\n/**\n * @hidden\n */\n\nfunction prepareFramesForEvent(stack) {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  var localStack = stack;\n  var firstFrameFunction = localStack[0].func || '';\n  var lastFrameFunction = localStack[localStack.length - 1].func || ''; // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  } // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n\n\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  } // The frame where the crash happened, should be the last entry in the array\n\n\n  return localStack.slice(0, STACKTRACE_LIMIT).map(function (frame) {\n    return {\n      colno: frame.column === null ? undefined : frame.column,\n      filename: frame.url || localStack[0].url,\n      function: frame.func || '?',\n      in_app: true,\n      lineno: frame.line === null ? undefined : frame.line\n    };\n  }).reverse();\n}\n\nexports.prepareFramesForEvent = prepareFramesForEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcGFyc2Vycy50cz85MGYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBOztBQUVBOztBQUVBLElBQU0sZ0JBQWdCLEdBQUcsRUFBekI7QUFFQTs7Ozs7O0FBS0EsU0FBZ0IsdUJBQWhCLENBQXdDLFVBQXhDLEVBQXNFO0FBQ3BFLE1BQU0sTUFBTSxHQUFHLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxLQUFaLENBQXBDO0FBRUEsTUFBTSxTQUFTLEdBQWM7QUFDM0IsUUFBSSxFQUFFLFVBQVUsQ0FBQyxJQURVO0FBRTNCLFNBQUssRUFBRSxVQUFVLENBQUM7QUFGUyxHQUE3Qjs7QUFLQSxNQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBckIsRUFBNkI7QUFDM0IsYUFBUyxDQUFDLFVBQVYsR0FBdUI7QUFBRSxZQUFNO0FBQVIsS0FBdkI7QUFDRDs7QUFFRCxNQUFJLFNBQVMsQ0FBQyxJQUFWLEtBQW1CLFNBQW5CLElBQWdDLFNBQVMsQ0FBQyxLQUFWLEtBQW9CLEVBQXhELEVBQTREO0FBQzFELGFBQVMsQ0FBQyxLQUFWLEdBQWtCLDRCQUFsQjtBQUNEOztBQUVELFNBQU8sU0FBUDtBQUNEOztBQWpCRDtBQW1CQTs7OztBQUdBLFNBQWdCLG9CQUFoQixDQUNFLFNBREYsRUFFRSxrQkFGRixFQUdFLFNBSEYsRUFHcUI7QUFFbkIsTUFBTSxLQUFLLEdBQVU7QUFDbkIsYUFBUyxFQUFFO0FBQ1QsWUFBTSxFQUFFLENBQ047QUFDRSxZQUFJLEVBQUUsZ0JBQVEsU0FBUixJQUFxQixTQUFTLENBQUMsV0FBVixDQUFzQixJQUEzQyxHQUFrRCxTQUFTLEdBQUcsb0JBQUgsR0FBMEIsT0FEN0Y7QUFFRSxhQUFLLEVBQUUsZ0JBQ0wsU0FBUyxHQUFHLG1CQUFILEdBQXlCLFdBRDdCLElBQ3dDLHVCQUR4QyxHQUVpQix1Q0FBK0IsU0FBL0I7QUFKMUIsT0FETTtBQURDLEtBRFE7QUFXbkIsU0FBSyxFQUFFO0FBQ0wsb0JBQWMsRUFBRSx3QkFBZ0IsU0FBaEI7QUFEWDtBQVhZLEdBQXJCOztBQWdCQSxNQUFJLGtCQUFKLEVBQXdCO0FBQ3RCLFFBQU0sVUFBVSxHQUFHLDZCQUFrQixrQkFBbEIsQ0FBbkI7QUFDQSxRQUFNLFFBQU0sR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsS0FBWixDQUFwQztBQUNBLFNBQUssQ0FBQyxVQUFOLEdBQW1CO0FBQ2pCLFlBQU07QUFEVyxLQUFuQjtBQUdEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQTlCRDtBQWdDQTs7OztBQUdBLFNBQWdCLG1CQUFoQixDQUFvQyxVQUFwQyxFQUFrRTtBQUNoRSxNQUFNLFNBQVMsR0FBRyx1QkFBdUIsQ0FBQyxVQUFELENBQXpDO0FBRUEsU0FBTztBQUNMLGFBQVMsRUFBRTtBQUNULFlBQU0sRUFBRSxDQUFDLFNBQUQ7QUFEQztBQUROLEdBQVA7QUFLRDs7QUFSRDtBQVVBOzs7O0FBR0EsU0FBZ0IscUJBQWhCLENBQXNDLEtBQXRDLEVBQWlFO0FBQy9ELE1BQUksQ0FBQyxLQUFELElBQVUsQ0FBQyxLQUFLLENBQUMsTUFBckIsRUFBNkI7QUFDM0IsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBSSxVQUFVLEdBQUcsS0FBakI7QUFFQSxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBYyxJQUFkLElBQXNCLEVBQWpEO0FBQ0EsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQVgsR0FBb0IsQ0FBckIsQ0FBVixDQUFrQyxJQUFsQyxJQUEwQyxFQUFwRSxDQVIrRCxDQVUvRDs7QUFDQSxNQUFJLGtCQUFrQixDQUFDLE9BQW5CLENBQTJCLGdCQUEzQixNQUFpRCxDQUFDLENBQWxELElBQXVELGtCQUFrQixDQUFDLE9BQW5CLENBQTJCLGtCQUEzQixNQUFtRCxDQUFDLENBQS9HLEVBQWtIO0FBQ2hILGNBQVUsR0FBRyxVQUFVLENBQUMsS0FBWCxDQUFpQixDQUFqQixDQUFiO0FBQ0QsR0FiOEQsQ0FlL0Q7OztBQUNBLE1BQUksaUJBQWlCLENBQUMsT0FBbEIsQ0FBMEIsZUFBMUIsTUFBK0MsQ0FBQyxDQUFwRCxFQUF1RDtBQUNyRCxjQUFVLEdBQUcsVUFBVSxDQUFDLEtBQVgsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBQyxDQUFyQixDQUFiO0FBQ0QsR0FsQjhELENBb0IvRDs7O0FBQ0EsU0FBTyxVQUFVLENBQ2QsS0FESSxDQUNFLENBREYsRUFDSyxnQkFETCxFQUVKLEdBRkksQ0FHSCxVQUFDLEtBQUQsRUFBMEI7QUFBaUIsV0FBQztBQUMxQyxXQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU4sS0FBaUIsSUFBakIsR0FBd0IsU0FBeEIsR0FBb0MsS0FBSyxDQUFDLE1BRFA7QUFFMUMsY0FBUSxFQUFFLEtBQUssQ0FBQyxHQUFOLElBQWEsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjLEdBRks7QUFHMUMsY0FBUSxFQUFFLEtBQUssQ0FBQyxJQUFOLElBQWMsR0FIa0I7QUFJMUMsWUFBTSxFQUFFLElBSmtDO0FBSzFDLFlBQU0sRUFBRSxLQUFLLENBQUMsSUFBTixLQUFlLElBQWYsR0FBc0IsU0FBdEIsR0FBa0MsS0FBSyxDQUFDO0FBTE4sS0FBRDtBQU16QyxHQVRDLEVBV0osT0FYSSxFQUFQO0FBWUQ7O0FBakNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L3BhcnNlcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCwgRXhjZXB0aW9uLCBTdGFja0ZyYW1lIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UsIGlzRXZlbnQsIG5vcm1hbGl6ZVRvU2l6ZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5pbXBvcnQgeyBjb21wdXRlU3RhY2tUcmFjZSwgU3RhY2tGcmFtZSBhcyBUcmFjZUtpdFN0YWNrRnJhbWUsIFN0YWNrVHJhY2UgYXMgVHJhY2VLaXRTdGFja1RyYWNlIH0gZnJvbSAnLi90cmFjZWtpdCc7XG5cbmNvbnN0IFNUQUNLVFJBQ0VfTElNSVQgPSA1MDtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gZXhjZXB0aW9uIGZyb20gYW4gVHJhY2VLaXRTdGFja1RyYWNlXG4gKiBAcGFyYW0gc3RhY2t0cmFjZSBUcmFjZUtpdFN0YWNrVHJhY2UgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhbiBleGNlcHRpb25cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdGlvbkZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2U6IFRyYWNlS2l0U3RhY2tUcmFjZSk6IEV4Y2VwdGlvbiB7XG4gIGNvbnN0IGZyYW1lcyA9IHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFja3RyYWNlLnN0YWNrKTtcblxuICBjb25zdCBleGNlcHRpb246IEV4Y2VwdGlvbiA9IHtcbiAgICB0eXBlOiBzdGFja3RyYWNlLm5hbWUsXG4gICAgdmFsdWU6IHN0YWNrdHJhY2UubWVzc2FnZSxcbiAgfTtcblxuICBpZiAoZnJhbWVzICYmIGZyYW1lcy5sZW5ndGgpIHtcbiAgICBleGNlcHRpb24uc3RhY2t0cmFjZSA9IHsgZnJhbWVzIH07XG4gIH1cblxuICBpZiAoZXhjZXB0aW9uLnR5cGUgPT09IHVuZGVmaW5lZCAmJiBleGNlcHRpb24udmFsdWUgPT09ICcnKSB7XG4gICAgZXhjZXB0aW9uLnZhbHVlID0gJ1VucmVjb3ZlcmFibGUgZXJyb3IgY2F1Z2h0JztcbiAgfVxuXG4gIHJldHVybiBleGNlcHRpb247XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRGcm9tUGxhaW5PYmplY3QoXG4gIGV4Y2VwdGlvbjogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gIHN5bnRoZXRpY0V4Y2VwdGlvbj86IEVycm9yLFxuICByZWplY3Rpb24/OiBib29sZWFuLFxuKTogRXZlbnQge1xuICBjb25zdCBldmVudDogRXZlbnQgPSB7XG4gICAgZXhjZXB0aW9uOiB7XG4gICAgICB2YWx1ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IGlzRXZlbnQoZXhjZXB0aW9uKSA/IGV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5uYW1lIDogcmVqZWN0aW9uID8gJ1VuaGFuZGxlZFJlamVjdGlvbicgOiAnRXJyb3InLFxuICAgICAgICAgIHZhbHVlOiBgTm9uLUVycm9yICR7XG4gICAgICAgICAgICByZWplY3Rpb24gPyAncHJvbWlzZSByZWplY3Rpb24nIDogJ2V4Y2VwdGlvbidcbiAgICAgICAgICB9IGNhcHR1cmVkIHdpdGgga2V5czogJHtleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UoZXhjZXB0aW9uKX1gLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGV4dHJhOiB7XG4gICAgICBfX3NlcmlhbGl6ZWRfXzogbm9ybWFsaXplVG9TaXplKGV4Y2VwdGlvbiksXG4gICAgfSxcbiAgfTtcblxuICBpZiAoc3ludGhldGljRXhjZXB0aW9uKSB7XG4gICAgY29uc3Qgc3RhY2t0cmFjZSA9IGNvbXB1dGVTdGFja1RyYWNlKHN5bnRoZXRpY0V4Y2VwdGlvbik7XG4gICAgY29uc3QgZnJhbWVzID0gcHJlcGFyZUZyYW1lc0ZvckV2ZW50KHN0YWNrdHJhY2Uuc3RhY2spO1xuICAgIGV2ZW50LnN0YWNrdHJhY2UgPSB7XG4gICAgICBmcmFtZXMsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudEZyb21TdGFja3RyYWNlKHN0YWNrdHJhY2U6IFRyYWNlS2l0U3RhY2tUcmFjZSk6IEV2ZW50IHtcbiAgY29uc3QgZXhjZXB0aW9uID0gZXhjZXB0aW9uRnJvbVN0YWNrdHJhY2Uoc3RhY2t0cmFjZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBleGNlcHRpb246IHtcbiAgICAgIHZhbHVlczogW2V4Y2VwdGlvbl0sXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlRnJhbWVzRm9yRXZlbnQoc3RhY2s6IFRyYWNlS2l0U3RhY2tGcmFtZVtdKTogU3RhY2tGcmFtZVtdIHtcbiAgaWYgKCFzdGFjayB8fCAhc3RhY2subGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgbGV0IGxvY2FsU3RhY2sgPSBzdGFjaztcblxuICBjb25zdCBmaXJzdEZyYW1lRnVuY3Rpb24gPSBsb2NhbFN0YWNrWzBdLmZ1bmMgfHwgJyc7XG4gIGNvbnN0IGxhc3RGcmFtZUZ1bmN0aW9uID0gbG9jYWxTdGFja1tsb2NhbFN0YWNrLmxlbmd0aCAtIDFdLmZ1bmMgfHwgJyc7XG5cbiAgLy8gSWYgc3RhY2sgc3RhcnRzIHdpdGggb25lIG9mIG91ciBBUEkgY2FsbHMsIHJlbW92ZSBpdCAoc3RhcnRzLCBtZWFuaW5nIGl0J3MgdGhlIHRvcCBvZiB0aGUgc3RhY2sgLSBha2EgbGFzdCBjYWxsKVxuICBpZiAoZmlyc3RGcmFtZUZ1bmN0aW9uLmluZGV4T2YoJ2NhcHR1cmVNZXNzYWdlJykgIT09IC0xIHx8IGZpcnN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdjYXB0dXJlRXhjZXB0aW9uJykgIT09IC0xKSB7XG4gICAgbG9jYWxTdGFjayA9IGxvY2FsU3RhY2suc2xpY2UoMSk7XG4gIH1cblxuICAvLyBJZiBzdGFjayBlbmRzIHdpdGggb25lIG9mIG91ciBpbnRlcm5hbCBBUEkgY2FsbHMsIHJlbW92ZSBpdCAoZW5kcywgbWVhbmluZyBpdCdzIHRoZSBib3R0b20gb2YgdGhlIHN0YWNrIC0gYWthIHRvcC1tb3N0IGNhbGwpXG4gIGlmIChsYXN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdzZW50cnlXcmFwcGVkJykgIT09IC0xKSB7XG4gICAgbG9jYWxTdGFjayA9IGxvY2FsU3RhY2suc2xpY2UoMCwgLTEpO1xuICB9XG5cbiAgLy8gVGhlIGZyYW1lIHdoZXJlIHRoZSBjcmFzaCBoYXBwZW5lZCwgc2hvdWxkIGJlIHRoZSBsYXN0IGVudHJ5IGluIHRoZSBhcnJheVxuICByZXR1cm4gbG9jYWxTdGFja1xuICAgIC5zbGljZSgwLCBTVEFDS1RSQUNFX0xJTUlUKVxuICAgIC5tYXAoXG4gICAgICAoZnJhbWU6IFRyYWNlS2l0U3RhY2tGcmFtZSk6IFN0YWNrRnJhbWUgPT4gKHtcbiAgICAgICAgY29sbm86IGZyYW1lLmNvbHVtbiA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZyYW1lLmNvbHVtbixcbiAgICAgICAgZmlsZW5hbWU6IGZyYW1lLnVybCB8fCBsb2NhbFN0YWNrWzBdLnVybCxcbiAgICAgICAgZnVuY3Rpb246IGZyYW1lLmZ1bmMgfHwgJz8nLFxuICAgICAgICBpbl9hcHA6IHRydWUsXG4gICAgICAgIGxpbmVubzogZnJhbWUubGluZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZyYW1lLmxpbmUsXG4gICAgICB9KSxcbiAgICApXG4gICAgLnJldmVyc2UoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/parsers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/sdk.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/sdk.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/@sentry/browser/dist/client.js\");\n\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@sentry/browser/dist/helpers.js\");\n\nvar integrations_1 = __webpack_require__(/*! ./integrations */ \"./node_modules/@sentry/browser/dist/integrations/index.js\");\n\nexports.defaultIntegrations = [new core_1.Integrations.InboundFilters(), new core_1.Integrations.FunctionToString(), new integrations_1.TryCatch(), new integrations_1.Breadcrumbs(), new integrations_1.GlobalHandlers(), new integrations_1.LinkedErrors(), new integrations_1.UserAgent()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\n\nfunction init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = exports.defaultIntegrations;\n  }\n\n  if (options.release === undefined) {\n    var window_1 = utils_1.getGlobalObject(); // This supports the variable that sentry-webpack-plugin injects\n\n    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n      options.release = window_1.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = false;\n  }\n\n  core_1.initAndBind(client_1.BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\nexports.init = init;\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\n\nfunction showReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.eventId) {\n    options.eventId = core_1.getCurrentHub().lastEventId();\n  }\n\n  var client = core_1.getCurrentHub().getClient();\n\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\nexports.showReportDialog = showReportDialog;\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\nfunction lastEventId() {\n  return core_1.getCurrentHub().lastEventId();\n}\n\nexports.lastEventId = lastEventId;\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nfunction forceLoad() {// Noop\n}\n\nexports.forceLoad = forceLoad;\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nfunction onLoad(callback) {\n  callback();\n}\n\nexports.onLoad = onLoad;\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nfunction flush(timeout) {\n  var client = core_1.getCurrentHub().getClient();\n\n  if (client) {\n    return client.flush(timeout);\n  }\n\n  return utils_1.SyncPromise.reject(false);\n}\n\nexports.flush = flush;\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nfunction close(timeout) {\n  var client = core_1.getCurrentHub().getClient();\n\n  if (client) {\n    return client.close(timeout);\n  }\n\n  return utils_1.SyncPromise.reject(false);\n}\n\nexports.close = close;\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction wrap(fn) {\n  return helpers_1.wrap(fn)();\n}\n\nexports.wrap = wrap;\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\n\nfunction startSessionTracking() {\n  var window = utils_1.getGlobalObject();\n  var hub = core_1.getCurrentHub();\n  /**\n   * We should be using `Promise.all([windowLoaded, firstContentfulPaint])` here,\n   * but, as always, it's not available in the IE10-11. Thanks IE.\n   */\n\n  var loadResolved = document.readyState === 'complete';\n  var fcpResolved = false;\n\n  var possiblyEndSession = function possiblyEndSession() {\n    if (fcpResolved && loadResolved) {\n      hub.endSession();\n    }\n  };\n\n  var resolveWindowLoaded = function resolveWindowLoaded() {\n    loadResolved = true;\n    possiblyEndSession();\n    window.removeEventListener('load', resolveWindowLoaded);\n  };\n\n  hub.startSession();\n\n  if (!loadResolved) {\n    // IE doesn't support `{ once: true }` for event listeners, so we have to manually\n    // attach and then detach it once completed.\n    window.addEventListener('load', resolveWindowLoaded);\n  }\n\n  try {\n    var po = new PerformanceObserver(function (entryList, po) {\n      entryList.getEntries().forEach(function (entry) {\n        if (entry.name === 'first-contentful-paint' && entry.startTime < firstHiddenTime_1) {\n          po.disconnect();\n          fcpResolved = true;\n          possiblyEndSession();\n        }\n      });\n    }); // There's no need to even attach this listener if `PerformanceObserver` constructor will fail,\n    // so we do it below here.\n\n    var firstHiddenTime_1 = document.visibilityState === 'hidden' ? 0 : Infinity;\n    document.addEventListener('visibilitychange', function (event) {\n      firstHiddenTime_1 = Math.min(firstHiddenTime_1, event.timeStamp);\n    }, {\n      once: true\n    });\n    po.observe({\n      type: 'paint',\n      buffered: true\n    });\n  } catch (e) {\n    fcpResolved = true;\n    possiblyEndSession();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/sdk.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/tracekit.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/tracekit.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\"); // global reference to slice\n\n\nvar UNKNOWN_FUNCTION = '?'; // Chromium based browsers: Chrome, Brave, new Opera, new Edge\n\nvar chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i; // gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\n\nvar gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nvar chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/; // Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\n\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\nfunction computeStackTrace(ex) {\n  var stack = null;\n  var popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {// no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {// no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true\n  };\n}\n\nexports.computeStackTrace = computeStackTrace;\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\n\nfunction computeStackTraceFromStackProp(ex) {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  var stack = [];\n  var lines = ex.stack.split('\\n');\n  var isEval;\n  var submatch;\n  var parts;\n  var element;\n\n  for (var i = 0; i < lines.length; ++i) {\n    if (parts = chrome.exec(lines[i])) {\n      var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n\n        parts[3] = submatch[2]; // line\n\n        parts[4] = submatch[3]; // column\n      }\n\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null\n      };\n    } else if (parts = winjs.exec(lines[i])) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null\n      };\n    } else if (parts = gecko.exec(lines[i])) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || \"eval\";\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = ex.columnNumber + 1;\n      }\n\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack: stack\n  };\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction computeStackTraceFromStacktraceProp(ex) {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  } // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n\n\n  var stacktrace = ex.stacktrace;\n  var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  var opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  var lines = stacktrace.split('\\n');\n  var stack = [];\n  var parts;\n\n  for (var line = 0; line < lines.length; line += 2) {\n    var element = null;\n\n    if (parts = opera10Regex.exec(lines[line])) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null\n      };\n    } else if (parts = opera11Regex.exec(lines[line])) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2]\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack: stack\n  };\n}\n/** Remove N number of frames from the stack */\n\n\nfunction popFrames(stacktrace, popSize) {\n  try {\n    return tslib_1.__assign(tslib_1.__assign({}, stacktrace), {\n      stack: stacktrace.stack.slice(popSize)\n    });\n  } catch (e) {\n    return stacktrace;\n  }\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction extractMessage(ex) {\n  var message = ex && ex.message;\n\n  if (!message) {\n    return 'No error message';\n  }\n\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n\n  return message;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/tracekit.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/transports/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/transports/base.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.parse-int */ \"./node_modules/core-js/modules/es.parse-int.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.trim */ \"./node_modules/core-js/modules/es.string.trim.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** Base Transport class implementation */\n\n\nvar BaseTransport =\n/** @class */\nfunction () {\n  function BaseTransport(options) {\n    this.options = options;\n    /** A simple buffer holding all requests. */\n\n    this._buffer = new utils_1.PromiseBuffer(30);\n    /** Locks transport after receiving rate limits in a response */\n\n    this._rateLimits = {};\n    this._api = new core_1.API(this.options.dsn); // eslint-disable-next-line deprecation/deprecation\n\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.sendEvent = function (_) {\n    throw new utils_1.SentryError('Transport Class has to implement `sendEvent` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.close = function (timeout) {\n    return this._buffer.drain(timeout);\n  };\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n\n\n  BaseTransport.prototype._handleResponse = function (_a) {\n    var requestType = _a.requestType,\n        response = _a.response,\n        headers = _a.headers,\n        resolve = _a.resolve,\n        reject = _a.reject;\n    var status = types_1.Status.fromHttpCode(response.status);\n    /**\n     * \"The name is case-insensitive.\"\n     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n     */\n\n    var limited = this._handleRateLimit(headers);\n\n    if (limited) utils_1.logger.warn(\"Too many requests, backing off till: \" + this._disabledUntil(requestType));\n\n    if (status === types_1.Status.Success) {\n      resolve({\n        status: status\n      });\n      return;\n    }\n\n    reject(response);\n  };\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n\n\n  BaseTransport.prototype._disabledUntil = function (category) {\n    return this._rateLimits[category] || this._rateLimits.all;\n  };\n  /**\n   * Checks if a category is rate limited\n   */\n\n\n  BaseTransport.prototype._isRateLimited = function (category) {\n    return this._disabledUntil(category) > new Date(Date.now());\n  };\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n\n\n  BaseTransport.prototype._handleRateLimit = function (headers) {\n    var e_1, _a, e_2, _b;\n\n    var now = Date.now();\n    var rlHeader = headers['x-sentry-rate-limits'];\n    var raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      try {\n        for (var _c = tslib_1.__values(rlHeader.trim().split(',')), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var limit = _d.value;\n          var parameters = limit.split(':', 2);\n          var headerDelay = parseInt(parameters[0], 10);\n          var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n\n          try {\n            for (var _e = (e_2 = void 0, tslib_1.__values(parameters[1].split(';'))), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var category = _f.value;\n              this._rateLimits[category || 'all'] = new Date(now + delay);\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + utils_1.parseRetryAfterHeader(now, raHeader));\n      return true;\n    }\n\n    return false;\n  };\n\n  return BaseTransport;\n}();\n\nexports.BaseTransport = BaseTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdHJhbnNwb3J0cy9iYXNlLnRzP2Y3YTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBUUE7QUFFQTs7O0FBQ0E7QUFBQTtBQUFBO0FBZUUseUJBQTBCLE9BQTFCLEVBQW1EO0FBQXpCO0FBTjFCOztBQUNtQixtQkFBeUMsSUFBSSxxQkFBSixDQUFrQixFQUFsQixDQUF6QztBQUVuQjs7QUFDbUIsdUJBQW9DLEVBQXBDO0FBR2pCLFNBQUssSUFBTCxHQUFZLElBQUksVUFBSixDQUFRLEtBQUssT0FBTCxDQUFhLEdBQXJCLENBQVosQ0FEaUQsQ0FFakQ7O0FBQ0EsU0FBSyxHQUFMLEdBQVcsS0FBSyxJQUFMLENBQVUsa0NBQVYsRUFBWDtBQUNEO0FBRUQ7Ozs7O0FBR08sc0NBQVAsVUFBaUIsQ0FBakIsRUFBeUI7QUFDdkIsVUFBTSxJQUFJLG1CQUFKLENBQWdCLHFEQUFoQixDQUFOO0FBQ0QsR0FGTTtBQUlQOzs7OztBQUdPLGtDQUFQLFVBQWEsT0FBYixFQUE2QjtBQUMzQixXQUFPLEtBQUssT0FBTCxDQUFhLEtBQWIsQ0FBbUIsT0FBbkIsQ0FBUDtBQUNELEdBRk07QUFJUDs7Ozs7QUFHVSw0Q0FBVixVQUEwQixFQUExQixFQVlDO1FBWEMsNEI7UUFDQSxzQjtRQUNBLG9CO1FBQ0Esb0I7UUFDQSxrQjtBQVFBLFFBQU0sTUFBTSxHQUFHLGVBQU8sWUFBUCxDQUFvQixRQUFRLENBQUMsTUFBN0IsQ0FBZjtBQUNBOzs7OztBQUlBLFFBQU0sT0FBTyxHQUFHLEtBQUssZ0JBQUwsQ0FBc0IsT0FBdEIsQ0FBaEI7O0FBQ0EsUUFBSSxPQUFKLEVBQWEsZUFBTyxJQUFQLENBQVksMENBQXdDLEtBQUssY0FBTCxDQUFvQixXQUFwQixDQUFwRDs7QUFFYixRQUFJLE1BQU0sS0FBSyxlQUFPLE9BQXRCLEVBQStCO0FBQzdCLGFBQU8sQ0FBQztBQUFFLGNBQU07QUFBUixPQUFELENBQVA7QUFDQTtBQUNEOztBQUVELFVBQU0sQ0FBQyxRQUFELENBQU47QUFDRCxHQTNCUztBQTZCVjs7Ozs7QUFHVSwyQ0FBVixVQUF5QixRQUF6QixFQUF5QztBQUN2QyxXQUFPLEtBQUssV0FBTCxDQUFpQixRQUFqQixLQUE4QixLQUFLLFdBQUwsQ0FBaUIsR0FBdEQ7QUFDRCxHQUZTO0FBSVY7Ozs7O0FBR1UsMkNBQVYsVUFBeUIsUUFBekIsRUFBeUM7QUFDdkMsV0FBTyxLQUFLLGNBQUwsQ0FBb0IsUUFBcEIsSUFBZ0MsSUFBSSxJQUFKLENBQVMsSUFBSSxDQUFDLEdBQUwsRUFBVCxDQUF2QztBQUNELEdBRlM7QUFJVjs7Ozs7QUFHVSw2Q0FBVixVQUEyQixPQUEzQixFQUFpRTs7O0FBQy9ELFFBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFMLEVBQVo7QUFDQSxRQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsc0JBQUQsQ0FBeEI7QUFDQSxRQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBRCxDQUF4Qjs7QUFFQSxRQUFJLFFBQUosRUFBYzs7QUFDWixhQUFvQixrQ0FBUSxDQUFDLElBQVQsR0FBZ0IsS0FBaEIsQ0FBc0IsR0FBdEIsSUFBMEIsY0FBOUMsRUFBOEMsUUFBOUMsRUFBOEMsY0FBOUMsRUFBZ0Q7QUFBM0MsY0FBTSxLQUFLLFdBQVg7QUFDSCxjQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FBbkI7QUFDQSxjQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUQsQ0FBWCxFQUFnQixFQUFoQixDQUE1QjtBQUNBLGNBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBRCxDQUFOLEdBQXNCLFdBQXRCLEdBQW9DLEVBQXJDLElBQTJDLElBQXpELENBSDhDLENBR2lCOzs7QUFDL0QsaUJBQXVCLG1EQUFVLENBQUMsQ0FBRCxDQUFWLENBQWMsS0FBZCxDQUFvQixHQUFwQixLQUF3QixjQUEvQyxFQUErQyxRQUEvQyxFQUErQyxjQUEvQyxFQUFpRDtBQUE1QyxrQkFBTSxRQUFRLFdBQWQ7QUFDSCxtQkFBSyxXQUFMLENBQWlCLFFBQVEsSUFBSSxLQUE3QixJQUFzQyxJQUFJLElBQUosQ0FBUyxHQUFHLEdBQUcsS0FBZixDQUF0QztBQUNEOzs7Ozs7Ozs7Ozs7QUFDRjs7Ozs7Ozs7Ozs7OztBQUNELGFBQU8sSUFBUDtBQUNELEtBVkQsTUFVTyxJQUFJLFFBQUosRUFBYztBQUNuQixXQUFLLFdBQUwsQ0FBaUIsR0FBakIsR0FBdUIsSUFBSSxJQUFKLENBQVMsR0FBRyxHQUFHLDhCQUFzQixHQUF0QixFQUEyQixRQUEzQixDQUFmLENBQXZCO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FwQlM7O0FBcUJaO0FBQUMsQ0F6R0Q7O0FBQXNCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvYnJvd3Nlci9kaXN0L3RyYW5zcG9ydHMvYmFzZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQge1xuICBFdmVudCxcbiAgUmVzcG9uc2UgYXMgU2VudHJ5UmVzcG9uc2UsXG4gIFNlbnRyeVJlcXVlc3RUeXBlLFxuICBTdGF0dXMsXG4gIFRyYW5zcG9ydCxcbiAgVHJhbnNwb3J0T3B0aW9ucyxcbn0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIsIHBhcnNlUmV0cnlBZnRlckhlYWRlciwgUHJvbWlzZUJ1ZmZlciwgU2VudHJ5RXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIEJhc2UgVHJhbnNwb3J0IGNsYXNzIGltcGxlbWVudGF0aW9uICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVRyYW5zcG9ydCBpbXBsZW1lbnRzIFRyYW5zcG9ydCB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcHVibGljIHVybDogc3RyaW5nO1xuXG4gIC8qKiBIZWxwZXIgdG8gZ2V0IFNlbnRyeSBBUEkgZW5kcG9pbnRzLiAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2FwaTogQVBJO1xuXG4gIC8qKiBBIHNpbXBsZSBidWZmZXIgaG9sZGluZyBhbGwgcmVxdWVzdHMuICovXG4gIHByb3RlY3RlZCByZWFkb25seSBfYnVmZmVyOiBQcm9taXNlQnVmZmVyPFNlbnRyeVJlc3BvbnNlPiA9IG5ldyBQcm9taXNlQnVmZmVyKDMwKTtcblxuICAvKiogTG9ja3MgdHJhbnNwb3J0IGFmdGVyIHJlY2VpdmluZyByYXRlIGxpbWl0cyBpbiBhIHJlc3BvbnNlICovXG4gIHByb3RlY3RlZCByZWFkb25seSBfcmF0ZUxpbWl0czogUmVjb3JkPHN0cmluZywgRGF0ZT4gPSB7fTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIG9wdGlvbnM6IFRyYW5zcG9ydE9wdGlvbnMpIHtcbiAgICB0aGlzLl9hcGkgPSBuZXcgQVBJKHRoaXMub3B0aW9ucy5kc24pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIHRoaXMudXJsID0gdGhpcy5fYXBpLmdldFN0b3JlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNlbmRFdmVudChfOiBFdmVudCk6IFByb21pc2VMaWtlPFNlbnRyeVJlc3BvbnNlPiB7XG4gICAgdGhyb3cgbmV3IFNlbnRyeUVycm9yKCdUcmFuc3BvcnQgQ2xhc3MgaGFzIHRvIGltcGxlbWVudCBgc2VuZEV2ZW50YCBtZXRob2QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNsb3NlKHRpbWVvdXQ/OiBudW1iZXIpOiBQcm9taXNlTGlrZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5kcmFpbih0aW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgU2VudHJ5IHJlcHNvbnNlIGZvciBwcm9taXNlLWJhc2VkIHRyYW5zcG9ydHMuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2hhbmRsZVJlc3BvbnNlKHtcbiAgICByZXF1ZXN0VHlwZSxcbiAgICByZXNwb25zZSxcbiAgICBoZWFkZXJzLFxuICAgIHJlc29sdmUsXG4gICAgcmVqZWN0LFxuICB9OiB7XG4gICAgcmVxdWVzdFR5cGU6IFNlbnRyeVJlcXVlc3RUeXBlO1xuICAgIHJlc3BvbnNlOiBSZXNwb25zZSB8IFhNTEh0dHBSZXF1ZXN0O1xuICAgIGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bGw+O1xuICAgIHJlc29sdmU6ICh2YWx1ZT86IFNlbnRyeVJlc3BvbnNlIHwgUHJvbWlzZUxpa2U8U2VudHJ5UmVzcG9uc2U+IHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICByZWplY3Q6IChyZWFzb24/OiB1bmtub3duKSA9PiB2b2lkO1xuICB9KTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdHVzID0gU3RhdHVzLmZyb21IdHRwQ29kZShyZXNwb25zZS5zdGF0dXMpO1xuICAgIC8qKlxuICAgICAqIFwiVGhlIG5hbWUgaXMgY2FzZS1pbnNlbnNpdGl2ZS5cIlxuICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IZWFkZXJzL2dldFxuICAgICAqL1xuICAgIGNvbnN0IGxpbWl0ZWQgPSB0aGlzLl9oYW5kbGVSYXRlTGltaXQoaGVhZGVycyk7XG4gICAgaWYgKGxpbWl0ZWQpIGxvZ2dlci53YXJuKGBUb28gbWFueSByZXF1ZXN0cywgYmFja2luZyBvZmYgdGlsbDogJHt0aGlzLl9kaXNhYmxlZFVudGlsKHJlcXVlc3RUeXBlKX1gKTtcblxuICAgIGlmIChzdGF0dXMgPT09IFN0YXR1cy5TdWNjZXNzKSB7XG4gICAgICByZXNvbHZlKHsgc3RhdHVzIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlamVjdChyZXNwb25zZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdGltZSB0aGF0IGdpdmVuIGNhdGVnb3J5IGlzIGRpc2FibGVkIHVudGlsIGZvciByYXRlIGxpbWl0aW5nXG4gICAqL1xuICBwcm90ZWN0ZWQgX2Rpc2FibGVkVW50aWwoY2F0ZWdvcnk6IHN0cmluZyk6IERhdGUge1xuICAgIHJldHVybiB0aGlzLl9yYXRlTGltaXRzW2NhdGVnb3J5XSB8fCB0aGlzLl9yYXRlTGltaXRzLmFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBjYXRlZ29yeSBpcyByYXRlIGxpbWl0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBfaXNSYXRlTGltaXRlZChjYXRlZ29yeTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkVW50aWwoY2F0ZWdvcnkpID4gbmV3IERhdGUoRGF0ZS5ub3coKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBpbnRlcm5hbCBfcmF0ZUxpbWl0cyBmcm9tIGluY29taW5nIGhlYWRlcnMuIFJldHVybnMgdHJ1ZSBpZiBoZWFkZXJzIGNvbnRhaW5zIGEgbm9uLWVtcHR5IHJhdGUgbGltaXRpbmcgaGVhZGVyLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9oYW5kbGVSYXRlTGltaXQoaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVsbD4pOiBib29sZWFuIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHJsSGVhZGVyID0gaGVhZGVyc1sneC1zZW50cnktcmF0ZS1saW1pdHMnXTtcbiAgICBjb25zdCByYUhlYWRlciA9IGhlYWRlcnNbJ3JldHJ5LWFmdGVyJ107XG5cbiAgICBpZiAocmxIZWFkZXIpIHtcbiAgICAgIGZvciAoY29uc3QgbGltaXQgb2YgcmxIZWFkZXIudHJpbSgpLnNwbGl0KCcsJykpIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IGxpbWl0LnNwbGl0KCc6JywgMik7XG4gICAgICAgIGNvbnN0IGhlYWRlckRlbGF5ID0gcGFyc2VJbnQocGFyYW1ldGVyc1swXSwgMTApO1xuICAgICAgICBjb25zdCBkZWxheSA9ICghaXNOYU4oaGVhZGVyRGVsYXkpID8gaGVhZGVyRGVsYXkgOiA2MCkgKiAxMDAwOyAvLyA2MHNlYyBkZWZhdWx0XG4gICAgICAgIGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgcGFyYW1ldGVyc1sxXS5zcGxpdCgnOycpKSB7XG4gICAgICAgICAgdGhpcy5fcmF0ZUxpbWl0c1tjYXRlZ29yeSB8fCAnYWxsJ10gPSBuZXcgRGF0ZShub3cgKyBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocmFIZWFkZXIpIHtcbiAgICAgIHRoaXMuX3JhdGVMaW1pdHMuYWxsID0gbmV3IERhdGUobm93ICsgcGFyc2VSZXRyeUFmdGVySGVhZGVyKG5vdywgcmFIZWFkZXIpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/transports/base.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/transports/fetch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/transports/fetch.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.object.assign */ \"./node_modules/core-js/modules/es.object.assign.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise */ \"./node_modules/core-js/modules/es.promise.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar base_1 = __webpack_require__(/*! ./base */ \"./node_modules/@sentry/browser/dist/transports/base.js\");\n\nvar global = utils_1.getGlobalObject();\n/** `fetch` based transport */\n\nvar FetchTransport =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FetchTransport, _super);\n\n  function FetchTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(core_1.eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(core_1.sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n\n\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: utils_1.supportsReferrerPolicy() ? 'origin' : ''\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(new utils_1.SyncPromise(function (resolve, reject) {\n      global.fetch(sentryRequest.url, options).then(function (response) {\n        var headers = {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        };\n\n        _this._handleResponse({\n          requestType: sentryRequest.type,\n          response: response,\n          headers: headers,\n          resolve: resolve,\n          reject: reject\n        });\n      }).catch(reject);\n    }));\n  };\n\n  return FetchTransport;\n}(base_1.BaseTransport);\n\nexports.FetchTransport = FetchTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdHJhbnNwb3J0cy9mZXRjaC50cz83MWJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBLElBQU0sTUFBTSxHQUFHLHlCQUFmO0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBQW9DOztBQUFwQzs7QUE0REM7QUEzREM7Ozs7O0FBR08sdUNBQVAsVUFBaUIsS0FBakIsRUFBNkI7QUFDM0IsV0FBTyxLQUFLLFlBQUwsQ0FBa0IsNEJBQXFCLEtBQXJCLEVBQTRCLEtBQUssSUFBakMsQ0FBbEIsRUFBMEQsS0FBMUQsQ0FBUDtBQUNELEdBRk07QUFJUDs7Ozs7QUFHTyx5Q0FBUCxVQUFtQixPQUFuQixFQUFtQztBQUNqQyxXQUFPLEtBQUssWUFBTCxDQUFrQiw4QkFBdUIsT0FBdkIsRUFBZ0MsS0FBSyxJQUFyQyxDQUFsQixFQUE4RCxPQUE5RCxDQUFQO0FBQ0QsR0FGTTtBQUlQOzs7Ozs7QUFJUSwwQ0FBUixVQUFxQixhQUFyQixFQUFtRCxlQUFuRCxFQUFtRjtBQUFuRjs7QUFDRSxRQUFJLEtBQUssY0FBTCxDQUFvQixhQUFhLENBQUMsSUFBbEMsQ0FBSixFQUE2QztBQUMzQyxhQUFPLE9BQU8sQ0FBQyxNQUFSLENBQWU7QUFDcEIsYUFBSyxFQUFFLGVBRGE7QUFFcEIsWUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUZBO0FBR3BCLGNBQU0sRUFBRSwyQkFBeUIsS0FBSyxjQUFMLENBQW9CLGFBQWEsQ0FBQyxJQUFsQyxDQUF6QixHQUFnRSw0QkFIcEQ7QUFJcEIsY0FBTSxFQUFFO0FBSlksT0FBZixDQUFQO0FBTUQ7O0FBRUQsUUFBTSxPQUFPLEdBQWdCO0FBQzNCLFVBQUksRUFBRSxhQUFhLENBQUMsSUFETztBQUUzQixZQUFNLEVBQUUsTUFGbUI7QUFHM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBYyxFQUFHLG1DQUEyQixRQUEzQixHQUFzQztBQVA1QixLQUE3Qjs7QUFTQSxRQUFJLEtBQUssT0FBTCxDQUFhLGVBQWIsS0FBaUMsU0FBckMsRUFBZ0Q7QUFDOUMsWUFBTSxDQUFDLE1BQVAsQ0FBYyxPQUFkLEVBQXVCLEtBQUssT0FBTCxDQUFhLGVBQXBDO0FBQ0Q7O0FBQ0QsUUFBSSxLQUFLLE9BQUwsQ0FBYSxPQUFiLEtBQXlCLFNBQTdCLEVBQXdDO0FBQ3RDLGFBQU8sQ0FBQyxPQUFSLEdBQWtCLEtBQUssT0FBTCxDQUFhLE9BQS9CO0FBQ0Q7O0FBRUQsV0FBTyxLQUFLLE9BQUwsQ0FBYSxHQUFiLENBQ0wsSUFBSSxtQkFBSixDQUEwQixVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWdCO0FBQ3hDLFlBQU0sQ0FDSCxLQURILENBQ1MsYUFBYSxDQUFDLEdBRHZCLEVBQzRCLE9BRDVCLEVBRUcsSUFGSCxDQUVRLG9CQUFRO0FBQ1osWUFBTSxPQUFPLEdBQUc7QUFDZCxrQ0FBd0IsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsR0FBakIsQ0FBcUIsc0JBQXJCLENBRFY7QUFFZCx5QkFBZSxRQUFRLENBQUMsT0FBVCxDQUFpQixHQUFqQixDQUFxQixhQUFyQjtBQUZELFNBQWhCOztBQUlBLGFBQUksQ0FBQyxlQUFMLENBQXFCO0FBQUUscUJBQVcsRUFBRSxhQUFhLENBQUMsSUFBN0I7QUFBbUMsa0JBQVEsVUFBM0M7QUFBNkMsaUJBQU8sU0FBcEQ7QUFBc0QsaUJBQU8sU0FBN0Q7QUFBK0QsZ0JBQU07QUFBckUsU0FBckI7QUFDRCxPQVJILEVBU0csS0FUSCxDQVNTLE1BVFQ7QUFVRCxLQVhELENBREssQ0FBUDtBQWNELEdBeENPOztBQXlDVjtBQUFDLENBNURELENBQW9DLG9CQUFwQzs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC90cmFuc3BvcnRzL2ZldGNoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXZlbnRUb1NlbnRyeVJlcXVlc3QsIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3QgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgRXZlbnQsIFJlc3BvbnNlLCBTZW50cnlSZXF1ZXN0LCBTZXNzaW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QsIHN1cHBvcnRzUmVmZXJyZXJQb2xpY3ksIFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xuXG5jb25zdCBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3Q8V2luZG93PigpO1xuXG4vKiogYGZldGNoYCBiYXNlZCB0cmFuc3BvcnQgKi9cbmV4cG9ydCBjbGFzcyBGZXRjaFRyYW5zcG9ydCBleHRlbmRzIEJhc2VUcmFuc3BvcnQge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZW5kRXZlbnQoZXZlbnQ6IEV2ZW50KTogUHJvbWlzZUxpa2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QoZXZlbnRUb1NlbnRyeVJlcXVlc3QoZXZlbnQsIHRoaXMuX2FwaSksIGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNlbmRTZXNzaW9uKHNlc3Npb246IFNlc3Npb24pOiBQcm9taXNlTGlrZTxSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChzZXNzaW9uVG9TZW50cnlSZXF1ZXN0KHNlc3Npb24sIHRoaXMuX2FwaSksIHNlc3Npb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzZW50cnlSZXF1ZXN0IFByZXBhcmVkIFNlbnRyeVJlcXVlc3QgdG8gYmUgZGVsaXZlcmVkXG4gICAqIEBwYXJhbSBvcmlnaW5hbFBheWxvYWQgT3JpZ2luYWwgcGF5bG9hZCB1c2VkIHRvIGNyZWF0ZSBTZW50cnlSZXF1ZXN0XG4gICAqL1xuICBwcml2YXRlIF9zZW5kUmVxdWVzdChzZW50cnlSZXF1ZXN0OiBTZW50cnlSZXF1ZXN0LCBvcmlnaW5hbFBheWxvYWQ6IEV2ZW50IHwgU2Vzc2lvbik6IFByb21pc2VMaWtlPFJlc3BvbnNlPiB7XG4gICAgaWYgKHRoaXMuX2lzUmF0ZUxpbWl0ZWQoc2VudHJ5UmVxdWVzdC50eXBlKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgZXZlbnQ6IG9yaWdpbmFsUGF5bG9hZCxcbiAgICAgICAgdHlwZTogc2VudHJ5UmVxdWVzdC50eXBlLFxuICAgICAgICByZWFzb246IGBUcmFuc3BvcnQgbG9ja2VkIHRpbGwgJHt0aGlzLl9kaXNhYmxlZFVudGlsKHNlbnRyeVJlcXVlc3QudHlwZSl9IGR1ZSB0byB0b28gbWFueSByZXF1ZXN0cy5gLFxuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge1xuICAgICAgYm9keTogc2VudHJ5UmVxdWVzdC5ib2R5LFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAvLyBEZXNwaXRlIGFsbCBzdGFycyBpbiB0aGUgc2t5IHNheWluZyB0aGF0IEVkZ2Ugc3VwcG9ydHMgb2xkIGRyYWZ0IHN5bnRheCwgYWthICduZXZlcicsICdhbHdheXMnLCAnb3JpZ2luJyBhbmQgJ2RlZmF1bHRcbiAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9cmVmZXJyZXItcG9saWN5XG4gICAgICAvLyBJdCBkb2Vzbid0LiBBbmQgaXQgdGhyb3cgZXhjZXB0aW9uIGluc3RlYWQgb2YgaWdub3JpbmcgdGhpcyBwYXJhbWV0ZXIuLi5cbiAgICAgIC8vIFJFRjogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1qcy9pc3N1ZXMvMTIzM1xuICAgICAgcmVmZXJyZXJQb2xpY3k6IChzdXBwb3J0c1JlZmVycmVyUG9saWN5KCkgPyAnb3JpZ2luJyA6ICcnKSBhcyBSZWZlcnJlclBvbGljeSxcbiAgICB9O1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZmV0Y2hQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLmZldGNoUGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMgPSB0aGlzLm9wdGlvbnMuaGVhZGVycztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChcbiAgICAgIG5ldyBTeW5jUHJvbWlzZTxSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBnbG9iYWxcbiAgICAgICAgICAuZmV0Y2goc2VudHJ5UmVxdWVzdC51cmwsIG9wdGlvbnMpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1gtU2VudHJ5LVJhdGUtTGltaXRzJyksXG4gICAgICAgICAgICAgICdyZXRyeS1hZnRlcic6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdSZXRyeS1BZnRlcicpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVJlc3BvbnNlKHsgcmVxdWVzdFR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSwgcmVzcG9uc2UsIGhlYWRlcnMsIHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/transports/fetch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/transports/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/transports/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base_1 = __webpack_require__(/*! ./base */ \"./node_modules/@sentry/browser/dist/transports/base.js\");\n\nexports.BaseTransport = base_1.BaseTransport;\n\nvar fetch_1 = __webpack_require__(/*! ./fetch */ \"./node_modules/@sentry/browser/dist/transports/fetch.js\");\n\nexports.FetchTransport = fetch_1.FetchTransport;\n\nvar xhr_1 = __webpack_require__(/*! ./xhr */ \"./node_modules/@sentry/browser/dist/transports/xhr.js\");\n\nexports.XHRTransport = xhr_1.XHRTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdHJhbnNwb3J0cy9pbmRleC50cz85YzNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFBUzs7QUFDVDs7QUFBUzs7QUFDVDs7QUFBUyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC90cmFuc3BvcnRzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQmFzZVRyYW5zcG9ydCB9IGZyb20gJy4vYmFzZSc7XG5leHBvcnQgeyBGZXRjaFRyYW5zcG9ydCB9IGZyb20gJy4vZmV0Y2gnO1xuZXhwb3J0IHsgWEhSVHJhbnNwb3J0IH0gZnJvbSAnLi94aHInO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/transports/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/transports/xhr.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/transports/xhr.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise */ \"./node_modules/core-js/modules/es.promise.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar core_1 = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar base_1 = __webpack_require__(/*! ./base */ \"./node_modules/@sentry/browser/dist/transports/base.js\");\n/** `XHR` based transport */\n\n\nvar XHRTransport =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XHRTransport, _super);\n\n  function XHRTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  XHRTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(core_1.eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  XHRTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(core_1.sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n\n\n  XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    return this._buffer.add(new utils_1.SyncPromise(function (resolve, reject) {\n      var request = new XMLHttpRequest();\n\n      request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n          var headers = {\n            'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n            'retry-after': request.getResponseHeader('Retry-After')\n          };\n\n          _this._handleResponse({\n            requestType: sentryRequest.type,\n            response: request,\n            headers: headers,\n            resolve: resolve,\n            reject: reject\n          });\n        }\n      };\n\n      request.open('POST', sentryRequest.url);\n\n      for (var header in _this.options.headers) {\n        if (_this.options.headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, _this.options.headers[header]);\n        }\n      }\n\n      request.send(sentryRequest.body);\n    }));\n  };\n\n  return XHRTransport;\n}(base_1.BaseTransport);\n\nexports.XHRTransport = XHRTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdHJhbnNwb3J0cy94aHIudHM/YjBiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7QUFFQTs7O0FBQ0E7QUFBQTtBQUFBO0FBQWtDOztBQUFsQzs7QUFxREM7QUFwREM7Ozs7O0FBR08scUNBQVAsVUFBaUIsS0FBakIsRUFBNkI7QUFDM0IsV0FBTyxLQUFLLFlBQUwsQ0FBa0IsNEJBQXFCLEtBQXJCLEVBQTRCLEtBQUssSUFBakMsQ0FBbEIsRUFBMEQsS0FBMUQsQ0FBUDtBQUNELEdBRk07QUFJUDs7Ozs7QUFHTyx1Q0FBUCxVQUFtQixPQUFuQixFQUFtQztBQUNqQyxXQUFPLEtBQUssWUFBTCxDQUFrQiw4QkFBdUIsT0FBdkIsRUFBZ0MsS0FBSyxJQUFyQyxDQUFsQixFQUE4RCxPQUE5RCxDQUFQO0FBQ0QsR0FGTTtBQUlQOzs7Ozs7QUFJUSx3Q0FBUixVQUFxQixhQUFyQixFQUFtRCxlQUFuRCxFQUFtRjtBQUFuRjs7QUFDRSxRQUFJLEtBQUssY0FBTCxDQUFvQixhQUFhLENBQUMsSUFBbEMsQ0FBSixFQUE2QztBQUMzQyxhQUFPLE9BQU8sQ0FBQyxNQUFSLENBQWU7QUFDcEIsYUFBSyxFQUFFLGVBRGE7QUFFcEIsWUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUZBO0FBR3BCLGNBQU0sRUFBRSwyQkFBeUIsS0FBSyxjQUFMLENBQW9CLGFBQWEsQ0FBQyxJQUFsQyxDQUF6QixHQUFnRSw0QkFIcEQ7QUFJcEIsY0FBTSxFQUFFO0FBSlksT0FBZixDQUFQO0FBTUQ7O0FBRUQsV0FBTyxLQUFLLE9BQUwsQ0FBYSxHQUFiLENBQ0wsSUFBSSxtQkFBSixDQUEwQixVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWdCO0FBQ3hDLFVBQU0sT0FBTyxHQUFHLElBQUksY0FBSixFQUFoQjs7QUFFQSxhQUFPLENBQUMsa0JBQVIsR0FBNkI7QUFDM0IsWUFBSSxPQUFPLENBQUMsVUFBUixLQUF1QixDQUEzQixFQUE4QjtBQUM1QixjQUFNLE9BQU8sR0FBRztBQUNkLG9DQUF3QixPQUFPLENBQUMsaUJBQVIsQ0FBMEIsc0JBQTFCLENBRFY7QUFFZCwyQkFBZSxPQUFPLENBQUMsaUJBQVIsQ0FBMEIsYUFBMUI7QUFGRCxXQUFoQjs7QUFJQSxlQUFJLENBQUMsZUFBTCxDQUFxQjtBQUFFLHVCQUFXLEVBQUUsYUFBYSxDQUFDLElBQTdCO0FBQW1DLG9CQUFRLEVBQUUsT0FBN0M7QUFBc0QsbUJBQU8sU0FBN0Q7QUFBK0QsbUJBQU8sU0FBdEU7QUFBd0Usa0JBQU07QUFBOUUsV0FBckI7QUFDRDtBQUNGLE9BUkQ7O0FBVUEsYUFBTyxDQUFDLElBQVIsQ0FBYSxNQUFiLEVBQXFCLGFBQWEsQ0FBQyxHQUFuQzs7QUFDQSxXQUFLLElBQU0sTUFBWCxJQUFxQixLQUFJLENBQUMsT0FBTCxDQUFhLE9BQWxDLEVBQTJDO0FBQ3pDLFlBQUksS0FBSSxDQUFDLE9BQUwsQ0FBYSxPQUFiLENBQXFCLGNBQXJCLENBQW9DLE1BQXBDLENBQUosRUFBaUQ7QUFDL0MsaUJBQU8sQ0FBQyxnQkFBUixDQUF5QixNQUF6QixFQUFpQyxLQUFJLENBQUMsT0FBTCxDQUFhLE9BQWIsQ0FBcUIsTUFBckIsQ0FBakM7QUFDRDtBQUNGOztBQUNELGFBQU8sQ0FBQyxJQUFSLENBQWEsYUFBYSxDQUFDLElBQTNCO0FBQ0QsS0FwQkQsQ0FESyxDQUFQO0FBdUJELEdBakNPOztBQWtDVjtBQUFDLENBckRELENBQWtDLG9CQUFsQzs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC90cmFuc3BvcnRzL3hoci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV2ZW50VG9TZW50cnlSZXF1ZXN0LCBzZXNzaW9uVG9TZW50cnlSZXF1ZXN0IH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IEV2ZW50LCBSZXNwb25zZSwgU2VudHJ5UmVxdWVzdCwgU2Vzc2lvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgQmFzZVRyYW5zcG9ydCB9IGZyb20gJy4vYmFzZSc7XG5cbi8qKiBgWEhSYCBiYXNlZCB0cmFuc3BvcnQgKi9cbmV4cG9ydCBjbGFzcyBYSFJUcmFuc3BvcnQgZXh0ZW5kcyBCYXNlVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2VuZEV2ZW50KGV2ZW50OiBFdmVudCk6IFByb21pc2VMaWtlPFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KGV2ZW50VG9TZW50cnlSZXF1ZXN0KGV2ZW50LCB0aGlzLl9hcGkpLCBldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZW5kU2Vzc2lvbihzZXNzaW9uOiBTZXNzaW9uKTogUHJvbWlzZUxpa2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3Qoc2Vzc2lvblRvU2VudHJ5UmVxdWVzdChzZXNzaW9uLCB0aGlzLl9hcGkpLCBzZXNzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gc2VudHJ5UmVxdWVzdCBQcmVwYXJlZCBTZW50cnlSZXF1ZXN0IHRvIGJlIGRlbGl2ZXJlZFxuICAgKiBAcGFyYW0gb3JpZ2luYWxQYXlsb2FkIE9yaWdpbmFsIHBheWxvYWQgdXNlZCB0byBjcmVhdGUgU2VudHJ5UmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBfc2VuZFJlcXVlc3Qoc2VudHJ5UmVxdWVzdDogU2VudHJ5UmVxdWVzdCwgb3JpZ2luYWxQYXlsb2FkOiBFdmVudCB8IFNlc3Npb24pOiBQcm9taXNlTGlrZTxSZXNwb25zZT4ge1xuICAgIGlmICh0aGlzLl9pc1JhdGVMaW1pdGVkKHNlbnRyeVJlcXVlc3QudHlwZSkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgIGV2ZW50OiBvcmlnaW5hbFBheWxvYWQsXG4gICAgICAgIHR5cGU6IHNlbnRyeVJlcXVlc3QudHlwZSxcbiAgICAgICAgcmVhc29uOiBgVHJhbnNwb3J0IGxvY2tlZCB0aWxsICR7dGhpcy5fZGlzYWJsZWRVbnRpbChzZW50cnlSZXF1ZXN0LnR5cGUpfSBkdWUgdG8gdG9vIG1hbnkgcmVxdWVzdHMuYCxcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmFkZChcbiAgICAgIG5ldyBTeW5jUHJvbWlzZTxSZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignWC1TZW50cnktUmF0ZS1MaW1pdHMnKSxcbiAgICAgICAgICAgICAgJ3JldHJ5LWFmdGVyJzogcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignUmV0cnktQWZ0ZXInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZXNwb25zZSh7IHJlcXVlc3RUeXBlOiBzZW50cnlSZXF1ZXN0LnR5cGUsIHJlc3BvbnNlOiByZXF1ZXN0LCBoZWFkZXJzLCByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJlcXVlc3Qub3BlbignUE9TVCcsIHNlbnRyeVJlcXVlc3QudXJsKTtcbiAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgaW4gdGhpcy5vcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoaGVhZGVyKSkge1xuICAgICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgdGhpcy5vcHRpb25zLmhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3Quc2VuZChzZW50cnlSZXF1ZXN0LmJvZHkpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/transports/xhr.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/dist/version.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/browser/dist/version.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SDK_NAME = 'sentry.javascript.browser';\nexports.SDK_VERSION = '5.27.4';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvdmVyc2lvbi50cz8wMDAzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLG1CQUFXLDJCQUFYO0FBQ0Esc0JBQWMsUUFBZCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2Jyb3dzZXIvZGlzdC92ZXJzaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNES19OQU1FID0gJ3NlbnRyeS5qYXZhc2NyaXB0LmJyb3dzZXInO1xuZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OID0gJzUuMjcuNCc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/dist/version.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/api.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/core/dist/api.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new utils_1.Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n\n\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n\n\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n\n\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n\n\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n\n    for (var key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n\n\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n\n\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return utils_1.urlEncode(auth);\n  };\n\n  return API;\n}();\n\nexports.API = API;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/api.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/basebackend.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/dist/basebackend.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar noop_1 = __webpack_require__(/*! ./transports/noop */ \"./node_modules/@sentry/core/dist/transports/noop.js\");\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\n\n\nvar BaseBackend =\n/** @class */\nfunction () {\n  /** Creates a new backend instance. */\n  function BaseBackend(options) {\n    this._options = options;\n\n    if (!this._options.dsn) {\n      utils_1.logger.warn('No DSN provided, backend will not do anything.');\n    }\n\n    this._transport = this._setupTransport();\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  BaseBackend.prototype.eventFromException = function (_exception, _hint) {\n    throw new utils_1.SentryError('Backend has to implement `eventFromException` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {\n    throw new utils_1.SentryError('Backend has to implement `eventFromMessage` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.sendEvent = function (event) {\n    this._transport.sendEvent(event).then(null, function (reason) {\n      utils_1.logger.error(\"Error while sending event: \" + reason);\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.sendSession = function (session) {\n    if (!this._transport.sendSession) {\n      utils_1.logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    this._transport.sendSession(session).then(null, function (reason) {\n      utils_1.logger.error(\"Error while sending session: \" + reason);\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.getTransport = function () {\n    return this._transport;\n  };\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n\n\n  BaseBackend.prototype._setupTransport = function () {\n    return new noop_1.NoopTransport();\n  };\n\n  return BaseBackend;\n}();\n\nexports.BaseBackend = BaseBackend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvYmFzZWJhY2tlbmQudHM/NmVhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0E7O0FBRUE7QUFtREE7Ozs7OztBQUlBO0FBQUE7QUFBQTtBQU9FO0FBQ0EsdUJBQW1CLE9BQW5CLEVBQTZCO0FBQzNCLFNBQUssUUFBTCxHQUFnQixPQUFoQjs7QUFDQSxRQUFJLENBQUMsS0FBSyxRQUFMLENBQWMsR0FBbkIsRUFBd0I7QUFDdEIscUJBQU8sSUFBUCxDQUFZLGdEQUFaO0FBQ0Q7O0FBQ0QsU0FBSyxVQUFMLEdBQWtCLEtBQUssZUFBTCxFQUFsQjtBQUNEO0FBRUQ7OztBQUdBOzs7QUFDTyw2Q0FBUCxVQUEwQixVQUExQixFQUEyQyxLQUEzQyxFQUE0RDtBQUMxRCxVQUFNLElBQUksbUJBQUosQ0FBZ0Isc0RBQWhCLENBQU47QUFDRCxHQUZNO0FBSVA7Ozs7O0FBR08sMkNBQVAsVUFBd0IsUUFBeEIsRUFBMEMsTUFBMUMsRUFBNkQsS0FBN0QsRUFBOEU7QUFDNUUsVUFBTSxJQUFJLG1CQUFKLENBQWdCLG9EQUFoQixDQUFOO0FBQ0QsR0FGTTtBQUlQOzs7OztBQUdPLG9DQUFQLFVBQWlCLEtBQWpCLEVBQTZCO0FBQzNCLFNBQUssVUFBTCxDQUFnQixTQUFoQixDQUEwQixLQUExQixFQUFpQyxJQUFqQyxDQUFzQyxJQUF0QyxFQUE0QyxrQkFBTTtBQUNoRCxxQkFBTyxLQUFQLENBQWEsZ0NBQThCLE1BQTNDO0FBQ0QsS0FGRDtBQUdELEdBSk07QUFNUDs7Ozs7QUFHTyxzQ0FBUCxVQUFtQixPQUFuQixFQUFtQztBQUNqQyxRQUFJLENBQUMsS0FBSyxVQUFMLENBQWdCLFdBQXJCLEVBQWtDO0FBQ2hDLHFCQUFPLElBQVAsQ0FBWSx5RUFBWjtBQUNBO0FBQ0Q7O0FBRUQsU0FBSyxVQUFMLENBQWdCLFdBQWhCLENBQTRCLE9BQTVCLEVBQXFDLElBQXJDLENBQTBDLElBQTFDLEVBQWdELGtCQUFNO0FBQ3BELHFCQUFPLEtBQVAsQ0FBYSxrQ0FBZ0MsTUFBN0M7QUFDRCxLQUZEO0FBR0QsR0FUTTtBQVdQOzs7OztBQUdPLHVDQUFQO0FBQ0UsV0FBTyxLQUFLLFVBQVo7QUFDRCxHQUZNO0FBSVA7Ozs7O0FBR1UsMENBQVY7QUFDRSxXQUFPLElBQUksb0JBQUosRUFBUDtBQUNELEdBRlM7O0FBR1o7QUFBQyxDQW5FRDs7QUFBc0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Rpc3QvYmFzZWJhY2tlbmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCwgRXZlbnRIaW50LCBPcHRpb25zLCBTZXNzaW9uLCBTZXZlcml0eSwgVHJhbnNwb3J0IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIsIFNlbnRyeUVycm9yIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IE5vb3BUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMvbm9vcCc7XG5cbi8qKlxuICogSW50ZXJuYWwgcGxhdGZvcm0tZGVwZW5kZW50IFNlbnRyeSBTREsgQmFja2VuZC5cbiAqXG4gKiBXaGlsZSB7QGxpbmsgQ2xpZW50fSBjb250YWlucyBidXNpbmVzcyBsb2dpYyBzcGVjaWZpYyB0byBhbiBTREssIHRoZVxuICogQmFja2VuZCBvZmZlcnMgcGxhdGZvcm0gc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIGZvciBsb3ctbGV2ZWwgb3BlcmF0aW9ucy5cbiAqIFRoZXNlIGFyZSBwZXJzaXN0aW5nIGFuZCBsb2FkaW5nIGluZm9ybWF0aW9uLCBzZW5kaW5nIGV2ZW50cywgYW5kIGhvb2tpbmdcbiAqIGludG8gdGhlIGVudmlyb25tZW50LlxuICpcbiAqIEJhY2tlbmRzIHJlY2VpdmUgYSBoYW5kbGUgdG8gdGhlIENsaWVudCBpbiB0aGVpciBjb25zdHJ1Y3Rvci4gV2hlbiBhXG4gKiBCYWNrZW5kIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVzIGV2ZW50cywgaXQgbXVzdCBwYXNzIHRoZW0gdG9cbiAqIHRoZSBDbGllbnQgZm9yIHZhbGlkYXRpb24gYW5kIHByb2Nlc3NpbmcgZmlyc3QuXG4gKlxuICogVXN1YWxseSwgdGhlIENsaWVudCB3aWxsIGJlIG9mIGNvcnJlc3BvbmRpbmcgdHlwZSwgZS5nLiBOb2RlQmFja2VuZFxuICogcmVjZWl2ZXMgTm9kZUNsaWVudC4gSG93ZXZlciwgaGlnaGVyLWxldmVsIFNES3MgY2FuIGNob29zZSB0byBpbnN0YW50aWF0ZVxuICogbXVsdGlwbGUgQmFja2VuZHMgYW5kIGRlbGVnYXRlIHRhc2tzIGJldHdlZW4gdGhlbS4gSW4gdGhpcyBjYXNlLCBhbiBldmVudFxuICogZ2VuZXJhdGVkIGJ5IG9uZSBiYWNrZW5kIG1pZ2h0IHZlcnkgd2VsbCBiZSBzZW50IGJ5IGFub3RoZXIgb25lLlxuICpcbiAqIFRoZSBjbGllbnQgYWxzbyBwcm92aWRlcyBhY2Nlc3MgdG8gb3B0aW9ucyB2aWEge0BsaW5rIENsaWVudC5nZXRPcHRpb25zfS5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYWNrZW5kIHtcbiAgLyoqIENyZWF0ZXMgYSB7QGxpbmsgRXZlbnR9IGZyb20gYW4gZXhjZXB0aW9uLiAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBldmVudEZyb21FeGNlcHRpb24oZXhjZXB0aW9uOiBhbnksIGhpbnQ/OiBFdmVudEhpbnQpOiBQcm9taXNlTGlrZTxFdmVudD47XG5cbiAgLyoqIENyZWF0ZXMgYSB7QGxpbmsgRXZlbnR9IGZyb20gYSBwbGFpbiBtZXNzYWdlLiAqL1xuICBldmVudEZyb21NZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgbGV2ZWw/OiBTZXZlcml0eSwgaGludD86IEV2ZW50SGludCk6IFByb21pc2VMaWtlPEV2ZW50PjtcblxuICAvKiogU3VibWl0cyB0aGUgZXZlbnQgdG8gU2VudHJ5ICovXG4gIHNlbmRFdmVudChldmVudDogRXZlbnQpOiB2b2lkO1xuXG4gIC8qKiBTdWJtaXRzIHRoZSBzZXNzaW9uIHRvIFNlbnRyeSAqL1xuICBzZW5kU2Vzc2lvbihzZXNzaW9uOiBTZXNzaW9uKTogdm9pZDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHJhbnNwb3J0IHRoYXQgaXMgdXNlZCBieSB0aGUgYmFja2VuZC5cbiAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGUgdHJhbnNwb3J0IGdldHMgbGF6eSBpbml0aWFsaXplZCBzbyBpdCB3aWxsIG9ubHkgYmUgdGhlcmUgb25jZSB0aGUgZmlyc3QgZXZlbnQgaGFzIGJlZW4gc2VudC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHRyYW5zcG9ydC5cbiAgICovXG4gIGdldFRyYW5zcG9ydCgpOiBUcmFuc3BvcnQ7XG59XG5cbi8qKlxuICogQSBjbGFzcyBvYmplY3QgdGhhdCBjYW4gaW5zdGFudGlhdGUgQmFja2VuZCBvYmplY3RzLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdHlwZSBCYWNrZW5kQ2xhc3M8QiBleHRlbmRzIEJhY2tlbmQsIE8gZXh0ZW5kcyBPcHRpb25zPiA9IG5ldyAob3B0aW9uczogTykgPT4gQjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBiYXNlIGltcGxlbWVudGlvbiBvZiBhIEJhY2tlbmQuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQmFja2VuZDxPIGV4dGVuZHMgT3B0aW9ucz4gaW1wbGVtZW50cyBCYWNrZW5kIHtcbiAgLyoqIE9wdGlvbnMgcGFzc2VkIHRvIHRoZSBTREsuICovXG4gIHByb3RlY3RlZCByZWFkb25seSBfb3B0aW9uczogTztcblxuICAvKiogQ2FjaGVkIHRyYW5zcG9ydCB1c2VkIGludGVybmFsbHkuICovXG4gIHByb3RlY3RlZCBfdHJhbnNwb3J0OiBUcmFuc3BvcnQ7XG5cbiAgLyoqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBpbnN0YW5jZS4gKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE8pIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAoIXRoaXMuX29wdGlvbnMuZHNuKSB7XG4gICAgICBsb2dnZXIud2FybignTm8gRFNOIHByb3ZpZGVkLCBiYWNrZW5kIHdpbGwgbm90IGRvIGFueXRoaW5nLicpO1xuICAgIH1cbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0aGlzLl9zZXR1cFRyYW5zcG9ydCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICBwdWJsaWMgZXZlbnRGcm9tRXhjZXB0aW9uKF9leGNlcHRpb246IGFueSwgX2hpbnQ/OiBFdmVudEhpbnQpOiBQcm9taXNlTGlrZTxFdmVudD4ge1xuICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21FeGNlcHRpb25gIG1ldGhvZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZXZlbnRGcm9tTWVzc2FnZShfbWVzc2FnZTogc3RyaW5nLCBfbGV2ZWw/OiBTZXZlcml0eSwgX2hpbnQ/OiBFdmVudEhpbnQpOiBQcm9taXNlTGlrZTxFdmVudD4ge1xuICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21NZXNzYWdlYCBtZXRob2QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNlbmRFdmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFuc3BvcnQuc2VuZEV2ZW50KGV2ZW50KS50aGVuKG51bGwsIHJlYXNvbiA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoYEVycm9yIHdoaWxlIHNlbmRpbmcgZXZlbnQ6ICR7cmVhc29ufWApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2VuZFNlc3Npb24oc2Vzc2lvbjogU2Vzc2lvbik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fdHJhbnNwb3J0LnNlbmRTZXNzaW9uKSB7XG4gICAgICBsb2dnZXIud2FybihcIkRyb3BwaW5nIHNlc3Npb24gYmVjYXVzZSBjdXN0b20gdHJhbnNwb3J0IGRvZXNuJ3QgaW1wbGVtZW50IHNlbmRTZXNzaW9uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RyYW5zcG9ydC5zZW5kU2Vzc2lvbihzZXNzaW9uKS50aGVuKG51bGwsIHJlYXNvbiA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoYEVycm9yIHdoaWxlIHNlbmRpbmcgc2Vzc2lvbjogJHtyZWFzb259YCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc3BvcnQoKTogVHJhbnNwb3J0IHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgdGhlIHRyYW5zcG9ydCBzbyBpdCBjYW4gYmUgdXNlZCBsYXRlciB0byBzZW5kIHJlcXVlc3RzLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9zZXR1cFRyYW5zcG9ydCgpOiBUcmFuc3BvcnQge1xuICAgIHJldHVybiBuZXcgTm9vcFRyYW5zcG9ydCgpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/basebackend.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/baseclient.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/dist/baseclient.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.number.constructor */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.keys */ \"./node_modules/core-js/modules/es.object.keys.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n/* eslint-disable max-lines */\n\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar integration_1 = __webpack_require__(/*! ./integration */ \"./node_modules/@sentry/core/dist/integration.js\");\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\n\n\nvar BaseClient =\n/** @class */\nfunction () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of call being processed */\n\n    this._processing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new utils_1.Dsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    var promisedEvent = utils_1.isPrimitive(message) ? this._getBackend().eventFromMessage(\"\" + message, level, hint) : this._getBackend().eventFromException(message, hint);\n\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var eventId = hint && hint.event_id;\n\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureSession = function (session) {\n    if (!session.release) {\n      utils_1.logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n\n    return this._isClientProcessing(timeout).then(function (ready) {\n      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {\n        return ready && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n\n\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled()) {\n      this._integrations = integration_1.setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      utils_1.logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n\n\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n\n    var crashed = false;\n    var errored = false;\n    var userAgent;\n    var exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      try {\n        for (var exceptions_1 = tslib_1.__values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    var user = event.user;\n\n    if (!session.userAgent) {\n      var headers = event.request ? event.request.headers : {};\n\n      for (var key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update(tslib_1.__assign(tslib_1.__assign({}, crashed && {\n      status: types_1.SessionStatus.Crashed\n    }), {\n      user: user,\n      userAgent: userAgent,\n      errors: session.errors + Number(errored || crashed)\n    }));\n  };\n  /** Deliver captured session to Sentry */\n\n\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /** Waits for the client to be done with processing. */\n\n\n  BaseClient.prototype._isClientProcessing = function (timeout) {\n    var _this = this;\n\n    return new utils_1.SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n\n\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n\n\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n\n    var _a = this.getOptions().normalizeDepth,\n        normalizeDepth = _a === void 0 ? 3 : _a;\n\n    var prepared = tslib_1.__assign(tslib_1.__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : utils_1.uuid4()),\n      timestamp: event.timestamp || utils_1.dateTimestampInSeconds()\n    });\n\n    this._applyClientOptions(prepared);\n\n    this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n\n\n    var finalScope = scope;\n\n    if (hint && hint.captureContext) {\n      finalScope = hub_1.Scope.clone(finalScope).update(hint.captureContext);\n    } // We prepare the result here with a resolved Event.\n\n\n    var result = utils_1.SyncPromise.resolve(prepared); // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(function (evt) {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth);\n      }\n\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n\n\n  BaseClient.prototype._normalizeEvent = function (event, depth) {\n    if (!event) {\n      return null;\n    }\n\n    var normalized = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return tslib_1.__assign(tslib_1.__assign({}, b), b.data && {\n          data: utils_1.normalize(b.data, depth)\n        });\n      })\n    }), event.user && {\n      user: utils_1.normalize(event.user, depth)\n    }), event.contexts && {\n      contexts: utils_1.normalize(event.contexts, depth)\n    }), event.extra && {\n      extra: utils_1.normalize(event.extra, depth)\n    }); // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n\n\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n\n\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n        release = options.release,\n        dist = options.dist,\n        _a = options.maxValueLength,\n        maxValueLength = _a === void 0 ? 250 : _a;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = utils_1.truncate(event.message, maxValueLength);\n    }\n\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n\n    if (exception && exception.value) {\n      exception.value = utils_1.truncate(exception.value, maxValueLength);\n    }\n\n    var request = event.request;\n\n    if (request && request.url) {\n      request.url = utils_1.truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n\n\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var sdkInfo = event.sdk;\n    var integrationsArray = Object.keys(this._integrations);\n\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n\n\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n\n\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      utils_1.logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n\n\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.getOptions(),\n        beforeSend = _a.beforeSend,\n        sampleRate = _a.sampleRate;\n\n    if (!this._isEnabled()) {\n      return utils_1.SyncPromise.reject(new utils_1.SentryError('SDK not enabled, will not send event.'));\n    }\n\n    var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return utils_1.SyncPromise.reject(new utils_1.SentryError('This event has been sampled, will not send event.'));\n    }\n\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      if (prepared === null) {\n        throw new utils_1.SentryError('An event processor returned null, will not send event.');\n      }\n\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n\n      var beforeSendResult = beforeSend(prepared, hint);\n\n      if (typeof beforeSendResult === 'undefined') {\n        throw new utils_1.SentryError('`beforeSend` method has to return `null` or a valid event.');\n      } else if (utils_1.isThenable(beforeSendResult)) {\n        return beforeSendResult.then(function (event) {\n          return event;\n        }, function (e) {\n          throw new utils_1.SentryError(\"beforeSend rejected with \" + e);\n        });\n      }\n\n      return beforeSendResult;\n    }).then(function (processedEvent) {\n      if (processedEvent === null) {\n        throw new utils_1.SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n\n      var session = scope && scope.getSession && scope.getSession();\n\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n\n      _this._sendEvent(processedEvent);\n\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof utils_1.SentryError) {\n        throw reason;\n      }\n\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n\n      throw new utils_1.SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n\n\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n\n    this._processing += 1;\n    promise.then(function (value) {\n      _this._processing -= 1;\n      return value;\n    }, function (reason) {\n      _this._processing -= 1;\n      return reason;\n    });\n  };\n\n  return BaseClient;\n}();\n\nexports.BaseClient = BaseClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/baseclient.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/core/dist/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar minimal_1 = __webpack_require__(/*! @sentry/minimal */ \"./node_modules/@sentry/minimal/dist/index.js\");\n\nexports.addBreadcrumb = minimal_1.addBreadcrumb;\nexports.captureException = minimal_1.captureException;\nexports.captureEvent = minimal_1.captureEvent;\nexports.captureMessage = minimal_1.captureMessage;\nexports.configureScope = minimal_1.configureScope;\nexports.startTransaction = minimal_1.startTransaction;\nexports.setContext = minimal_1.setContext;\nexports.setExtra = minimal_1.setExtra;\nexports.setExtras = minimal_1.setExtras;\nexports.setTag = minimal_1.setTag;\nexports.setTags = minimal_1.setTags;\nexports.setUser = minimal_1.setUser;\nexports.withScope = minimal_1.withScope;\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n\nexports.addGlobalEventProcessor = hub_1.addGlobalEventProcessor;\nexports.getCurrentHub = hub_1.getCurrentHub;\nexports.getHubFromCarrier = hub_1.getHubFromCarrier;\nexports.Hub = hub_1.Hub;\nexports.makeMain = hub_1.makeMain;\nexports.Scope = hub_1.Scope;\n\nvar api_1 = __webpack_require__(/*! ./api */ \"./node_modules/@sentry/core/dist/api.js\");\n\nexports.API = api_1.API;\n\nvar baseclient_1 = __webpack_require__(/*! ./baseclient */ \"./node_modules/@sentry/core/dist/baseclient.js\");\n\nexports.BaseClient = baseclient_1.BaseClient;\n\nvar basebackend_1 = __webpack_require__(/*! ./basebackend */ \"./node_modules/@sentry/core/dist/basebackend.js\");\n\nexports.BaseBackend = basebackend_1.BaseBackend;\n\nvar request_1 = __webpack_require__(/*! ./request */ \"./node_modules/@sentry/core/dist/request.js\");\n\nexports.eventToSentryRequest = request_1.eventToSentryRequest;\nexports.sessionToSentryRequest = request_1.sessionToSentryRequest;\n\nvar sdk_1 = __webpack_require__(/*! ./sdk */ \"./node_modules/@sentry/core/dist/sdk.js\");\n\nexports.initAndBind = sdk_1.initAndBind;\n\nvar noop_1 = __webpack_require__(/*! ./transports/noop */ \"./node_modules/@sentry/core/dist/transports/noop.js\");\n\nexports.NoopTransport = noop_1.NoopTransport;\n\nvar Integrations = __webpack_require__(/*! ./integrations */ \"./node_modules/@sentry/core/dist/integrations/index.js\");\n\nexports.Integrations = Integrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUY7O0FBQVM7QUFBeUI7QUFBZTtBQUFtQjtBQUFLO0FBQVU7O0FBQ25GOztBQUFTOztBQUNUOztBQUFTOztBQUNUOztBQUF1Qjs7QUFDdkI7O0FBQVM7QUFBc0I7O0FBQy9COztBQUFTOztBQUNUOztBQUFTOztBQUVUOztBQUVTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtcbiAgYWRkQnJlYWRjcnVtYixcbiAgY2FwdHVyZUV4Y2VwdGlvbixcbiAgY2FwdHVyZUV2ZW50LFxuICBjYXB0dXJlTWVzc2FnZSxcbiAgY29uZmlndXJlU2NvcGUsXG4gIHN0YXJ0VHJhbnNhY3Rpb24sXG4gIHNldENvbnRleHQsXG4gIHNldEV4dHJhLFxuICBzZXRFeHRyYXMsXG4gIHNldFRhZyxcbiAgc2V0VGFncyxcbiAgc2V0VXNlcixcbiAgd2l0aFNjb3BlLFxufSBmcm9tICdAc2VudHJ5L21pbmltYWwnO1xuZXhwb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIsIGdldEh1YkZyb21DYXJyaWVyLCBIdWIsIG1ha2VNYWluLCBTY29wZSB9IGZyb20gJ0BzZW50cnkvaHViJztcbmV4cG9ydCB7IEFQSSB9IGZyb20gJy4vYXBpJztcbmV4cG9ydCB7IEJhc2VDbGllbnQgfSBmcm9tICcuL2Jhc2VjbGllbnQnO1xuZXhwb3J0IHsgQmFja2VuZENsYXNzLCBCYXNlQmFja2VuZCB9IGZyb20gJy4vYmFzZWJhY2tlbmQnO1xuZXhwb3J0IHsgZXZlbnRUb1NlbnRyeVJlcXVlc3QsIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3QgfSBmcm9tICcuL3JlcXVlc3QnO1xuZXhwb3J0IHsgaW5pdEFuZEJpbmQsIENsaWVudENsYXNzIH0gZnJvbSAnLi9zZGsnO1xuZXhwb3J0IHsgTm9vcFRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0cy9ub29wJztcblxuaW1wb3J0ICogYXMgSW50ZWdyYXRpb25zIGZyb20gJy4vaW50ZWdyYXRpb25zJztcblxuZXhwb3J0IHsgSW50ZWdyYXRpb25zIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/integration.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/dist/integration.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.splice */ \"./node_modules/core-js/modules/es.array.splice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nexports.installedIntegrations = [];\n/** Gets integration to install */\n\nfunction getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && tslib_1.__spread(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n  var integrations = [];\n\n  if (Array.isArray(userIntegrations)) {\n    var userIntegrationsNames_1 = userIntegrations.map(function (i) {\n      return i.name;\n    });\n    var pickedIntegrationsNames_1 = []; // Leave only unique default integrations, that were not overridden with provided user integrations\n\n    defaultIntegrations.forEach(function (defaultIntegration) {\n      if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames_1.push(defaultIntegration.name);\n      }\n    }); // Don't add same user integration twice\n\n    userIntegrations.forEach(function (userIntegration) {\n      if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames_1.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = tslib_1.__spread(defaultIntegrations);\n  } // Make sure that if present, `Debug` integration will always run last\n\n\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push.apply(integrations, tslib_1.__spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n\n  return integrations;\n}\n\nexports.getIntegrationsToSetup = getIntegrationsToSetup;\n/** Setup given integration */\n\nfunction setupIntegration(integration) {\n  if (exports.installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n\n  integration.setupOnce(hub_1.addGlobalEventProcessor, hub_1.getCurrentHub);\n  exports.installedIntegrations.push(integration.name);\n  utils_1.logger.log(\"Integration installed: \" + integration.name);\n}\n\nexports.setupIntegration = setupIntegration;\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\n\nfunction setupIntegrations(options) {\n  var integrations = {};\n  getIntegrationsToSetup(options).forEach(function (integration) {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n\nexports.setupIntegrations = setupIntegrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW50ZWdyYXRpb24udHM/ZDA5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRWEsZ0NBQWtDLEVBQWxDO0FBT2I7O0FBQ0EsU0FBZ0Isc0JBQWhCLENBQXVDLE9BQXZDLEVBQXVEO0FBQ3JELE1BQU0sbUJBQW1CLEdBQUksT0FBTyxDQUFDLG1CQUFSLElBQTJCLGlCQUFRLE9BQU8sQ0FBQyxtQkFBaEIsQ0FBNUIsSUFBcUUsRUFBakc7QUFDQSxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxZQUFqQztBQUNBLE1BQUksWUFBWSxHQUFrQixFQUFsQzs7QUFDQSxNQUFJLEtBQUssQ0FBQyxPQUFOLENBQWMsZ0JBQWQsQ0FBSixFQUFxQztBQUNuQyxRQUFNLHVCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQWpCLENBQXFCLGFBQUM7QUFBSSxjQUFDLENBQUQ7QUFBTSxLQUFoQyxDQUE5QjtBQUNBLFFBQU0seUJBQXVCLEdBQWEsRUFBMUMsQ0FGbUMsQ0FJbkM7O0FBQ0EsdUJBQW1CLENBQUMsT0FBcEIsQ0FBNEIsOEJBQWtCO0FBQzVDLFVBQ0UsdUJBQXFCLENBQUMsT0FBdEIsQ0FBOEIsa0JBQWtCLENBQUMsSUFBakQsTUFBMkQsQ0FBQyxDQUE1RCxJQUNBLHlCQUF1QixDQUFDLE9BQXhCLENBQWdDLGtCQUFrQixDQUFDLElBQW5ELE1BQTZELENBQUMsQ0FGaEUsRUFHRTtBQUNBLG9CQUFZLENBQUMsSUFBYixDQUFrQixrQkFBbEI7QUFDQSxpQ0FBdUIsQ0FBQyxJQUF4QixDQUE2QixrQkFBa0IsQ0FBQyxJQUFoRDtBQUNEO0FBQ0YsS0FSRCxFQUxtQyxDQWVuQzs7QUFDQSxvQkFBZ0IsQ0FBQyxPQUFqQixDQUF5QiwyQkFBZTtBQUN0QyxVQUFJLHlCQUF1QixDQUFDLE9BQXhCLENBQWdDLGVBQWUsQ0FBQyxJQUFoRCxNQUEwRCxDQUFDLENBQS9ELEVBQWtFO0FBQ2hFLG9CQUFZLENBQUMsSUFBYixDQUFrQixlQUFsQjtBQUNBLGlDQUF1QixDQUFDLElBQXhCLENBQTZCLGVBQWUsQ0FBQyxJQUE3QztBQUNEO0FBQ0YsS0FMRDtBQU1ELEdBdEJELE1Bc0JPLElBQUksT0FBTyxnQkFBUCxLQUE0QixVQUFoQyxFQUE0QztBQUNqRCxnQkFBWSxHQUFHLGdCQUFnQixDQUFDLG1CQUFELENBQS9CO0FBQ0EsZ0JBQVksR0FBRyxLQUFLLENBQUMsT0FBTixDQUFjLFlBQWQsSUFBOEIsWUFBOUIsR0FBNkMsQ0FBQyxZQUFELENBQTVEO0FBQ0QsR0FITSxNQUdBO0FBQ0wsZ0JBQVksb0JBQU8sbUJBQVAsQ0FBWjtBQUNELEdBL0JvRCxDQWlDckQ7OztBQUNBLE1BQU0saUJBQWlCLEdBQUcsWUFBWSxDQUFDLEdBQWIsQ0FBaUIsYUFBQztBQUFJLFlBQUMsQ0FBRDtBQUFNLEdBQTVCLENBQTFCO0FBQ0EsTUFBTSxlQUFlLEdBQUcsT0FBeEI7O0FBQ0EsTUFBSSxpQkFBaUIsQ0FBQyxPQUFsQixDQUEwQixlQUExQixNQUErQyxDQUFDLENBQXBELEVBQXVEO0FBQ3JELGdCQUFZLENBQUMsSUFBYixDQUFpQixLQUFqQixlQUFZLGlCQUFTLFlBQVksQ0FBQyxNQUFiLENBQW9CLGlCQUFpQixDQUFDLE9BQWxCLENBQTBCLGVBQTFCLENBQXBCLEVBQWdFLENBQWhFLENBQVQsQ0FBWjtBQUNEOztBQUVELFNBQU8sWUFBUDtBQUNEOztBQXpDRDtBQTJDQTs7QUFDQSxTQUFnQixnQkFBaEIsQ0FBaUMsV0FBakMsRUFBeUQ7QUFDdkQsTUFBSSw4QkFBc0IsT0FBdEIsQ0FBOEIsV0FBVyxDQUFDLElBQTFDLE1BQW9ELENBQUMsQ0FBekQsRUFBNEQ7QUFDMUQ7QUFDRDs7QUFDRCxhQUFXLENBQUMsU0FBWixDQUFzQiw2QkFBdEIsRUFBK0MsbUJBQS9DO0FBQ0EsZ0NBQXNCLElBQXRCLENBQTJCLFdBQVcsQ0FBQyxJQUF2QztBQUNBLGlCQUFPLEdBQVAsQ0FBVyw0QkFBMEIsV0FBVyxDQUFDLElBQWpEO0FBQ0Q7O0FBUEQ7QUFTQTs7Ozs7OztBQU1BLFNBQWdCLGlCQUFoQixDQUFxRCxPQUFyRCxFQUErRDtBQUM3RCxNQUFNLFlBQVksR0FBcUIsRUFBdkM7QUFDQSx3QkFBc0IsQ0FBQyxPQUFELENBQXRCLENBQWdDLE9BQWhDLENBQXdDLHVCQUFXO0FBQ2pELGdCQUFZLENBQUMsV0FBVyxDQUFDLElBQWIsQ0FBWixHQUFpQyxXQUFqQztBQUNBLG9CQUFnQixDQUFDLFdBQUQsQ0FBaEI7QUFDRCxHQUhEO0FBSUEsU0FBTyxZQUFQO0FBQ0Q7O0FBUEQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Rpc3QvaW50ZWdyYXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IEludGVncmF0aW9uLCBPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGluc3RhbGxlZEludGVncmF0aW9uczogc3RyaW5nW10gPSBbXTtcblxuLyoqIE1hcCBvZiBpbnRlZ3JhdGlvbnMgYXNzaWduZWQgdG8gYSBjbGllbnQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZWdyYXRpb25JbmRleCB7XG4gIFtrZXk6IHN0cmluZ106IEludGVncmF0aW9uO1xufVxuXG4vKiogR2V0cyBpbnRlZ3JhdGlvbiB0byBpbnN0YWxsICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZWdyYXRpb25zVG9TZXR1cChvcHRpb25zOiBPcHRpb25zKTogSW50ZWdyYXRpb25bXSB7XG4gIGNvbnN0IGRlZmF1bHRJbnRlZ3JhdGlvbnMgPSAob3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zICYmIFsuLi5vcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnNdKSB8fCBbXTtcbiAgY29uc3QgdXNlckludGVncmF0aW9ucyA9IG9wdGlvbnMuaW50ZWdyYXRpb25zO1xuICBsZXQgaW50ZWdyYXRpb25zOiBJbnRlZ3JhdGlvbltdID0gW107XG4gIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnRlZ3JhdGlvbnMpKSB7XG4gICAgY29uc3QgdXNlckludGVncmF0aW9uc05hbWVzID0gdXNlckludGVncmF0aW9ucy5tYXAoaSA9PiBpLm5hbWUpO1xuICAgIGNvbnN0IHBpY2tlZEludGVncmF0aW9uc05hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gTGVhdmUgb25seSB1bmlxdWUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMsIHRoYXQgd2VyZSBub3Qgb3ZlcnJpZGRlbiB3aXRoIHByb3ZpZGVkIHVzZXIgaW50ZWdyYXRpb25zXG4gICAgZGVmYXVsdEludGVncmF0aW9ucy5mb3JFYWNoKGRlZmF1bHRJbnRlZ3JhdGlvbiA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHVzZXJJbnRlZ3JhdGlvbnNOYW1lcy5pbmRleE9mKGRlZmF1bHRJbnRlZ3JhdGlvbi5uYW1lKSA9PT0gLTEgJiZcbiAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZihkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSkgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgaW50ZWdyYXRpb25zLnB1c2goZGVmYXVsdEludGVncmF0aW9uKTtcbiAgICAgICAgcGlja2VkSW50ZWdyYXRpb25zTmFtZXMucHVzaChkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEb24ndCBhZGQgc2FtZSB1c2VyIGludGVncmF0aW9uIHR3aWNlXG4gICAgdXNlckludGVncmF0aW9ucy5mb3JFYWNoKHVzZXJJbnRlZ3JhdGlvbiA9PiB7XG4gICAgICBpZiAocGlja2VkSW50ZWdyYXRpb25zTmFtZXMuaW5kZXhPZih1c2VySW50ZWdyYXRpb24ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgIGludGVncmF0aW9ucy5wdXNoKHVzZXJJbnRlZ3JhdGlvbik7XG4gICAgICAgIHBpY2tlZEludGVncmF0aW9uc05hbWVzLnB1c2godXNlckludGVncmF0aW9uLm5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB1c2VySW50ZWdyYXRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW50ZWdyYXRpb25zID0gdXNlckludGVncmF0aW9ucyhkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICBpbnRlZ3JhdGlvbnMgPSBBcnJheS5pc0FycmF5KGludGVncmF0aW9ucykgPyBpbnRlZ3JhdGlvbnMgOiBbaW50ZWdyYXRpb25zXTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlZ3JhdGlvbnMgPSBbLi4uZGVmYXVsdEludGVncmF0aW9uc107XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgdGhhdCBpZiBwcmVzZW50LCBgRGVidWdgIGludGVncmF0aW9uIHdpbGwgYWx3YXlzIHJ1biBsYXN0XG4gIGNvbnN0IGludGVncmF0aW9uc05hbWVzID0gaW50ZWdyYXRpb25zLm1hcChpID0+IGkubmFtZSk7XG4gIGNvbnN0IGFsd2F5c0xhc3RUb1J1biA9ICdEZWJ1Zyc7XG4gIGlmIChpbnRlZ3JhdGlvbnNOYW1lcy5pbmRleE9mKGFsd2F5c0xhc3RUb1J1bikgIT09IC0xKSB7XG4gICAgaW50ZWdyYXRpb25zLnB1c2goLi4uaW50ZWdyYXRpb25zLnNwbGljZShpbnRlZ3JhdGlvbnNOYW1lcy5pbmRleE9mKGFsd2F5c0xhc3RUb1J1biksIDEpKTtcbiAgfVxuXG4gIHJldHVybiBpbnRlZ3JhdGlvbnM7XG59XG5cbi8qKiBTZXR1cCBnaXZlbiBpbnRlZ3JhdGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSW50ZWdyYXRpb24oaW50ZWdyYXRpb246IEludGVncmF0aW9uKTogdm9pZCB7XG4gIGlmIChpbnN0YWxsZWRJbnRlZ3JhdGlvbnMuaW5kZXhPZihpbnRlZ3JhdGlvbi5uYW1lKSAhPT0gLTEpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaW50ZWdyYXRpb24uc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViKTtcbiAgaW5zdGFsbGVkSW50ZWdyYXRpb25zLnB1c2goaW50ZWdyYXRpb24ubmFtZSk7XG4gIGxvZ2dlci5sb2coYEludGVncmF0aW9uIGluc3RhbGxlZDogJHtpbnRlZ3JhdGlvbi5uYW1lfWApO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBpbnRlZ3JhdGlvbiBpbnN0YW5jZXMgdGhpcyBpbnN0YWxscyB0aGVtIGFsbC4gV2hlbiBgd2l0aERlZmF1bHRzYCBpcyBzZXQgdG8gYHRydWVgIHRoZW4gYWxsIGRlZmF1bHRcbiAqIGludGVncmF0aW9ucyBhcmUgYWRkZWQgdW5sZXNzIHRoZXkgd2VyZSBhbHJlYWR5IHByb3ZpZGVkIGJlZm9yZS5cbiAqIEBwYXJhbSBpbnRlZ3JhdGlvbnMgYXJyYXkgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzXG4gKiBAcGFyYW0gd2l0aERlZmF1bHQgc2hvdWxkIGVuYWJsZSBkZWZhdWx0IGludGVncmF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbnM8TyBleHRlbmRzIE9wdGlvbnM+KG9wdGlvbnM6IE8pOiBJbnRlZ3JhdGlvbkluZGV4IHtcbiAgY29uc3QgaW50ZWdyYXRpb25zOiBJbnRlZ3JhdGlvbkluZGV4ID0ge307XG4gIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucykuZm9yRWFjaChpbnRlZ3JhdGlvbiA9PiB7XG4gICAgaW50ZWdyYXRpb25zW2ludGVncmF0aW9uLm5hbWVdID0gaW50ZWdyYXRpb247XG4gICAgc2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gIH0pO1xuICByZXR1cm4gaW50ZWdyYXRpb25zO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/integration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/integrations/functiontostring.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/dist/integrations/functiontostring.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\n\nvar FunctionToString =\n/** @class */\nfunction () {\n  function FunctionToString() {\n    /**\n     * @inheritDoc\n     */\n    this.name = FunctionToString.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FunctionToString.prototype.setupOnce = function () {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    Function.prototype.toString = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  FunctionToString.id = 'FunctionToString';\n  return FunctionToString;\n}();\n\nexports.FunctionToString = FunctionToString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcudHM/MGUxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxJQUFJLHdCQUFKO0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFNRTs7O0FBR08sZ0JBQWUsZ0JBQWdCLENBQUMsRUFBaEM7QUFlUjtBQWJDOzs7OztBQUdPLHlDQUFQO0FBQ0U7QUFDQSw0QkFBd0IsR0FBRyxRQUFRLENBQUMsU0FBVCxDQUFtQixRQUE5QyxDQUZGLENBSUU7O0FBQ0EsWUFBUSxDQUFDLFNBQVQsQ0FBbUIsUUFBbkIsR0FBOEI7QUFBZ0M7O1dBQUEsVSxFQUFBLHFCLEVBQUEsSSxFQUFjO0FBQWQ7OztBQUM1RCxVQUFNLE9BQU8sR0FBRyxLQUFLLG1CQUFMLElBQTRCLElBQTVDO0FBQ0EsYUFBTyx3QkFBd0IsQ0FBQyxLQUF6QixDQUErQixPQUEvQixFQUF3QyxJQUF4QyxDQUFQO0FBQ0QsS0FIRDtBQUlELEdBVE07QUFiUDs7Ozs7QUFHYyx3QkFBYSxrQkFBYjtBQW9CaEI7QUFBQyxDQXhCRDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZGlzdC9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVncmF0aW9uLCBXcmFwcGVkRnVuY3Rpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcblxubGV0IG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZzogKCkgPT4gdm9pZDtcblxuLyoqIFBhdGNoIHRvU3RyaW5nIGNhbGxzIHRvIHJldHVybiBwcm9wZXIgbmFtZSBmb3Igd3JhcHBlZCBmdW5jdGlvbnMgKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvblRvU3RyaW5nIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdGdW5jdGlvblRvU3RyaW5nJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBGdW5jdGlvblRvU3RyaW5nLmlkO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZSgpOiB2b2lkIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbih0aGlzOiBXcmFwcGVkRnVuY3Rpb24sIC4uLmFyZ3M6IGFueVtdKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9fc2VudHJ5X29yaWdpbmFsX18gfHwgdGhpcztcbiAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/integrations/functiontostring.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/integrations/inboundfilters.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/dist/integrations/inboundfilters.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\"); // \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\n\n\nvar DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n/** Inbound filters configurable by the user */\n\nvar InboundFilters =\n/** @class */\nfunction () {\n  function InboundFilters(_options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = InboundFilters.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  InboundFilters.prototype.setupOnce = function () {\n    hub_1.addGlobalEventProcessor(function (event) {\n      var hub = hub_1.getCurrentHub();\n\n      if (!hub) {\n        return event;\n      }\n\n      var self = hub.getIntegration(InboundFilters);\n\n      if (self) {\n        var client = hub.getClient();\n        var clientOptions = client ? client.getOptions() : {};\n\n        var options = self._mergeOptions(clientOptions);\n\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n\n      return event;\n    });\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._shouldDropEvent = function (event, options) {\n    if (this._isSentryError(event, options)) {\n      utils_1.logger.warn(\"Event dropped due to being internal Sentry Error.\\nEvent: \" + utils_1.getEventDescription(event));\n      return true;\n    }\n\n    if (this._isIgnoredError(event, options)) {\n      utils_1.logger.warn(\"Event dropped due to being matched by `ignoreErrors` option.\\nEvent: \" + utils_1.getEventDescription(event));\n      return true;\n    }\n\n    if (this._isDeniedUrl(event, options)) {\n      utils_1.logger.warn(\"Event dropped due to being matched by `denyUrls` option.\\nEvent: \" + utils_1.getEventDescription(event) + \".\\nUrl: \" + this._getEventFilterUrl(event));\n      return true;\n    }\n\n    if (!this._isAllowedUrl(event, options)) {\n      utils_1.logger.warn(\"Event dropped due to not being matched by `allowUrls` option.\\nEvent: \" + utils_1.getEventDescription(event) + \".\\nUrl: \" + this._getEventFilterUrl(event));\n      return true;\n    }\n\n    return false;\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._isSentryError = function (event, options) {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return event && event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].type === 'SentryError' || false;\n    } catch (_oO) {\n      return false;\n    }\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._isIgnoredError = function (event, options) {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(function (message) {\n      // Not sure why TypeScript complains here...\n      return options.ignoreErrors.some(function (pattern) {\n        return utils_1.isMatchingPattern(message, pattern);\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._isDeniedUrl = function (event, options) {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n\n    var url = this._getEventFilterUrl(event);\n\n    return !url ? false : options.denyUrls.some(function (pattern) {\n      return utils_1.isMatchingPattern(url, pattern);\n    });\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._isAllowedUrl = function (event, options) {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n\n    var url = this._getEventFilterUrl(event);\n\n    return !url ? true : options.allowUrls.some(function (pattern) {\n      return utils_1.isMatchingPattern(url, pattern);\n    });\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._mergeOptions = function (clientOptions) {\n    if (clientOptions === void 0) {\n      clientOptions = {};\n    }\n\n    return {\n      allowUrls: tslib_1.__spread(this._options.whitelistUrls || [], this._options.allowUrls || [], clientOptions.whitelistUrls || [], clientOptions.allowUrls || []),\n      denyUrls: tslib_1.__spread(this._options.blacklistUrls || [], this._options.denyUrls || [], clientOptions.blacklistUrls || [], clientOptions.denyUrls || []),\n      ignoreErrors: tslib_1.__spread(this._options.ignoreErrors || [], clientOptions.ignoreErrors || [], DEFAULT_IGNORE_ERRORS),\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true\n    };\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._getPossibleEventMessages = function (event) {\n    if (event.message) {\n      return [event.message];\n    }\n\n    if (event.exception) {\n      try {\n        var _a = event.exception.values && event.exception.values[0] || {},\n            _b = _a.type,\n            type = _b === void 0 ? '' : _b,\n            _c = _a.value,\n            value = _c === void 0 ? '' : _c;\n\n        return [\"\" + value, type + \": \" + value];\n      } catch (oO) {\n        utils_1.logger.error(\"Cannot extract message for event \" + utils_1.getEventDescription(event));\n        return [];\n      }\n    }\n\n    return [];\n  };\n  /** JSDoc */\n\n\n  InboundFilters.prototype._getEventFilterUrl = function (event) {\n    try {\n      if (event.stacktrace) {\n        var frames_1 = event.stacktrace.frames;\n        return frames_1 && frames_1[frames_1.length - 1].filename || null;\n      }\n\n      if (event.exception) {\n        var frames_2 = event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return frames_2 && frames_2[frames_2.length - 1].filename || null;\n      }\n\n      return null;\n    } catch (oO) {\n      utils_1.logger.error(\"Cannot extract url for event \" + utils_1.getEventDescription(event));\n      return null;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  InboundFilters.id = 'InboundFilters';\n  return InboundFilters;\n}();\n\nexports.InboundFilters = InboundFilters;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/integrations/inboundfilters.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/integrations/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/dist/integrations/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar functiontostring_1 = __webpack_require__(/*! ./functiontostring */ \"./node_modules/@sentry/core/dist/integrations/functiontostring.js\");\n\nexports.FunctionToString = functiontostring_1.FunctionToString;\n\nvar inboundfilters_1 = __webpack_require__(/*! ./inboundfilters */ \"./node_modules/@sentry/core/dist/integrations/inboundfilters.js\");\n\nexports.InboundFilters = inboundfilters_1.InboundFilters;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL2luZGV4LnRzP2VjMjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUFTOztBQUNUOztBQUFTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9kaXN0L2ludGVncmF0aW9ucy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEZ1bmN0aW9uVG9TdHJpbmcgfSBmcm9tICcuL2Z1bmN0aW9udG9zdHJpbmcnO1xuZXhwb3J0IHsgSW5ib3VuZEZpbHRlcnMgfSBmcm9tICcuL2luYm91bmRmaWx0ZXJzJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/integrations/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/request.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/core/dist/request.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** Creates a SentryRequest from an event. */\n\nfunction sessionToSentryRequest(session, api) {\n  var envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString()\n  });\n  var itemHeaders = JSON.stringify({\n    type: 'session'\n  });\n  return {\n    body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n    type: 'session',\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth()\n  };\n}\n\nexports.sessionToSentryRequest = sessionToSentryRequest;\n/** Creates a SentryRequest from an event. */\n\nfunction eventToSentryRequest(event, api) {\n  var useEnvelope = event.type === 'transaction';\n  var req = {\n    body: JSON.stringify(event),\n    type: event.type || 'event',\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth()\n  }; // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n\n  if (useEnvelope) {\n    var envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      // We need to add * 1000 since we divide it by 1000 by default but JS works with ms precision\n      // The reason we use timestampWithMs here is that all clocks across the SDK use the same clock\n      sent_at: new Date().toISOString()\n    });\n    var itemHeaders = JSON.stringify({\n      type: event.type\n    }); // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n\n    var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n    req.body = envelope;\n  }\n\n  return req;\n}\n\nexports.eventToSentryRequest = eventToSentryRequest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcmVxdWVzdC50cz9lNGRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBOztBQUNBLFNBQWdCLHNCQUFoQixDQUF1QyxPQUF2QyxFQUF5RCxHQUF6RCxFQUFpRTtBQUMvRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBTCxDQUFlO0FBQ3JDLFdBQU8sRUFBRSxJQUFJLElBQUosR0FBVyxXQUFYO0FBRDRCLEdBQWYsQ0FBeEI7QUFHQSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBTCxDQUFlO0FBQ2pDLFFBQUksRUFBRTtBQUQyQixHQUFmLENBQXBCO0FBSUEsU0FBTztBQUNMLFFBQUksRUFBSyxlQUFlLE9BQWYsR0FBb0IsV0FBcEIsR0FBK0IsSUFBL0IsR0FBb0MsSUFBSSxDQUFDLFNBQUwsQ0FBZSxPQUFmLENBRHhDO0FBRUwsUUFBSSxFQUFFLFNBRkQ7QUFHTCxPQUFHLEVBQUUsR0FBRyxDQUFDLHFDQUFKO0FBSEEsR0FBUDtBQUtEOztBQWJEO0FBZUE7O0FBQ0EsU0FBZ0Isb0JBQWhCLENBQXFDLEtBQXJDLEVBQW1ELEdBQW5ELEVBQTJEO0FBQ3pELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFOLEtBQWUsYUFBbkM7QUFFQSxNQUFNLEdBQUcsR0FBa0I7QUFDekIsUUFBSSxFQUFFLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixDQURtQjtBQUV6QixRQUFJLEVBQUUsS0FBSyxDQUFDLElBQU4sSUFBYyxPQUZLO0FBR3pCLE9BQUcsRUFBRSxXQUFXLEdBQUcsR0FBRyxDQUFDLHFDQUFKLEVBQUgsR0FBaUQsR0FBRyxDQUFDLGtDQUFKO0FBSHhDLEdBQTNCLENBSHlELENBU3pEO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSSxXQUFKLEVBQWlCO0FBQ2YsUUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQUwsQ0FBZTtBQUNyQyxjQUFRLEVBQUUsS0FBSyxDQUFDLFFBRHFCO0FBRXJDO0FBQ0E7QUFDQSxhQUFPLEVBQUUsSUFBSSxJQUFKLEdBQVcsV0FBWDtBQUo0QixLQUFmLENBQXhCO0FBTUEsUUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQUwsQ0FBZTtBQUNqQyxVQUFJLEVBQUUsS0FBSyxDQUFDO0FBRHFCLEtBQWYsQ0FBcEIsQ0FQZSxDQXVCZjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxRQUFNLFFBQVEsR0FBTSxlQUFlLE9BQWYsR0FBb0IsV0FBcEIsR0FBK0IsSUFBL0IsR0FBb0MsR0FBRyxDQUFDLElBQTVEO0FBQ0EsT0FBRyxDQUFDLElBQUosR0FBVyxRQUFYO0FBQ0Q7O0FBRUQsU0FBTyxHQUFQO0FBQ0Q7O0FBL0NEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9kaXN0L3JlcXVlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCwgU2VudHJ5UmVxdWVzdCwgU2Vzc2lvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBBUEkgfSBmcm9tICcuL2FwaSc7XG5cbi8qKiBDcmVhdGVzIGEgU2VudHJ5UmVxdWVzdCBmcm9tIGFuIGV2ZW50LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3Qoc2Vzc2lvbjogU2Vzc2lvbiwgYXBpOiBBUEkpOiBTZW50cnlSZXF1ZXN0IHtcbiAgY29uc3QgZW52ZWxvcGVIZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfSk7XG4gIGNvbnN0IGl0ZW1IZWFkZXJzID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgIHR5cGU6ICdzZXNzaW9uJyxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBib2R5OiBgJHtlbnZlbG9wZUhlYWRlcnN9XFxuJHtpdGVtSGVhZGVyc31cXG4ke0pTT04uc3RyaW5naWZ5KHNlc3Npb24pfWAsXG4gICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgIHVybDogYXBpLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKSxcbiAgfTtcbn1cblxuLyoqIENyZWF0ZXMgYSBTZW50cnlSZXF1ZXN0IGZyb20gYW4gZXZlbnQuICovXG5leHBvcnQgZnVuY3Rpb24gZXZlbnRUb1NlbnRyeVJlcXVlc3QoZXZlbnQ6IEV2ZW50LCBhcGk6IEFQSSk6IFNlbnRyeVJlcXVlc3Qge1xuICBjb25zdCB1c2VFbnZlbG9wZSA9IGV2ZW50LnR5cGUgPT09ICd0cmFuc2FjdGlvbic7XG5cbiAgY29uc3QgcmVxOiBTZW50cnlSZXF1ZXN0ID0ge1xuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGV2ZW50KSxcbiAgICB0eXBlOiBldmVudC50eXBlIHx8ICdldmVudCcsXG4gICAgdXJsOiB1c2VFbnZlbG9wZSA/IGFwaS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCkgOiBhcGkuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCgpLFxuICB9O1xuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9lbnZlbG9wZXMvXG5cbiAgLy8gU2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBtYW5pcHVsYXRlIGVudmVsb3BlcyBub3Igc3RvcmUgdGhlbSwgdGhlcmUgaXMgbm9cbiAgLy8gZXhwb3J0ZWQgY29uY2VwdCBvZiBhbiBFbnZlbG9wZSB3aXRoIG9wZXJhdGlvbnMgaW5jbHVkaW5nIHNlcmlhbGl6YXRpb24gYW5kXG4gIC8vIGRlc2VyaWFsaXphdGlvbi4gSW5zdGVhZCwgd2Ugb25seSBpbXBsZW1lbnQgYSBtaW5pbWFsIHN1YnNldCBvZiB0aGUgc3BlYyB0b1xuICAvLyBzZXJpYWxpemUgZXZlbnRzIGlubGluZSBoZXJlLlxuICBpZiAodXNlRW52ZWxvcGUpIHtcbiAgICBjb25zdCBlbnZlbG9wZUhlYWRlcnMgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBldmVudF9pZDogZXZlbnQuZXZlbnRfaWQsXG4gICAgICAvLyBXZSBuZWVkIHRvIGFkZCAqIDEwMDAgc2luY2Ugd2UgZGl2aWRlIGl0IGJ5IDEwMDAgYnkgZGVmYXVsdCBidXQgSlMgd29ya3Mgd2l0aCBtcyBwcmVjaXNpb25cbiAgICAgIC8vIFRoZSByZWFzb24gd2UgdXNlIHRpbWVzdGFtcFdpdGhNcyBoZXJlIGlzIHRoYXQgYWxsIGNsb2NrcyBhY3Jvc3MgdGhlIFNESyB1c2UgdGhlIHNhbWUgY2xvY2tcbiAgICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgICBjb25zdCBpdGVtSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAvLyBUaGUgY29udGVudC10eXBlIGlzIGFzc3VtZWQgdG8gYmUgJ2FwcGxpY2F0aW9uL2pzb24nIGFuZCBub3QgcGFydCBvZlxuICAgICAgLy8gdGhlIGN1cnJlbnQgc3BlYyBmb3IgdHJhbnNhY3Rpb24gaXRlbXMsIHNvIHdlIGRvbid0IGJsb2F0IHRoZSByZXF1ZXN0XG4gICAgICAvLyBib2R5IHdpdGggaXQuXG4gICAgICAvL1xuICAgICAgLy8gY29udGVudF90eXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAvL1xuICAgICAgLy8gVGhlIGxlbmd0aCBpcyBvcHRpb25hbC4gSXQgbXVzdCBiZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGluIHJlcS5Cb2R5XG4gICAgICAvLyBlbmNvZGVkIGFzIFVURi04LiBTaW5jZSB0aGUgc2VydmVyIGNhbiBmaWd1cmUgdGhpcyBvdXQgYW5kIHdvdWxkXG4gICAgICAvLyBvdGhlcndpc2UgcmVmdXNlIGV2ZW50cyB0aGF0IHJlcG9ydCB0aGUgbGVuZ3RoIGluY29ycmVjdGx5LCB3ZSBkZWNpZGVkXG4gICAgICAvLyBub3QgdG8gc2VuZCB0aGUgbGVuZ3RoIHRvIGF2b2lkIHByb2JsZW1zIHJlbGF0ZWQgdG8gcmVwb3J0aW5nIHRoZSB3cm9uZ1xuICAgICAgLy8gc2l6ZSBhbmQgdG8gcmVkdWNlIHJlcXVlc3QgYm9keSBzaXplLlxuICAgICAgLy9cbiAgICAgIC8vIGxlbmd0aDogbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlcS5ib2R5KS5sZW5ndGgsXG4gICAgfSk7XG4gICAgLy8gVGhlIHRyYWlsaW5nIG5ld2xpbmUgaXMgb3B0aW9uYWwuIFdlIGludGVudGlvbmFsbHkgZG9uJ3Qgc2VuZCBpdCB0byBhdm9pZFxuICAgIC8vIHNlbmRpbmcgdW5uZWNlc3NhcnkgYnl0ZXMuXG4gICAgLy9cbiAgICAvLyBjb25zdCBlbnZlbG9wZSA9IGAke2VudmVsb3BlSGVhZGVyc31cXG4ke2l0ZW1IZWFkZXJzfVxcbiR7cmVxLmJvZHl9XFxuYDtcbiAgICBjb25zdCBlbnZlbG9wZSA9IGAke2VudmVsb3BlSGVhZGVyc31cXG4ke2l0ZW1IZWFkZXJzfVxcbiR7cmVxLmJvZHl9YDtcbiAgICByZXEuYm9keSA9IGVudmVsb3BlO1xuICB9XG5cbiAgcmV0dXJuIHJlcTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/request.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/sdk.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/core/dist/sdk.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\n\n\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    utils_1.logger.enable();\n  }\n\n  var hub = hub_1.getCurrentHub();\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}\n\nexports.initAndBind = initAndBind;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc2RrLnRzP2Q4YWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBO0FBS0E7Ozs7Ozs7OztBQU9BLFNBQWdCLFdBQWhCLENBQWlFLFdBQWpFLEVBQWlHLE9BQWpHLEVBQTJHO0FBQ3pHLE1BQUksT0FBTyxDQUFDLEtBQVIsS0FBa0IsSUFBdEIsRUFBNEI7QUFDMUIsbUJBQU8sTUFBUDtBQUNEOztBQUNELE1BQU0sR0FBRyxHQUFHLHFCQUFaO0FBQ0EsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFKLENBQWdCLE9BQWhCLENBQWY7QUFDQSxLQUFHLENBQUMsVUFBSixDQUFlLE1BQWY7QUFDRDs7QUFQRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZGlzdC9zZGsuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgQ2xpZW50LCBPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIEEgY2xhc3Mgb2JqZWN0IHRoYXQgY2FuIGluc3RhbnRpYXRlIENsaWVudCBvYmplY3RzLiAqL1xuZXhwb3J0IHR5cGUgQ2xpZW50Q2xhc3M8RiBleHRlbmRzIENsaWVudCwgTyBleHRlbmRzIE9wdGlvbnM+ID0gbmV3IChvcHRpb25zOiBPKSA9PiBGO1xuXG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRBbmRCaW5kPEYgZXh0ZW5kcyBDbGllbnQsIE8gZXh0ZW5kcyBPcHRpb25zPihjbGllbnRDbGFzczogQ2xpZW50Q2xhc3M8RiwgTz4sIG9wdGlvbnM6IE8pOiB2b2lkIHtcbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBsb2dnZXIuZW5hYmxlKCk7XG4gIH1cbiAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICBjb25zdCBjbGllbnQgPSBuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucyk7XG4gIGh1Yi5iaW5kQ2xpZW50KGNsaWVudCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/sdk.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/dist/transports/noop.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/dist/transports/noop.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** Noop transport */\n\n\nvar NoopTransport =\n/** @class */\nfunction () {\n  function NoopTransport() {}\n  /**\n   * @inheritDoc\n   */\n\n\n  NoopTransport.prototype.sendEvent = function (_) {\n    return utils_1.SyncPromise.resolve({\n      reason: \"NoopTransport: Event has been skipped because no Dsn is configured.\",\n      status: types_1.Status.Skipped\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  NoopTransport.prototype.close = function (_) {\n    return utils_1.SyncPromise.resolve(true);\n  };\n\n  return NoopTransport;\n}();\n\nexports.NoopTransport = NoopTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdHJhbnNwb3J0cy9ub29wLnRzPzhmZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBO0FBRUE7OztBQUNBO0FBQUE7QUFBQTtBQUFBLDRCQWlCQztBQWhCQzs7Ozs7QUFHTyxzQ0FBUCxVQUFpQixDQUFqQixFQUF5QjtBQUN2QixXQUFPLG9CQUFZLE9BQVosQ0FBb0I7QUFDekIsWUFBTSxFQUFFLHFFQURpQjtBQUV6QixZQUFNLEVBQUUsZUFBTztBQUZVLEtBQXBCLENBQVA7QUFJRCxHQUxNO0FBT1A7Ozs7O0FBR08sa0NBQVAsVUFBYSxDQUFiLEVBQXVCO0FBQ3JCLFdBQU8sb0JBQVksT0FBWixDQUFvQixJQUFwQixDQUFQO0FBQ0QsR0FGTTs7QUFHVDtBQUFDLENBakJEOztBQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9kaXN0L3RyYW5zcG9ydHMvbm9vcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50LCBSZXNwb25zZSwgU3RhdHVzLCBUcmFuc3BvcnQgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKiBOb29wIHRyYW5zcG9ydCAqL1xuZXhwb3J0IGNsYXNzIE5vb3BUcmFuc3BvcnQgaW1wbGVtZW50cyBUcmFuc3BvcnQge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZW5kRXZlbnQoXzogRXZlbnQpOiBQcm9taXNlTGlrZTxSZXNwb25zZT4ge1xuICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIHJlYXNvbjogYE5vb3BUcmFuc3BvcnQ6IEV2ZW50IGhhcyBiZWVuIHNraXBwZWQgYmVjYXVzZSBubyBEc24gaXMgY29uZmlndXJlZC5gLFxuICAgICAgc3RhdHVzOiBTdGF0dXMuU2tpcHBlZCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNsb3NlKF8/OiBudW1iZXIpOiBQcm9taXNlTGlrZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/dist/transports/noop.js\n");

/***/ }),

/***/ "./node_modules/@sentry/hub/dist/hub.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/hub/dist/hub.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar scope_1 = __webpack_require__(/*! ./scope */ \"./node_modules/@sentry/hub/dist/scope.js\");\n\nvar session_1 = __webpack_require__(/*! ./session */ \"./node_modules/@sentry/hub/dist/session.js\");\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\n\n\nexports.API_VERSION = 3;\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\n\nvar DEFAULT_BREADCRUMBS = 100;\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\n\nvar MAX_BREADCRUMBS = 100;\n/**\n * @inheritDoc\n */\n\nvar Hub =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client, scope, _version) {\n    if (scope === void 0) {\n      scope = new scope_1.Scope();\n    }\n\n    if (_version === void 0) {\n      _version = exports.API_VERSION;\n    }\n\n    this._version = _version;\n    /** Is a {@link Layer}[] containing the client and scope */\n\n    this._stack = [{}];\n    this.getStackTop().scope = scope;\n    this.bindClient(client);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.isOlderThan = function (version) {\n    return this._version < version;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.bindClient = function (client) {\n    var top = this.getStackTop();\n    top.client = client;\n\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.pushScope = function () {\n    // We want to clone the content of prev scope\n    var scope = scope_1.Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope: scope\n    });\n    return scope;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.popScope = function () {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.withScope = function (callback) {\n    var scope = this.pushScope();\n\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.getClient = function () {\n    return this.getStackTop().client;\n  };\n  /** Returns the scope of the top stack. */\n\n\n  Hub.prototype.getScope = function () {\n    return this.getStackTop().scope;\n  };\n  /** Returns the scope stack for domains or the process. */\n\n\n  Hub.prototype.getStack = function () {\n    return this._stack;\n  };\n  /** Returns the topmost scope layer in the order domain > local > process. */\n\n\n  Hub.prototype.getStackTop = function () {\n    return this._stack[this._stack.length - 1];\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  Hub.prototype.captureException = function (exception, hint) {\n    var eventId = this._lastEventId = utils_1.uuid4();\n    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n\n    if (!hint) {\n      var syntheticException = void 0;\n\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception;\n      }\n\n      finalHint = {\n        originalException: exception,\n        syntheticException: syntheticException\n      };\n    }\n\n    this._invokeClient('captureException', exception, tslib_1.__assign(tslib_1.__assign({}, finalHint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.captureMessage = function (message, level, hint) {\n    var eventId = this._lastEventId = utils_1.uuid4();\n    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n\n    if (!hint) {\n      var syntheticException = void 0;\n\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception;\n      }\n\n      finalHint = {\n        originalException: message,\n        syntheticException: syntheticException\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, tslib_1.__assign(tslib_1.__assign({}, finalHint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.captureEvent = function (event, hint) {\n    var eventId = this._lastEventId = utils_1.uuid4();\n\n    this._invokeClient('captureEvent', event, tslib_1.__assign(tslib_1.__assign({}, hint), {\n      event_id: eventId\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.lastEventId = function () {\n    return this._lastEventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (!scope || !client) return; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    var _b = client.getOptions && client.getOptions() || {},\n        _c = _b.beforeBreadcrumb,\n        beforeBreadcrumb = _c === void 0 ? null : _c,\n        _d = _b.maxBreadcrumbs,\n        maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;\n\n    if (maxBreadcrumbs <= 0) return;\n    var timestamp = utils_1.dateTimestampInSeconds();\n\n    var mergedBreadcrumb = tslib_1.__assign({\n      timestamp: timestamp\n    }, breadcrumb);\n\n    var finalBreadcrumb = beforeBreadcrumb ? utils_1.consoleSandbox(function () {\n      return beforeBreadcrumb(mergedBreadcrumb, hint);\n    }) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setUser = function (user) {\n    var scope = this.getScope();\n    if (scope) scope.setUser(user);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setTags = function (tags) {\n    var scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setExtras = function (extras) {\n    var scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setTag = function (key, value) {\n    var scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.setExtra = function (key, extra) {\n    var scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype.setContext = function (name, context) {\n    var scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.configureScope = function (callback) {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (scope && client) {\n      callback(scope);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.run = function (callback) {\n    var oldHub = makeMain(this);\n\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.getIntegration = function (integration) {\n    var client = this.getClient();\n    if (!client) return null;\n\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      utils_1.logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Hub\");\n      return null;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startSpan = function (context) {\n    return this._callExtensionMethod('startSpan', context);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startTransaction = function (context, customSamplingContext) {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.traceHeaders = function () {\n    return this._callExtensionMethod('traceHeaders');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.startSession = function (context) {\n    // End existing session if there's one\n    this.endSession();\n\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    var _b = client && client.getOptions() || {},\n        release = _b.release,\n        environment = _b.environment;\n\n    var session = new session_1.Session(tslib_1.__assign(tslib_1.__assign({\n      release: release,\n      environment: environment\n    }, scope && {\n      user: scope.getUser()\n    }), context));\n\n    if (scope) {\n      scope.setSession(session);\n    }\n\n    return session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Hub.prototype.endSession = function () {\n    var _a = this.getStackTop(),\n        scope = _a.scope,\n        client = _a.client;\n\n    if (!scope) return;\n    var session = scope.getSession && scope.getSession();\n\n    if (session) {\n      session.close();\n\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n\n      scope.setSession();\n    }\n  };\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype._invokeClient = function (method) {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var _b = this.getStackTop(),\n        scope = _b.scope,\n        client = _b.client;\n\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (_a = client)[method].apply(_a, tslib_1.__spread(args, [scope]));\n    }\n  };\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Hub.prototype._callExtensionMethod = function (method) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var carrier = getMainCarrier();\n    var sentry = carrier.__SENTRY__;\n\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n\n    utils_1.logger.warn(\"Extension method \" + method + \" couldn't be found, doing nothing.\");\n  };\n\n  return Hub;\n}();\n\nexports.Hub = Hub;\n/** Returns the global shim registry. */\n\nfunction getMainCarrier() {\n  var carrier = utils_1.getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return carrier;\n}\n\nexports.getMainCarrier = getMainCarrier;\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\n\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\nexports.makeMain = makeMain;\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\n\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier(); // If there's no hub, or its an old API, assign a new one\n\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(exports.API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  } // Prefer domains over global if they are there (applicable only to Node environment)\n\n\n  if (utils_1.isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  } // Return hub that lives on a global object\n\n\n  return getHubFromCarrier(registry);\n}\n\nexports.getCurrentHub = getCurrentHub;\n/**\n * Returns the active domain, if one exists\n *\n * @returns The domain, or undefined if there is no active domain\n */\n\nfunction getActiveDomain() {\n  var sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\nexports.getActiveDomain = getActiveDomain;\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\n\nfunction getHubFromActiveDomain(registry) {\n  try {\n    var activeDomain = getActiveDomain(); // If there's no active domain, just return global hub\n\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    } // If there's no hub on current domain, or it's an old API, assign a new one\n\n\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(exports.API_VERSION)) {\n      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, scope_1.Scope.clone(registryHubTopStack.scope)));\n    } // Return hub that lives on a domain\n\n\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\n\n\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\n\n\nfunction getHubFromCarrier(carrier) {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\nexports.getHubFromCarrier = getHubFromCarrier;\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\n\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n\nexports.setHubOnCarrier = setHubOnCarrier;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/hub/dist/hub.js\n");

/***/ }),

/***/ "./node_modules/@sentry/hub/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/hub/dist/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar scope_1 = __webpack_require__(/*! ./scope */ \"./node_modules/@sentry/hub/dist/scope.js\");\n\nexports.addGlobalEventProcessor = scope_1.addGlobalEventProcessor;\nexports.Scope = scope_1.Scope;\n\nvar session_1 = __webpack_require__(/*! ./session */ \"./node_modules/@sentry/hub/dist/session.js\");\n\nexports.Session = session_1.Session;\n\nvar hub_1 = __webpack_require__(/*! ./hub */ \"./node_modules/@sentry/hub/dist/hub.js\");\n\nexports.getActiveDomain = hub_1.getActiveDomain;\nexports.getCurrentHub = hub_1.getCurrentHub;\nexports.getHubFromCarrier = hub_1.getHubFromCarrier;\nexports.getMainCarrier = hub_1.getMainCarrier;\nexports.Hub = hub_1.Hub;\nexports.makeMain = hub_1.makeMain;\nexports.setHubOnCarrier = hub_1.setHubOnCarrier;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0E7O0FBQVM7QUFBeUI7O0FBQ2xDOztBQUFTOztBQUNUOztBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaHViL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBDYXJyaWVyLCBEb21haW5Bc0NhcnJpZXIsIExheWVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmV4cG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBTY29wZSB9IGZyb20gJy4vc2NvcGUnO1xuZXhwb3J0IHsgU2Vzc2lvbiB9IGZyb20gJy4vc2Vzc2lvbic7XG5leHBvcnQge1xuICBnZXRBY3RpdmVEb21haW4sXG4gIGdldEN1cnJlbnRIdWIsXG4gIGdldEh1YkZyb21DYXJyaWVyLFxuICBnZXRNYWluQ2FycmllcixcbiAgSHViLFxuICBtYWtlTWFpbixcbiAgc2V0SHViT25DYXJyaWVyLFxufSBmcm9tICcuL2h1Yic7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/hub/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/hub/dist/scope.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/hub/dist/scope.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.concat */ \"./node_modules/core-js/modules/es.array.concat.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.keys */ \"./node_modules/core-js/modules/es.object.keys.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n\n    this._breadcrumbs = [];\n    /** User */\n\n    this._user = {};\n    /** Tags */\n\n    this._tags = {};\n    /** Extra */\n\n    this._extra = {};\n    /** Contexts */\n\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = tslib_1.__spread(scope._breadcrumbs);\n      newScope._tags = tslib_1.__assign({}, scope._tags);\n      newScope._extra = tslib_1.__assign({}, scope._extra);\n      newScope._contexts = tslib_1.__assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = tslib_1.__spread(scope._eventProcessors);\n    }\n\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTags = function (tags) {\n    this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), tags);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n\n    this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), extras);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n\n    this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n\n\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d; // often, this span will be a transaction, but it's not guaranteed to be\n\n\n    var span = this.getSpan(); // try it the new way first\n\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    } // fallback to the old way (known bug: this only finds transactions with sampled = true)\n\n\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    } // neither way found a transaction\n\n\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), captureContext._tags);\n      this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), captureContext._extra);\n      this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), captureContext._contexts);\n\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (utils_1.isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), captureContext.tags);\n      this._extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), captureContext.extra);\n      this._contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), captureContext.contexts);\n\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = tslib_1.__assign({\n      timestamp: utils_1.dateTimestampInSeconds()\n    }, breadcrumb);\n\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? tslib_1.__spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : tslib_1.__spread(this._breadcrumbs, [mergedBreadcrumb]);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n\n\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = tslib_1.__assign(tslib_1.__assign({}, this._extra), event.extra);\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = tslib_1.__assign(tslib_1.__assign({}, this._tags), event.tags);\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = tslib_1.__assign(tslib_1.__assign({}, this._user), event.user);\n    }\n\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = tslib_1.__assign(tslib_1.__assign({}, this._contexts), event.contexts);\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    } // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n\n\n    if (this._span) {\n      event.contexts = tslib_1.__assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n\n      if (transactionName) {\n        event.tags = tslib_1.__assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = tslib_1.__spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(tslib_1.__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return new utils_1.SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(tslib_1.__assign({}, event), hint);\n\n        if (utils_1.isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n\n\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this;\n\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(function () {\n        _this._scopeListeners.forEach(function (callback) {\n          callback(_this);\n        });\n\n        _this._notifyingListeners = false;\n      });\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n\n  return Scope;\n}();\n\nexports.Scope = Scope;\n/**\n * Retruns the global event processors.\n */\n\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = utils_1.getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\n\nexports.addGlobalEventProcessor = addGlobalEventProcessor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/hub/dist/scope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/hub/dist/session.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/hub/dist/session.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/web.url.to-json */ \"./node_modules/core-js/modules/web.url.to-json.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/**\n * @inheritdoc\n */\n\n\nvar Session =\n/** @class */\nfunction () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = utils_1.uuid4();\n    this.timestamp = Date.now();\n    this.started = Date.now();\n    this.duration = 0;\n    this.status = types_1.SessionStatus.Ok;\n\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n\n\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : utils_1.uuid4();\n    }\n\n    if (context.did) {\n      this.did = \"\" + context.did;\n    }\n\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n\n    if (context.release) {\n      this.release = context.release;\n    }\n\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === types_1.SessionStatus.Ok) {\n      this.update({\n        status: types_1.SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.toJSON = function () {\n    return utils_1.dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: utils_1.dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n\n  return Session;\n}();\n\nexports.Session = Session;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc2Vzc2lvbi50cz9kMWU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBO0FBRUE7Ozs7O0FBR0E7QUFBQTtBQUFBO0FBYUUsbUJBQVksT0FBWixFQUFnRTtBQVh6RCxrQkFBaUIsQ0FBakI7QUFFQSxlQUFjLGVBQWQ7QUFFQSxxQkFBb0IsSUFBSSxDQUFDLEdBQUwsRUFBcEI7QUFDQSxtQkFBa0IsSUFBSSxDQUFDLEdBQUwsRUFBbEI7QUFDQSxvQkFBbUIsQ0FBbkI7QUFDQSxrQkFBd0Isc0JBQWMsRUFBdEM7O0FBS0wsUUFBSSxPQUFKLEVBQWE7QUFDWCxXQUFLLE1BQUwsQ0FBWSxPQUFaO0FBQ0Q7QUFDRjtBQUVEO0FBQ0E7OztBQUNBLHVDQUFPLE9BQVAsRUFBbUM7QUFBNUI7QUFBQTtBQUE0Qjs7QUFDakMsUUFBSSxPQUFPLENBQUMsSUFBWixFQUFrQjtBQUNoQixVQUFJLE9BQU8sQ0FBQyxJQUFSLENBQWEsVUFBakIsRUFBNkI7QUFDM0IsYUFBSyxTQUFMLEdBQWlCLE9BQU8sQ0FBQyxJQUFSLENBQWEsVUFBOUI7QUFDRDs7QUFFRCxVQUFJLENBQUMsT0FBTyxDQUFDLEdBQWIsRUFBa0I7QUFDaEIsYUFBSyxHQUFMLEdBQVcsT0FBTyxDQUFDLElBQVIsQ0FBYSxFQUFiLElBQW1CLE9BQU8sQ0FBQyxJQUFSLENBQWEsS0FBaEMsSUFBeUMsT0FBTyxDQUFDLElBQVIsQ0FBYSxRQUFqRTtBQUNEO0FBQ0Y7O0FBRUQsU0FBSyxTQUFMLEdBQWlCLE9BQU8sQ0FBQyxTQUFSLElBQXFCLElBQUksQ0FBQyxHQUFMLEVBQXRDOztBQUVBLFFBQUksT0FBTyxDQUFDLEdBQVosRUFBaUI7QUFDZjtBQUNBLFdBQUssR0FBTCxHQUFXLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWixLQUF1QixFQUF2QixHQUE0QixPQUFPLENBQUMsR0FBcEMsR0FBMEMsZUFBckQ7QUFDRDs7QUFDRCxRQUFJLE9BQU8sQ0FBQyxHQUFaLEVBQWlCO0FBQ2YsV0FBSyxHQUFMLEdBQVcsS0FBRyxPQUFPLENBQUMsR0FBdEI7QUFDRDs7QUFDRCxRQUFJLE9BQU8sT0FBTyxDQUFDLE9BQWYsS0FBMkIsUUFBL0IsRUFBeUM7QUFDdkMsV0FBSyxPQUFMLEdBQWUsT0FBTyxDQUFDLE9BQXZCO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPLE9BQU8sQ0FBQyxRQUFmLEtBQTRCLFFBQWhDLEVBQTBDO0FBQ3hDLFdBQUssUUFBTCxHQUFnQixPQUFPLENBQUMsUUFBeEI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLLFFBQUwsR0FBZ0IsS0FBSyxTQUFMLEdBQWlCLEtBQUssT0FBdEM7QUFDRDs7QUFDRCxRQUFJLE9BQU8sQ0FBQyxPQUFaLEVBQXFCO0FBQ25CLFdBQUssT0FBTCxHQUFlLE9BQU8sQ0FBQyxPQUF2QjtBQUNEOztBQUNELFFBQUksT0FBTyxDQUFDLFdBQVosRUFBeUI7QUFDdkIsV0FBSyxXQUFMLEdBQW1CLE9BQU8sQ0FBQyxXQUEzQjtBQUNEOztBQUNELFFBQUksT0FBTyxDQUFDLFNBQVosRUFBdUI7QUFDckIsV0FBSyxTQUFMLEdBQWlCLE9BQU8sQ0FBQyxTQUF6QjtBQUNEOztBQUNELFFBQUksT0FBTyxDQUFDLFNBQVosRUFBdUI7QUFDckIsV0FBSyxTQUFMLEdBQWlCLE9BQU8sQ0FBQyxTQUF6QjtBQUNEOztBQUNELFFBQUksT0FBTyxPQUFPLENBQUMsTUFBZixLQUEwQixRQUE5QixFQUF3QztBQUN0QyxXQUFLLE1BQUwsR0FBYyxPQUFPLENBQUMsTUFBdEI7QUFDRDs7QUFDRCxRQUFJLE9BQU8sQ0FBQyxNQUFaLEVBQW9CO0FBQ2xCLFdBQUssTUFBTCxHQUFjLE9BQU8sQ0FBQyxNQUF0QjtBQUNEO0FBQ0YsR0E5Q0Q7QUFnREE7OztBQUNBLHNDQUFNLE1BQU4sRUFBdUQ7QUFDckQsUUFBSSxNQUFKLEVBQVk7QUFDVixXQUFLLE1BQUwsQ0FBWTtBQUFFLGNBQU07QUFBUixPQUFaO0FBQ0QsS0FGRCxNQUVPLElBQUksS0FBSyxNQUFMLEtBQWdCLHNCQUFjLEVBQWxDLEVBQXNDO0FBQzNDLFdBQUssTUFBTCxDQUFZO0FBQUUsY0FBTSxFQUFFLHNCQUFjO0FBQXhCLE9BQVo7QUFDRCxLQUZNLE1BRUE7QUFDTCxXQUFLLE1BQUw7QUFDRDtBQUNGLEdBUkQ7QUFVQTs7O0FBQ0E7QUFnQkUsV0FBTywwQkFBa0I7QUFDdkIsU0FBRyxFQUFFLEtBQUcsS0FBSyxHQURVO0FBRXZCLFVBQUksRUFBRSxJQUZpQjtBQUd2QixhQUFPLEVBQUUsSUFBSSxJQUFKLENBQVMsS0FBSyxPQUFkLEVBQXVCLFdBQXZCLEVBSGM7QUFJdkIsZUFBUyxFQUFFLElBQUksSUFBSixDQUFTLEtBQUssU0FBZCxFQUF5QixXQUF6QixFQUpZO0FBS3ZCLFlBQU0sRUFBRSxLQUFLLE1BTFU7QUFNdkIsWUFBTSxFQUFFLEtBQUssTUFOVTtBQU92QixTQUFHLEVBQUUsT0FBTyxLQUFLLEdBQVosS0FBb0IsUUFBcEIsSUFBZ0MsT0FBTyxLQUFLLEdBQVosS0FBb0IsUUFBcEQsR0FBK0QsS0FBRyxLQUFLLEdBQXZFLEdBQStFLFNBUDdEO0FBUXZCLGNBQVEsRUFBRSxLQUFLLFFBUlE7QUFTdkIsV0FBSyxFQUFFLDBCQUFrQjtBQUN2QixlQUFPLEVBQUUsS0FBSyxPQURTO0FBRXZCLG1CQUFXLEVBQUUsS0FBSyxXQUZLO0FBR3ZCLGtCQUFVLEVBQUUsS0FBSyxTQUhNO0FBSXZCLGtCQUFVLEVBQUUsS0FBSztBQUpNLE9BQWxCO0FBVGdCLEtBQWxCLENBQVA7QUFnQkQsR0FoQ0Q7O0FBaUNGO0FBQUMsQ0FsSEQ7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9odWIvZGlzdC9zZXNzaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vzc2lvbiBhcyBTZXNzaW9uSW50ZXJmYWNlLCBTZXNzaW9uQ29udGV4dCwgU2Vzc2lvblN0YXR1cyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZHJvcFVuZGVmaW5lZEtleXMsIHV1aWQ0IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQGluaGVyaXRkb2NcbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb24gaW1wbGVtZW50cyBTZXNzaW9uSW50ZXJmYWNlIHtcbiAgcHVibGljIHVzZXJBZ2VudD86IHN0cmluZztcbiAgcHVibGljIGVycm9yczogbnVtYmVyID0gMDtcbiAgcHVibGljIHJlbGVhc2U/OiBzdHJpbmc7XG4gIHB1YmxpYyBzaWQ6IHN0cmluZyA9IHV1aWQ0KCk7XG4gIHB1YmxpYyBkaWQ/OiBzdHJpbmc7XG4gIHB1YmxpYyB0aW1lc3RhbXA6IG51bWJlciA9IERhdGUubm93KCk7XG4gIHB1YmxpYyBzdGFydGVkOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICBwdWJsaWMgZHVyYXRpb246IG51bWJlciA9IDA7XG4gIHB1YmxpYyBzdGF0dXM6IFNlc3Npb25TdGF0dXMgPSBTZXNzaW9uU3RhdHVzLk9rO1xuICBwdWJsaWMgZW52aXJvbm1lbnQ/OiBzdHJpbmc7XG4gIHB1YmxpYyBpcEFkZHJlc3M/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29udGV4dD86IE9taXQ8U2Vzc2lvbkNvbnRleHQsICdzdGFydGVkJyB8ICdzdGF0dXMnPikge1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICB0aGlzLnVwZGF0ZShjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKiogSlNEb2MgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgdXBkYXRlKGNvbnRleHQ6IFNlc3Npb25Db250ZXh0ID0ge30pOiB2b2lkIHtcbiAgICBpZiAoY29udGV4dC51c2VyKSB7XG4gICAgICBpZiAoY29udGV4dC51c2VyLmlwX2FkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5pcEFkZHJlc3MgPSBjb250ZXh0LnVzZXIuaXBfYWRkcmVzcztcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0LmRpZCkge1xuICAgICAgICB0aGlzLmRpZCA9IGNvbnRleHQudXNlci5pZCB8fCBjb250ZXh0LnVzZXIuZW1haWwgfHwgY29udGV4dC51c2VyLnVzZXJuYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGltZXN0YW1wID0gY29udGV4dC50aW1lc3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuICAgIGlmIChjb250ZXh0LnNpZCkge1xuICAgICAgLy8gR29vZCBlbm91Z2ggdXVpZCB2YWxpZGF0aW9uLiDigJQgS2FtaWxcbiAgICAgIHRoaXMuc2lkID0gY29udGV4dC5zaWQubGVuZ3RoID09PSAzMiA/IGNvbnRleHQuc2lkIDogdXVpZDQoKTtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQuZGlkKSB7XG4gICAgICB0aGlzLmRpZCA9IGAke2NvbnRleHQuZGlkfWA7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29udGV4dC5zdGFydGVkID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5zdGFydGVkID0gY29udGV4dC5zdGFydGVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRleHQuZHVyYXRpb24gPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmR1cmF0aW9uID0gY29udGV4dC5kdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMudGltZXN0YW1wIC0gdGhpcy5zdGFydGVkO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5yZWxlYXNlKSB7XG4gICAgICB0aGlzLnJlbGVhc2UgPSBjb250ZXh0LnJlbGVhc2U7XG4gICAgfVxuICAgIGlmIChjb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICB0aGlzLmVudmlyb25tZW50ID0gY29udGV4dC5lbnZpcm9ubWVudDtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQuaXBBZGRyZXNzKSB7XG4gICAgICB0aGlzLmlwQWRkcmVzcyA9IGNvbnRleHQuaXBBZGRyZXNzO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC51c2VyQWdlbnQpIHtcbiAgICAgIHRoaXMudXNlckFnZW50ID0gY29udGV4dC51c2VyQWdlbnQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29udGV4dC5lcnJvcnMgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5zdGF0dXMpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gY29udGV4dC5zdGF0dXM7XG4gICAgfVxuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIGNsb3NlKHN0YXR1cz86IEV4Y2x1ZGU8U2Vzc2lvblN0YXR1cywgU2Vzc2lvblN0YXR1cy5Paz4pOiB2b2lkIHtcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICB0aGlzLnVwZGF0ZSh7IHN0YXR1cyB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdHVzID09PSBTZXNzaW9uU3RhdHVzLk9rKSB7XG4gICAgICB0aGlzLnVwZGF0ZSh7IHN0YXR1czogU2Vzc2lvblN0YXR1cy5FeGl0ZWQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIHRvSlNPTigpOiB7XG4gICAgaW5pdDogYm9vbGVhbjtcbiAgICBzaWQ6IHN0cmluZztcbiAgICBkaWQ/OiBzdHJpbmc7XG4gICAgdGltZXN0YW1wOiBzdHJpbmc7XG4gICAgc3RhcnRlZDogc3RyaW5nO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgc3RhdHVzOiBTZXNzaW9uU3RhdHVzO1xuICAgIGVycm9yczogbnVtYmVyO1xuICAgIGF0dHJzPzoge1xuICAgICAgcmVsZWFzZT86IHN0cmluZztcbiAgICAgIGVudmlyb25tZW50Pzogc3RyaW5nO1xuICAgICAgdXNlcl9hZ2VudD86IHN0cmluZztcbiAgICAgIGlwX2FkZHJlc3M/OiBzdHJpbmc7XG4gICAgfTtcbiAgfSB7XG4gICAgcmV0dXJuIGRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgIHNpZDogYCR7dGhpcy5zaWR9YCxcbiAgICAgIGluaXQ6IHRydWUsXG4gICAgICBzdGFydGVkOiBuZXcgRGF0ZSh0aGlzLnN0YXJ0ZWQpLnRvSVNPU3RyaW5nKCksXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKHRoaXMudGltZXN0YW1wKS50b0lTT1N0cmluZygpLFxuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIGVycm9yczogdGhpcy5lcnJvcnMsXG4gICAgICBkaWQ6IHR5cGVvZiB0aGlzLmRpZCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHRoaXMuZGlkID09PSAnc3RyaW5nJyA/IGAke3RoaXMuZGlkfWAgOiB1bmRlZmluZWQsXG4gICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgIGF0dHJzOiBkcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgIHJlbGVhc2U6IHRoaXMucmVsZWFzZSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuZW52aXJvbm1lbnQsXG4gICAgICAgIGlwX2FkZHJlc3M6IHRoaXMuaXBBZGRyZXNzLFxuICAgICAgICB1c2VyX2FnZW50OiB0aGlzLnVzZXJBZ2VudCxcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/hub/dist/session.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/angular.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/angular.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\"); // See https://github.com/angular/angular.js/blob/v1.4.7/src/minErr.js\n\n\nvar angularPattern = /^\\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\\] (.*?)\\n?(\\S+)$/;\n/**\n * AngularJS integration\n *\n * Provides an $exceptionHandler for AngularJS\n */\n\nvar Angular =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Angular(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Angular.id; // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n\n    this._angular = options.angular || utils_1.getGlobalObject().angular;\n\n    if (!this._angular) {\n      utils_1.logger.error('AngularIntegration is missing an Angular instance');\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n    this._module = this._angular.module(Angular.moduleName, []);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Angular.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    if (!this._module) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    this._module.config(['$provide', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function ($provide) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      $provide.decorator('$exceptionHandler', ['$delegate', _this._$exceptionHandlerDecorator.bind(_this)]);\n    }]);\n  };\n  /**\n   * Angular's exceptionHandler for Sentry integration\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Angular.prototype._$exceptionHandlerDecorator = function ($delegate) {\n    var _this = this;\n\n    return function (exception, cause) {\n      var hub = _this._getCurrentHub && _this._getCurrentHub();\n\n      if (hub && hub.getIntegration(Angular)) {\n        hub.withScope(function (scope) {\n          if (cause) {\n            scope.setExtra('cause', cause);\n          }\n\n          scope.addEventProcessor(function (event) {\n            var ex = event.exception && event.exception.values && event.exception.values[0];\n\n            if (ex) {\n              var matches = angularPattern.exec(ex.value || '');\n\n              if (matches) {\n                // This type now becomes something like: $rootScope:inprog\n                ex.type = matches[1];\n                ex.value = matches[2];\n                event.message = ex.type + \": \" + ex.value; // auto set a new tag specifically for the angular error url\n\n                event.extra = tslib_1.__assign(tslib_1.__assign({}, event.extra), {\n                  angularDocs: matches[3].substr(0, 250)\n                });\n              }\n            }\n\n            return event;\n          });\n          hub.captureException(exception);\n        });\n      }\n\n      $delegate(exception, cause);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Angular.id = 'AngularJS';\n  /**\n   * moduleName used in Angular's DI resolution algorithm\n   */\n\n  Angular.moduleName = 'ngSentry';\n  return Angular;\n}();\n\nexports.Angular = Angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvYW5ndWxhci50cz9hZWNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0EscUcsQ0FFQTs7O0FBQ0EsSUFBTSxjQUFjLEdBQUcsNERBQXZCO0FBRUE7Ozs7OztBQUtBO0FBQUE7QUFBQTtBQWlDRTs7O0FBR0E7QUFDQSxtQkFBbUIsT0FBbkIsRUFBa0Q7QUFBL0I7QUFBQTtBQUErQjtBQTFCbEQ7Ozs7O0FBR08sZ0JBQWUsT0FBTyxDQUFDLEVBQXZCLENBdUIyQyxDQUNoRDs7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsT0FBTyxDQUFDLE9BQVIsSUFBbUIsMEJBQXVCLE9BQTFEOztBQUVBLFFBQUksQ0FBQyxLQUFLLFFBQVYsRUFBb0I7QUFDbEIscUJBQU8sS0FBUCxDQUFhLG1EQUFiO0FBQ0E7QUFDRCxLQVArQyxDQVNoRDs7O0FBQ0EsU0FBSyxPQUFMLEdBQWUsS0FBSyxRQUFMLENBQWMsTUFBZCxDQUFxQixPQUFPLENBQUMsVUFBN0IsRUFBeUMsRUFBekMsQ0FBZjtBQUNEO0FBRUQ7Ozs7O0FBR08sZ0NBQVAsVUFBaUIsQ0FBakIsRUFBd0QsYUFBeEQsRUFBZ0Y7QUFBaEY7O0FBQ0UsUUFBSSxDQUFDLEtBQUssT0FBVixFQUFtQjtBQUNqQjtBQUNEOztBQUVELFNBQUssY0FBTCxHQUFzQixhQUF0QixDQUw4RSxDQU85RTs7QUFDQSxTQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLENBQ2xCLFVBRGtCLEVBRWxCO0FBQ0EsY0FBQyxRQUFELEVBQWM7QUFDWjtBQUNBLGNBQVEsQ0FBQyxTQUFULENBQW1CLG1CQUFuQixFQUF3QyxDQUFDLFdBQUQsRUFBYyxLQUFJLENBQUMsMkJBQUwsQ0FBaUMsSUFBakMsQ0FBc0MsS0FBdEMsQ0FBZCxDQUF4QztBQUNELEtBTmlCLENBQXBCO0FBUUQsR0FoQk07QUFrQlA7OztBQUdBOzs7QUFDUSxrREFBUixVQUFvQyxTQUFwQyxFQUFrRDtBQUFsRDs7QUFDRSxXQUFPLFVBQUMsU0FBRCxFQUFtQixLQUFuQixFQUFpQztBQUN0QyxVQUFNLEdBQUcsR0FBRyxLQUFJLENBQUMsY0FBTCxJQUF1QixLQUFJLENBQUMsY0FBTCxFQUFuQzs7QUFFQSxVQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBSixDQUFtQixPQUFuQixDQUFYLEVBQXdDO0FBQ3RDLFdBQUcsQ0FBQyxTQUFKLENBQWMsaUJBQUs7QUFDakIsY0FBSSxLQUFKLEVBQVc7QUFDVCxpQkFBSyxDQUFDLFFBQU4sQ0FBZSxPQUFmLEVBQXdCLEtBQXhCO0FBQ0Q7O0FBRUQsZUFBSyxDQUFDLGlCQUFOLENBQXdCLFVBQUMsS0FBRCxFQUFhO0FBQ25DLGdCQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsU0FBTixJQUFtQixLQUFLLENBQUMsU0FBTixDQUFnQixNQUFuQyxJQUE2QyxLQUFLLENBQUMsU0FBTixDQUFnQixNQUFoQixDQUF1QixDQUF2QixDQUF4RDs7QUFFQSxnQkFBSSxFQUFKLEVBQVE7QUFDTixrQkFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLElBQWYsQ0FBb0IsRUFBRSxDQUFDLEtBQUgsSUFBWSxFQUFoQyxDQUFoQjs7QUFFQSxrQkFBSSxPQUFKLEVBQWE7QUFDWDtBQUNBLGtCQUFFLENBQUMsSUFBSCxHQUFVLE9BQU8sQ0FBQyxDQUFELENBQWpCO0FBQ0Esa0JBQUUsQ0FBQyxLQUFILEdBQVcsT0FBTyxDQUFDLENBQUQsQ0FBbEI7QUFDQSxxQkFBSyxDQUFDLE9BQU4sR0FBbUIsRUFBRSxDQUFDLElBQUgsR0FBTyxJQUFQLEdBQVksRUFBRSxDQUFDLEtBQWxDLENBSlcsQ0FLWDs7QUFDQSxxQkFBSyxDQUFDLEtBQU4sR0FBVyxzQ0FDTixLQUFLLENBQUMsS0FEQSxHQUNLO0FBQ2QsNkJBQVcsRUFBRSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsTUFBWCxDQUFrQixDQUFsQixFQUFxQixHQUFyQjtBQURDLGlCQURMLENBQVg7QUFJRDtBQUNGOztBQUVELG1CQUFPLEtBQVA7QUFDRCxXQXBCRDtBQXNCQSxhQUFHLENBQUMsZ0JBQUosQ0FBcUIsU0FBckI7QUFDRCxTQTVCRDtBQTZCRDs7QUFDRCxlQUFTLENBQUMsU0FBRCxFQUFZLEtBQVosQ0FBVDtBQUNELEtBbkNEO0FBb0NELEdBckNPO0FBMUVSOzs7OztBQUdjLGVBQWEsV0FBYjtBQUVkOzs7O0FBR2MsdUJBQXFCLFVBQXJCO0FBd0doQjtBQUFDLENBakhEOztBQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaW50ZWdyYXRpb25zL2Rpc3QvYW5ndWxhci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50LCBFdmVudFByb2Nlc3NvciwgSHViLCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsT2JqZWN0LCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi92MS40Ljcvc3JjL21pbkVyci5qc1xuY29uc3QgYW5ndWxhclBhdHRlcm4gPSAvXlxcWygoPzpbJGEtekEtWjAtOV0rOik/KD86WyRhLXpBLVowLTldKykpXFxdICguKj8pXFxuPyhcXFMrKSQvO1xuXG4vKipcbiAqIEFuZ3VsYXJKUyBpbnRlZ3JhdGlvblxuICpcbiAqIFByb3ZpZGVzIGFuICRleGNlcHRpb25IYW5kbGVyIGZvciBBbmd1bGFySlNcbiAqL1xuZXhwb3J0IGNsYXNzIEFuZ3VsYXIgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0FuZ3VsYXJKUyc7XG5cbiAgLyoqXG4gICAqIG1vZHVsZU5hbWUgdXNlZCBpbiBBbmd1bGFyJ3MgREkgcmVzb2x1dGlvbiBhbGdvcml0aG1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbW9kdWxlTmFtZTogc3RyaW5nID0gJ25nU2VudHJ5JztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBBbmd1bGFyLmlkO1xuXG4gIC8qKlxuICAgKiBBbmd1bGFyJ3MgaW5zdGFuY2VcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHByaXZhdGUgcmVhZG9ubHkgX2FuZ3VsYXI6IGFueTtcblxuICAvKipcbiAgICogbmdTZW50cnkgbW9kdWxlIGluc3RhbmNlXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHJlYWRvbmx5IF9tb2R1bGU6IGFueTtcblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGh1Yi5cbiAgICovXG4gIHByaXZhdGUgX2dldEN1cnJlbnRIdWI/OiAoKSA9PiBIdWI7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogeyBhbmd1bGFyPzogYW55IH0gPSB7fSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICB0aGlzLl9hbmd1bGFyID0gb3B0aW9ucy5hbmd1bGFyIHx8IGdldEdsb2JhbE9iamVjdDxhbnk+KCkuYW5ndWxhcjtcblxuICAgIGlmICghdGhpcy5fYW5ndWxhcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdBbmd1bGFySW50ZWdyYXRpb24gaXMgbWlzc2luZyBhbiBBbmd1bGFyIGluc3RhbmNlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIHRoaXMuX21vZHVsZSA9IHRoaXMuX2FuZ3VsYXIubW9kdWxlKEFuZ3VsYXIubW9kdWxlTmFtZSwgW10pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKF86IChjYWxsYmFjazogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQsIGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fbW9kdWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZ2V0Q3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWI7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgdGhpcy5fbW9kdWxlLmNvbmZpZyhbXG4gICAgICAnJHByb3ZpZGUnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICgkcHJvdmlkZTogYW55KTogdm9pZCA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckZXhjZXB0aW9uSGFuZGxlcicsIFsnJGRlbGVnYXRlJywgdGhpcy5fJGV4Y2VwdGlvbkhhbmRsZXJEZWNvcmF0b3IuYmluZCh0aGlzKV0pO1xuICAgICAgfSxcbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmd1bGFyJ3MgZXhjZXB0aW9uSGFuZGxlciBmb3IgU2VudHJ5IGludGVncmF0aW9uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIF8kZXhjZXB0aW9uSGFuZGxlckRlY29yYXRvcigkZGVsZWdhdGU6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIChleGNlcHRpb246IEVycm9yLCBjYXVzZT86IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgaHViID0gdGhpcy5fZ2V0Q3VycmVudEh1YiAmJiB0aGlzLl9nZXRDdXJyZW50SHViKCk7XG5cbiAgICAgIGlmIChodWIgJiYgaHViLmdldEludGVncmF0aW9uKEFuZ3VsYXIpKSB7XG4gICAgICAgIGh1Yi53aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgICAgICAgIGlmIChjYXVzZSkge1xuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ2NhdXNlJywgY2F1c2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4ID0gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXTtcblxuICAgICAgICAgICAgaWYgKGV4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBhbmd1bGFyUGF0dGVybi5leGVjKGV4LnZhbHVlIHx8ICcnKTtcblxuICAgICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgdHlwZSBub3cgYmVjb21lcyBzb21ldGhpbmcgbGlrZTogJHJvb3RTY29wZTppbnByb2dcbiAgICAgICAgICAgICAgICBleC50eXBlID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgICAgICAgICBleC52YWx1ZSA9IG1hdGNoZXNbMl07XG4gICAgICAgICAgICAgICAgZXZlbnQubWVzc2FnZSA9IGAke2V4LnR5cGV9OiAke2V4LnZhbHVlfWA7XG4gICAgICAgICAgICAgICAgLy8gYXV0byBzZXQgYSBuZXcgdGFnIHNwZWNpZmljYWxseSBmb3IgdGhlIGFuZ3VsYXIgZXJyb3IgdXJsXG4gICAgICAgICAgICAgICAgZXZlbnQuZXh0cmEgPSB7XG4gICAgICAgICAgICAgICAgICAuLi5ldmVudC5leHRyYSxcbiAgICAgICAgICAgICAgICAgIGFuZ3VsYXJEb2NzOiBtYXRjaGVzWzNdLnN1YnN0cigwLCAyNTApLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaHViLmNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAkZGVsZWdhdGUoZXhjZXB0aW9uLCBjYXVzZSk7XG4gICAgfTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/angular.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/captureconsole.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/captureconsole.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.fill */ \"./node_modules/core-js/modules/es.array.fill.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __webpack_require__(/*! @sentry/types */ \"./node_modules/@sentry/types/dist/index.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n\nvar global = utils_1.getGlobalObject();\n/** Send Console API calls as Sentry Events */\n\nvar CaptureConsole =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function CaptureConsole(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = CaptureConsole.id;\n    /**\n     * @inheritDoc\n     */\n\n    this._levels = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  CaptureConsole.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!('console' in global)) {\n      return;\n    }\n\n    this._levels.forEach(function (level) {\n      if (!(level in global.console)) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      utils_1.fill(global.console, level, function (originalConsoleLevel) {\n        return function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var hub = getCurrentHub();\n\n          if (hub.getIntegration(CaptureConsole)) {\n            hub.withScope(function (scope) {\n              scope.setLevel(types_1.Severity.fromString(level));\n              scope.setExtra('arguments', args);\n              scope.addEventProcessor(function (event) {\n                event.logger = 'console';\n                return event;\n              });\n              var message = utils_1.safeJoin(args, ' ');\n\n              if (level === 'assert') {\n                if (args[0] === false) {\n                  message = \"Assertion failed: \" + (utils_1.safeJoin(args.slice(1), ' ') || 'console.assert');\n                  scope.setExtra('arguments', args.slice(1));\n                  hub.captureMessage(message);\n                }\n              } else {\n                hub.captureMessage(message);\n              }\n            });\n          } // this fails for some browsers. :(\n\n\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CaptureConsole.id = 'CaptureConsole';\n  return CaptureConsole;\n}();\n\nexports.CaptureConsole = CaptureConsole;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvY2FwdHVyZWNvbnNvbGUudHM/YzViNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxJQUFNLE1BQU0sR0FBRyx5QkFBZjtBQUVBOztBQUNBO0FBQUE7QUFBQTtBQWdCRTs7O0FBR0EsMEJBQW1CLE9BQW5CLEVBQXNEO0FBQW5DO0FBQUE7QUFBbUM7QUFidEQ7Ozs7O0FBR08sZ0JBQWUsY0FBYyxDQUFDLEVBQTlCO0FBRVA7Ozs7QUFHaUIsbUJBQW9CLENBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsTUFBaEIsRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsUUFBMUMsQ0FBcEI7O0FBTWYsUUFBSSxPQUFPLENBQUMsTUFBWixFQUFvQjtBQUNsQixXQUFLLE9BQUwsR0FBZSxPQUFPLENBQUMsTUFBdkI7QUFDRDtBQUNGO0FBRUQ7Ozs7O0FBR08sdUNBQVAsVUFBaUIsQ0FBakIsRUFBd0QsYUFBeEQsRUFBZ0Y7QUFDOUUsUUFBSSxFQUFFLGFBQWEsTUFBZixDQUFKLEVBQTRCO0FBQzFCO0FBQ0Q7O0FBRUQsU0FBSyxPQUFMLENBQWEsT0FBYixDQUFxQixVQUFDLEtBQUQsRUFBYztBQUNqQyxVQUFJLEVBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFsQixDQUFKLEVBQWdDO0FBQzlCO0FBQ0QsT0FIZ0MsQ0FLakM7OztBQUNBLG1CQUFLLE1BQU0sQ0FBQyxPQUFaLEVBQXFCLEtBQXJCLEVBQTRCLFVBQUMsb0JBQUQsRUFBZ0M7QUFBSztBQUFDOztlQUFBLFUsRUFBQSxxQixFQUFBLEksRUFBYztBQUFkOzs7QUFDaEUsY0FBTSxHQUFHLEdBQUcsYUFBYSxFQUF6Qjs7QUFFQSxjQUFJLEdBQUcsQ0FBQyxjQUFKLENBQW1CLGNBQW5CLENBQUosRUFBd0M7QUFDdEMsZUFBRyxDQUFDLFNBQUosQ0FBYyxpQkFBSztBQUNqQixtQkFBSyxDQUFDLFFBQU4sQ0FBZSxpQkFBUyxVQUFULENBQW9CLEtBQXBCLENBQWY7QUFDQSxtQkFBSyxDQUFDLFFBQU4sQ0FBZSxXQUFmLEVBQTRCLElBQTVCO0FBQ0EsbUJBQUssQ0FBQyxpQkFBTixDQUF3QixpQkFBSztBQUMzQixxQkFBSyxDQUFDLE1BQU4sR0FBZSxTQUFmO0FBQ0EsdUJBQU8sS0FBUDtBQUNELGVBSEQ7QUFLQSxrQkFBSSxPQUFPLEdBQUcsaUJBQVMsSUFBVCxFQUFlLEdBQWYsQ0FBZDs7QUFDQSxrQkFBSSxLQUFLLEtBQUssUUFBZCxFQUF3QjtBQUN0QixvQkFBSSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVksS0FBaEIsRUFBdUI7QUFDckIseUJBQU8sR0FBRyx3QkFBcUIsaUJBQVMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQVQsRUFBd0IsR0FBeEIsS0FBZ0MsZ0JBQXJELENBQVY7QUFDQSx1QkFBSyxDQUFDLFFBQU4sQ0FBZSxXQUFmLEVBQTRCLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxDQUE1QjtBQUNBLHFCQUFHLENBQUMsY0FBSixDQUFtQixPQUFuQjtBQUNEO0FBQ0YsZUFORCxNQU1PO0FBQ0wsbUJBQUcsQ0FBQyxjQUFKLENBQW1CLE9BQW5CO0FBQ0Q7QUFDRixhQWxCRDtBQW1CRCxXQXZCOEQsQ0F5Qi9EOzs7QUFDQSxjQUFJLG9CQUFKLEVBQTBCO0FBQ3hCLG9CQUFRLENBQUMsU0FBVCxDQUFtQixLQUFuQixDQUF5QixJQUF6QixDQUE4QixvQkFBOUIsRUFBb0QsTUFBTSxDQUFDLE9BQTNELEVBQW9FLElBQXBFO0FBQ0Q7QUE1QjhEO0FBNkJoRSxPQTdCRDtBQThCRCxLQXBDRDtBQXFDRCxHQTFDTTtBQTNCUDs7Ozs7QUFHYyxzQkFBYSxnQkFBYjtBQW1FaEI7QUFBQyxDQXZFRDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9kaXN0L2NhcHR1cmVjb25zb2xlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24sIFNldmVyaXR5IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBmaWxsLCBnZXRHbG9iYWxPYmplY3QsIHNhZmVKb2luIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmNvbnN0IGdsb2JhbCA9IGdldEdsb2JhbE9iamVjdDxXaW5kb3cgfCBOb2RlSlMuR2xvYmFsPigpO1xuXG4vKiogU2VuZCBDb25zb2xlIEFQSSBjYWxscyBhcyBTZW50cnkgRXZlbnRzICovXG5leHBvcnQgY2xhc3MgQ2FwdHVyZUNvbnNvbGUgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0NhcHR1cmVDb25zb2xlJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBDYXB0dXJlQ29uc29sZS5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2xldmVsczogc3RyaW5nW10gPSBbJ2xvZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnZGVidWcnLCAnYXNzZXJ0J107XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogeyBsZXZlbHM/OiBzdHJpbmdbXSB9ID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5sZXZlbHMpIHtcbiAgICAgIHRoaXMuX2xldmVscyA9IG9wdGlvbnMubGV2ZWxzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShfOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBpZiAoISgnY29uc29sZScgaW4gZ2xvYmFsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2xldmVscy5mb3JFYWNoKChsZXZlbDogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoIShsZXZlbCBpbiBnbG9iYWwuY29uc29sZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgZmlsbChnbG9iYWwuY29uc29sZSwgbGV2ZWwsIChvcmlnaW5hbENvbnNvbGVMZXZlbDogKCkgPT4gYW55KSA9PiAoLi4uYXJnczogYW55W10pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuXG4gICAgICAgIGlmIChodWIuZ2V0SW50ZWdyYXRpb24oQ2FwdHVyZUNvbnNvbGUpKSB7XG4gICAgICAgICAgaHViLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICAgICAgICBzY29wZS5zZXRMZXZlbChTZXZlcml0eS5mcm9tU3RyaW5nKGxldmVsKSk7XG4gICAgICAgICAgICBzY29wZS5zZXRFeHRyYSgnYXJndW1lbnRzJywgYXJncyk7XG4gICAgICAgICAgICBzY29wZS5hZGRFdmVudFByb2Nlc3NvcihldmVudCA9PiB7XG4gICAgICAgICAgICAgIGV2ZW50LmxvZ2dlciA9ICdjb25zb2xlJztcbiAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gc2FmZUpvaW4oYXJncywgJyAnKTtcbiAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ3NbMF0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBc3NlcnRpb24gZmFpbGVkOiAke3NhZmVKb2luKGFyZ3Muc2xpY2UoMSksICcgJykgfHwgJ2NvbnNvbGUuYXNzZXJ0J31gO1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldEV4dHJhKCdhcmd1bWVudHMnLCBhcmdzLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICBodWIuY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGh1Yi5jYXB0dXJlTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgZmFpbHMgZm9yIHNvbWUgYnJvd3NlcnMuIDooXG4gICAgICAgIGlmIChvcmlnaW5hbENvbnNvbGVMZXZlbCkge1xuICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKG9yaWdpbmFsQ29uc29sZUxldmVsLCBnbG9iYWwuY29uc29sZSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/captureconsole.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/debug.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/debug.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** JSDoc */\n\n\nvar Debug =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Debug(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Debug.id;\n    this._options = tslib_1.__assign({\n      debugger: false,\n      stringify: false\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Debug.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(Debug);\n\n      if (self) {\n        if (self._options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n        /* eslint-disable no-console */\n\n\n        utils_1.consoleSandbox(function () {\n          if (self._options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n\n            if (hint) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n\n            if (hint) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Debug.id = 'Debug';\n  return Debug;\n}();\n\nexports.Debug = Debug;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZGVidWcudHM/MjJmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBO0FBUUE7OztBQUNBO0FBQUE7QUFBQTtBQWNFOzs7QUFHQSxpQkFBbUIsT0FBbkIsRUFBeUM7QUFYekM7OztBQUdPLGdCQUFlLEtBQUssQ0FBQyxFQUFyQjtBQVNMLFNBQUssUUFBTCxHQUFhO0FBQ1gsY0FBUSxFQUFFLEtBREM7QUFFWCxlQUFTLEVBQUU7QUFGQSxPQUdSLE9BSFEsQ0FBYjtBQUtEO0FBRUQ7Ozs7O0FBR08sOEJBQVAsVUFBaUIsdUJBQWpCLEVBQThFLGFBQTlFLEVBQXNHO0FBQ3BHLDJCQUF1QixDQUFDLFVBQUMsS0FBRCxFQUFlLElBQWYsRUFBK0I7QUFDckQsVUFBTSxJQUFJLEdBQUcsYUFBYSxHQUFHLGNBQWhCLENBQStCLEtBQS9CLENBQWI7O0FBQ0EsVUFBSSxJQUFKLEVBQVU7QUFDUixZQUFJLElBQUksQ0FBQyxRQUFMLENBQWMsUUFBbEIsRUFBNEI7QUFDMUI7QUFDQTtBQUNEO0FBRUQ7OztBQUNBLCtCQUFlO0FBQ2IsY0FBSSxJQUFJLENBQUMsUUFBTCxDQUFjLFNBQWxCLEVBQTZCO0FBQzNCLG1CQUFPLENBQUMsR0FBUixDQUFZLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixFQUFzQixJQUF0QixFQUE0QixDQUE1QixDQUFaOztBQUNBLGdCQUFJLElBQUosRUFBVTtBQUNSLHFCQUFPLENBQUMsR0FBUixDQUFZLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQUFxQixJQUFyQixFQUEyQixDQUEzQixDQUFaO0FBQ0Q7QUFDRixXQUxELE1BS087QUFDTCxtQkFBTyxDQUFDLEdBQVIsQ0FBWSxLQUFaOztBQUNBLGdCQUFJLElBQUosRUFBVTtBQUNSLHFCQUFPLENBQUMsR0FBUixDQUFZLElBQVo7QUFDRDtBQUNGO0FBQ0YsU0FaRDtBQWFBO0FBQ0Q7O0FBQ0QsYUFBTyxLQUFQO0FBQ0QsS0F6QnNCLENBQXZCO0FBMEJELEdBM0JNO0FBM0JQOzs7OztBQUdjLGFBQWEsT0FBYjtBQW9EaEI7QUFBQyxDQXhERDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9kaXN0L2RlYnVnLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50SGludCwgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKiBKU0RvYyAqL1xuaW50ZXJmYWNlIERlYnVnT3B0aW9ucyB7XG4gIHN0cmluZ2lmeT86IGJvb2xlYW47XG4gIGRlYnVnZ2VyPzogYm9vbGVhbjtcbn1cblxuLyoqIEpTRG9jICovXG5leHBvcnQgY2xhc3MgRGVidWcgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0RlYnVnJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBEZWJ1Zy5pZDtcblxuICAvKiogSlNEb2MgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uczogRGVidWdPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBEZWJ1Z09wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgZGVidWdnZXI6IGZhbHNlLFxuICAgICAgc3RyaW5naWZ5OiBmYWxzZSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShhZGRHbG9iYWxFdmVudFByb2Nlc3NvcjogKGNhbGxiYWNrOiBFdmVudFByb2Nlc3NvcikgPT4gdm9pZCwgZ2V0Q3VycmVudEh1YjogKCkgPT4gSHViKTogdm9pZCB7XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoKGV2ZW50OiBFdmVudCwgaGludD86IEV2ZW50SGludCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihEZWJ1Zyk7XG4gICAgICBpZiAoc2VsZikge1xuICAgICAgICBpZiAoc2VsZi5fb3B0aW9ucy5kZWJ1Z2dlcikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNlbGYuX29wdGlvbnMuc3RyaW5naWZ5KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpO1xuICAgICAgICAgICAgaWYgKGhpbnQpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoaGludCwgbnVsbCwgMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgICAgICBpZiAoaGludCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhoaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/debug.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/dedupe.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/dedupe.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** Deduplication filter */\n\nvar Dedupe =\n/** @class */\nfunction () {\n  function Dedupe() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Dedupe.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Dedupe.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (currentEvent) {\n      var self = getCurrentHub().getIntegration(Dedupe);\n\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (self._shouldDropEvent(currentEvent, self._previousEvent)) {\n            return null;\n          }\n        } catch (_oO) {\n          return self._previousEvent = currentEvent;\n        }\n\n        return self._previousEvent = currentEvent;\n      }\n\n      return currentEvent;\n    });\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._shouldDropEvent = function (currentEvent, previousEvent) {\n    if (!previousEvent) {\n      return false;\n    }\n\n    if (this._isSameMessageEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    if (this._isSameExceptionEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    return false;\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._isSameMessageEvent = function (currentEvent, previousEvent) {\n    var currentMessage = currentEvent.message;\n    var previousMessage = previousEvent.message; // If neither event has a message property, they were both exceptions, so bail out\n\n    if (!currentMessage && !previousMessage) {\n      return false;\n    } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n    if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n      return false;\n    }\n\n    if (currentMessage !== previousMessage) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._getFramesFromEvent = function (event) {\n    var exception = event.exception;\n\n    if (exception) {\n      try {\n        // @ts-ignore Object could be undefined\n        return exception.values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    }\n\n    return undefined;\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._isSameStacktrace = function (currentEvent, previousEvent) {\n    var currentFrames = this._getFramesFromEvent(currentEvent);\n\n    var previousFrames = this._getFramesFromEvent(previousEvent); // If neither event has a stacktrace, they are assumed to be the same\n\n\n    if (!currentFrames && !previousFrames) {\n      return true;\n    } // If only one event has a stacktrace, but not the other one, they are not the same\n\n\n    if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n      return false;\n    }\n\n    currentFrames = currentFrames;\n    previousFrames = previousFrames; // If number of frames differ, they are not the same\n\n    if (previousFrames.length !== currentFrames.length) {\n      return false;\n    } // Otherwise, compare the two\n\n\n    for (var i = 0; i < previousFrames.length; i++) {\n      var frameA = previousFrames[i];\n      var frameB = currentFrames[i];\n\n      if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._getExceptionFromEvent = function (event) {\n    return event.exception && event.exception.values && event.exception.values[0];\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._isSameExceptionEvent = function (currentEvent, previousEvent) {\n    var previousException = this._getExceptionFromEvent(previousEvent);\n\n    var currentException = this._getExceptionFromEvent(currentEvent);\n\n    if (!previousException || !currentException) {\n      return false;\n    }\n\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  };\n  /** JSDoc */\n\n\n  Dedupe.prototype._isSameFingerprint = function (currentEvent, previousEvent) {\n    var currentFingerprint = currentEvent.fingerprint;\n    var previousFingerprint = previousEvent.fingerprint; // If neither event has a fingerprint, they are assumed to be the same\n\n    if (!currentFingerprint && !previousFingerprint) {\n      return true;\n    } // If only one event has a fingerprint, but not the other one, they are not the same\n\n\n    if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n      return false;\n    }\n\n    currentFingerprint = currentFingerprint;\n    previousFingerprint = previousFingerprint; // Otherwise, compare the two\n\n    try {\n      return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n    } catch (_oO) {\n      return false;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Dedupe.id = 'Dedupe';\n  return Dedupe;\n}();\n\nexports.Dedupe = Dedupe;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/dedupe.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/ember.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/ember.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** JSDoc */\n\n\nvar Ember =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Ember(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Ember.id; // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n\n    this._Ember = options.Ember || utils_1.getGlobalObject().Ember;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Ember.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    if (!this._Ember) {\n      utils_1.logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n\n    var oldOnError = this._Ember.onerror;\n\n    this._Ember.onerror = function (error) {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().captureException(error, {\n          originalException: error\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(_this._Ember, error);\n      } else if (_this._Ember.testing) {\n        throw error;\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    this._Ember.RSVP.on('error', function (reason) {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().withScope(function (scope) {\n          if (utils_1.isInstanceOf(reason, Error)) {\n            scope.setExtra('context', 'Unhandled Promise error detected');\n            getCurrentHub().captureException(reason, {\n              originalException: reason\n            });\n          } else {\n            scope.setExtra('reason', reason);\n            getCurrentHub().captureMessage('Unhandled Promise error detected');\n          }\n        });\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Ember.id = 'Ember';\n  return Ember;\n}();\n\nexports.Ember = Ember;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZW1iZXIudHM/NDI5OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUVBOzs7QUFDQTtBQUFBO0FBQUE7QUFpQkU7OztBQUdBO0FBQ0EsaUJBQW1CLE9BQW5CLEVBQWdEO0FBQTdCO0FBQUE7QUFBNkI7QUFmaEQ7Ozs7O0FBR08sZ0JBQWUsS0FBSyxDQUFDLEVBQXJCLENBWXlDLENBQzlDOztBQUNBLFNBQUssTUFBTCxHQUFjLE9BQU8sQ0FBQyxLQUFSLElBQWlCLDBCQUF1QixLQUF0RDtBQUNEO0FBRUQ7Ozs7O0FBR08sOEJBQVAsVUFBaUIsQ0FBakIsRUFBd0QsYUFBeEQsRUFBZ0Y7QUFBaEY7O0FBQ0UsUUFBSSxDQUFDLEtBQUssTUFBVixFQUFrQjtBQUNoQixxQkFBTyxLQUFQLENBQWEsK0NBQWI7QUFDQTtBQUNEO0FBRUQ7OztBQUNBLFFBQU0sVUFBVSxHQUFHLEtBQUssTUFBTCxDQUFZLE9BQS9COztBQUVBLFNBQUssTUFBTCxDQUFZLE9BQVosR0FBc0IsVUFBQyxLQUFELEVBQWE7QUFDakMsVUFBSSxhQUFhLEdBQUcsY0FBaEIsQ0FBK0IsS0FBL0IsQ0FBSixFQUEyQztBQUN6QyxxQkFBYSxHQUFHLGdCQUFoQixDQUFpQyxLQUFqQyxFQUF3QztBQUFFLDJCQUFpQixFQUFFO0FBQXJCLFNBQXhDO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPLFVBQVAsS0FBc0IsVUFBMUIsRUFBc0M7QUFDcEMsa0JBQVUsQ0FBQyxJQUFYLENBQWdCLEtBQUksQ0FBQyxNQUFyQixFQUE2QixLQUE3QjtBQUNELE9BRkQsTUFFTyxJQUFJLEtBQUksQ0FBQyxNQUFMLENBQVksT0FBaEIsRUFBeUI7QUFDOUIsY0FBTSxLQUFOO0FBQ0Q7QUFDRixLQVZELENBVDhFLENBcUI5RTs7O0FBQ0EsU0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixFQUFqQixDQUFvQixPQUFwQixFQUE2QixVQUFDLE1BQUQsRUFBZ0I7QUFDM0MsVUFBSSxhQUFhLEdBQUcsY0FBaEIsQ0FBK0IsS0FBL0IsQ0FBSixFQUEyQztBQUN6QyxxQkFBYSxHQUFHLFNBQWhCLENBQTBCLGlCQUFLO0FBQzdCLGNBQUkscUJBQWEsTUFBYixFQUFxQixLQUFyQixDQUFKLEVBQWlDO0FBQy9CLGlCQUFLLENBQUMsUUFBTixDQUFlLFNBQWYsRUFBMEIsa0NBQTFCO0FBQ0EseUJBQWEsR0FBRyxnQkFBaEIsQ0FBaUMsTUFBakMsRUFBeUM7QUFBRSwrQkFBaUIsRUFBRTtBQUFyQixhQUF6QztBQUNELFdBSEQsTUFHTztBQUNMLGlCQUFLLENBQUMsUUFBTixDQUFlLFFBQWYsRUFBeUIsTUFBekI7QUFDQSx5QkFBYSxHQUFHLGNBQWhCLENBQStCLGtDQUEvQjtBQUNEO0FBQ0YsU0FSRDtBQVNEO0FBQ0YsS0FaRDtBQWFELEdBbkNNO0FBNUJQOzs7OztBQUdjLGFBQWEsT0FBYjtBQThEaEI7QUFBQyxDQWxFRDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9kaXN0L2VtYmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgaXNJbnN0YW5jZU9mLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIEpTRG9jICovXG5leHBvcnQgY2xhc3MgRW1iZXIgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0VtYmVyJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBFbWJlci5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcHJpdmF0ZSByZWFkb25seSBfRW1iZXI6IGFueTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiB7IEVtYmVyPzogYW55IH0gPSB7fSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICB0aGlzLl9FbWJlciA9IG9wdGlvbnMuRW1iZXIgfHwgZ2V0R2xvYmFsT2JqZWN0PGFueT4oKS5FbWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShfOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX0VtYmVyKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0VtYmVySW50ZWdyYXRpb24gaXMgbWlzc2luZyBhbiBFbWJlciBpbnN0YW5jZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgIGNvbnN0IG9sZE9uRXJyb3IgPSB0aGlzLl9FbWJlci5vbmVycm9yO1xuXG4gICAgdGhpcy5fRW1iZXIub25lcnJvciA9IChlcnJvcjogRXJyb3IpOiB2b2lkID0+IHtcbiAgICAgIGlmIChnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oRW1iZXIpKSB7XG4gICAgICAgIGdldEN1cnJlbnRIdWIoKS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7IG9yaWdpbmFsRXhjZXB0aW9uOiBlcnJvciB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvbGRPbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9sZE9uRXJyb3IuY2FsbCh0aGlzLl9FbWJlciwgZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9FbWJlci50ZXN0aW5nKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRoaXMuX0VtYmVyLlJTVlAub24oJ2Vycm9yJywgKHJlYXNvbjogdW5rbm93bik6IHZvaWQgPT4ge1xuICAgICAgaWYgKGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihFbWJlcikpIHtcbiAgICAgICAgZ2V0Q3VycmVudEh1YigpLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICAgICAgaWYgKGlzSW5zdGFuY2VPZihyZWFzb24sIEVycm9yKSkge1xuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ2NvbnRleHQnLCAnVW5oYW5kbGVkIFByb21pc2UgZXJyb3IgZGV0ZWN0ZWQnKTtcbiAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwgeyBvcmlnaW5hbEV4Y2VwdGlvbjogcmVhc29uIGFzIEVycm9yIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS5zZXRFeHRyYSgncmVhc29uJywgcmVhc29uKTtcbiAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5jYXB0dXJlTWVzc2FnZSgnVW5oYW5kbGVkIFByb21pc2UgZXJyb3IgZGV0ZWN0ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/ember.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/extraerrordata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/extraerrordata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.filter */ \"./node_modules/core-js/modules/es.array.filter.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-names */ \"./node_modules/core-js/modules/es.object.get-own-property-names.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** Patch toString calls to return proper name for wrapped functions */\n\n\nvar ExtraErrorData =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function ExtraErrorData(_options) {\n    if (_options === void 0) {\n      _options = {\n        depth: 3\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = ExtraErrorData.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ExtraErrorData.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(ExtraErrorData);\n\n      if (!self) {\n        return event;\n      }\n\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  };\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n\n\n  ExtraErrorData.prototype.enhanceEventWithErrorData = function (event, hint) {\n    var _a;\n\n    if (!hint || !hint.originalException || !utils_1.isError(hint.originalException)) {\n      return event;\n    }\n\n    var name = hint.originalException.name || hint.originalException.constructor.name;\n\n    var errorData = this._extractErrorData(hint.originalException);\n\n    if (errorData) {\n      var contexts = tslib_1.__assign({}, event.contexts);\n\n      var normalizedErrorData = utils_1.normalize(errorData, this._options.depth);\n\n      if (utils_1.isPlainObject(normalizedErrorData)) {\n        contexts = tslib_1.__assign(tslib_1.__assign({}, event.contexts), (_a = {}, _a[name] = tslib_1.__assign({}, normalizedErrorData), _a));\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, event), {\n        contexts: contexts\n      });\n    }\n\n    return event;\n  };\n  /**\n   * Extract extra information from the Error object\n   */\n\n\n  ExtraErrorData.prototype._extractErrorData = function (error) {\n    var e_1, _a;\n\n    var result = null; // We are trying to enhance already existing event, so no harm done if it won't succeed\n\n    try {\n      var nativeKeys_1 = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      var errorKeys = Object.getOwnPropertyNames(error).filter(function (key) {\n        return nativeKeys_1.indexOf(key) === -1;\n      });\n\n      if (errorKeys.length) {\n        var extraErrorInfo = {};\n\n        try {\n          for (var errorKeys_1 = tslib_1.__values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n            var key = errorKeys_1_1.value;\n            var value = error[key];\n\n            if (utils_1.isError(value)) {\n              value = value.toString();\n            }\n\n            extraErrorInfo[key] = value;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        result = extraErrorInfo;\n      }\n    } catch (oO) {\n      utils_1.logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ExtraErrorData.id = 'ExtraErrorData';\n  return ExtraErrorData;\n}();\n\nexports.ExtraErrorData = ExtraErrorData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZXh0cmFlcnJvcmRhdGEudHM/MTEwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQU9BOzs7QUFDQTtBQUFBO0FBQUE7QUFXRTs7O0FBR0EsMEJBQW9DLFFBQXBDLEVBQWtGO0FBQTlDO0FBQUE7QUFBb0MsYUFBSyxFQUFFO0FBQTNDO0FBQThDOztBQUE5QztBQVJwQzs7OztBQUdPLGdCQUFlLGNBQWMsQ0FBQyxFQUE5QjtBQUsrRTtBQUV0Rjs7Ozs7QUFHTyx1Q0FBUCxVQUFpQix1QkFBakIsRUFBOEUsYUFBOUUsRUFBc0c7QUFDcEcsMkJBQXVCLENBQUMsVUFBQyxLQUFELEVBQWUsSUFBZixFQUErQjtBQUNyRCxVQUFNLElBQUksR0FBRyxhQUFhLEdBQUcsY0FBaEIsQ0FBK0IsY0FBL0IsQ0FBYjs7QUFDQSxVQUFJLENBQUMsSUFBTCxFQUFXO0FBQ1QsZUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxJQUFJLENBQUMseUJBQUwsQ0FBK0IsS0FBL0IsRUFBc0MsSUFBdEMsQ0FBUDtBQUNELEtBTnNCLENBQXZCO0FBT0QsR0FSTTtBQVVQOzs7OztBQUdPLHVEQUFQLFVBQWlDLEtBQWpDLEVBQStDLElBQS9DLEVBQStEOzs7QUFDN0QsUUFBSSxDQUFDLElBQUQsSUFBUyxDQUFDLElBQUksQ0FBQyxpQkFBZixJQUFvQyxDQUFDLGdCQUFRLElBQUksQ0FBQyxpQkFBYixDQUF6QyxFQUEwRTtBQUN4RSxhQUFPLEtBQVA7QUFDRDs7QUFDRCxRQUFNLElBQUksR0FBSSxJQUFJLENBQUMsaUJBQUwsQ0FBeUMsSUFBekMsSUFBaUQsSUFBSSxDQUFDLGlCQUFMLENBQXVCLFdBQXZCLENBQW1DLElBQWxHOztBQUVBLFFBQU0sU0FBUyxHQUFHLEtBQUssaUJBQUwsQ0FBdUIsSUFBSSxDQUFDLGlCQUE1QixDQUFsQjs7QUFFQSxRQUFJLFNBQUosRUFBZTtBQUNiLFVBQUksUUFBUSx3QkFDUCxLQUFLLENBQUMsUUFEQyxDQUFaOztBQUlBLFVBQU0sbUJBQW1CLEdBQUcsa0JBQVUsU0FBVixFQUFxQixLQUFLLFFBQUwsQ0FBYyxLQUFuQyxDQUE1Qjs7QUFDQSxVQUFJLHNCQUFjLG1CQUFkLENBQUosRUFBd0M7QUFDdEMsZ0JBQVEseUNBQ0gsS0FBSyxDQUFDLFFBREgsSUFDVyxZQUNoQixJQURnQixJQUNaLHFCQUNBLG1CQURBLENBRFksRUFFTyxFQUhsQixFQUFSO0FBTUQ7O0FBRUQsbURBQ0ssS0FETCxHQUNVO0FBQ1IsZ0JBQVE7QUFEQSxPQURWO0FBSUQ7O0FBRUQsV0FBTyxLQUFQO0FBQ0QsR0E5Qk07QUFnQ1A7Ozs7O0FBR1EsK0NBQVIsVUFBMEIsS0FBMUIsRUFBOEM7OztBQUM1QyxRQUFJLE1BQU0sR0FBRyxJQUFiLENBRDRDLENBRTVDOztBQUNBLFFBQUk7QUFDRixVQUFNLFlBQVUsR0FBRyxDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLE9BQXBCLEVBQTZCLE1BQTdCLEVBQXFDLFFBQXJDLEVBQStDLFVBQS9DLEVBQTJELFlBQTNELEVBQXlFLGNBQXpFLENBQW5CO0FBQ0EsVUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLG1CQUFQLENBQTJCLEtBQTNCLEVBQWtDLE1BQWxDLENBQXlDLGVBQUc7QUFBSSwyQkFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBbkIsTUFBNEIsQ0FBNUI7QUFBOEIsT0FBOUUsQ0FBbEI7O0FBRUEsVUFBSSxTQUFTLENBQUMsTUFBZCxFQUFzQjtBQUNwQixZQUFNLGNBQWMsR0FBK0IsRUFBbkQ7OztBQUNBLGVBQWtCLCtDQUFTLGtDQUEzQixFQUEyQixtQkFBM0IsRUFBMkIsa0NBQTNCLEVBQTZCO0FBQXhCLGdCQUFNLEdBQUcsc0JBQVQ7QUFDSCxnQkFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUQsQ0FBakI7O0FBQ0EsZ0JBQUksZ0JBQVEsS0FBUixDQUFKLEVBQW9CO0FBQ2xCLG1CQUFLLEdBQUksS0FBZSxDQUFDLFFBQWhCLEVBQVQ7QUFDRDs7QUFDRCwwQkFBYyxDQUFDLEdBQUQsQ0FBZCxHQUFzQixLQUF0QjtBQUNEOzs7Ozs7Ozs7Ozs7O0FBQ0QsY0FBTSxHQUFHLGNBQVQ7QUFDRDtBQUNGLEtBZkQsQ0FlRSxPQUFPLEVBQVAsRUFBVztBQUNYLHFCQUFPLEtBQVAsQ0FBYSxxREFBYixFQUFvRSxFQUFwRTtBQUNEOztBQUVELFdBQU8sTUFBUDtBQUNELEdBdkJPO0FBbEVSOzs7OztBQUdjLHNCQUFhLGdCQUFiO0FBdUZoQjtBQUFDLENBM0ZEOztBQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvaW50ZWdyYXRpb25zL2Rpc3QvZXh0cmFlcnJvcmRhdGEuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCwgRXZlbnRIaW50LCBFdmVudFByb2Nlc3NvciwgRXh0ZW5kZWRFcnJvciwgSHViLCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgaXNFcnJvciwgaXNQbGFpbk9iamVjdCwgbG9nZ2VyLCBub3JtYWxpemUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIEpTRG9jICovXG5pbnRlcmZhY2UgRXh0cmFFcnJvckRhdGFPcHRpb25zIHtcbiAgZGVwdGg/OiBudW1iZXI7XG59XG5cbi8qKiBQYXRjaCB0b1N0cmluZyBjYWxscyB0byByZXR1cm4gcHJvcGVyIG5hbWUgZm9yIHdyYXBwZWQgZnVuY3Rpb25zICovXG5leHBvcnQgY2xhc3MgRXh0cmFFcnJvckRhdGEgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0V4dHJhRXJyb3JEYXRhJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBFeHRyYUVycm9yRGF0YS5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zOiBFeHRyYUVycm9yRGF0YU9wdGlvbnMgPSB7IGRlcHRoOiAzIH0pIHt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcigoZXZlbnQ6IEV2ZW50LCBoaW50PzogRXZlbnRIaW50KSA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKEV4dHJhRXJyb3JEYXRhKTtcbiAgICAgIGlmICghc2VsZikge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZi5lbmhhbmNlRXZlbnRXaXRoRXJyb3JEYXRhKGV2ZW50LCBoaW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBleHRyYWN0ZWQgaW5mb3JtYXRpb24gZnJvbSB0aGUgRXJyb3Igb2JqZWN0IHRvIGV4dHJhIGZpZWxkIGluIHRoZSBFdmVudFxuICAgKi9cbiAgcHVibGljIGVuaGFuY2VFdmVudFdpdGhFcnJvckRhdGEoZXZlbnQ6IEV2ZW50LCBoaW50PzogRXZlbnRIaW50KTogRXZlbnQge1xuICAgIGlmICghaGludCB8fCAhaGludC5vcmlnaW5hbEV4Y2VwdGlvbiB8fCAhaXNFcnJvcihoaW50Lm9yaWdpbmFsRXhjZXB0aW9uKSkge1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gYXMgRXh0ZW5kZWRFcnJvcikubmFtZSB8fCBoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBjb25zdCBlcnJvckRhdGEgPSB0aGlzLl9leHRyYWN0RXJyb3JEYXRhKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gYXMgRXh0ZW5kZWRFcnJvcik7XG5cbiAgICBpZiAoZXJyb3JEYXRhKSB7XG4gICAgICBsZXQgY29udGV4dHMgPSB7XG4gICAgICAgIC4uLmV2ZW50LmNvbnRleHRzLFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgbm9ybWFsaXplZEVycm9yRGF0YSA9IG5vcm1hbGl6ZShlcnJvckRhdGEsIHRoaXMuX29wdGlvbnMuZGVwdGgpO1xuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qobm9ybWFsaXplZEVycm9yRGF0YSkpIHtcbiAgICAgICAgY29udGV4dHMgPSB7XG4gICAgICAgICAgLi4uZXZlbnQuY29udGV4dHMsXG4gICAgICAgICAgW25hbWVdOiB7XG4gICAgICAgICAgICAuLi5ub3JtYWxpemVkRXJyb3JEYXRhLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBjb250ZXh0cyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgZXh0cmEgaW5mb3JtYXRpb24gZnJvbSB0aGUgRXJyb3Igb2JqZWN0XG4gICAqL1xuICBwcml2YXRlIF9leHRyYWN0RXJyb3JEYXRhKGVycm9yOiBFeHRlbmRlZEVycm9yKTogeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0gfCBudWxsIHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGVuaGFuY2UgYWxyZWFkeSBleGlzdGluZyBldmVudCwgc28gbm8gaGFybSBkb25lIGlmIGl0IHdvbid0IHN1Y2NlZWRcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmF0aXZlS2V5cyA9IFsnbmFtZScsICdtZXNzYWdlJywgJ3N0YWNrJywgJ2xpbmUnLCAnY29sdW1uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnY29sdW1uTnVtYmVyJ107XG4gICAgICBjb25zdCBlcnJvcktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlcnJvcikuZmlsdGVyKGtleSA9PiBuYXRpdmVLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpO1xuXG4gICAgICBpZiAoZXJyb3JLZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBleHRyYUVycm9ySW5mbzogeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0gPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZXJyb3JLZXlzKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gZXJyb3Jba2V5XTtcbiAgICAgICAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIGFzIEVycm9yKS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHRyYUVycm9ySW5mb1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gZXh0cmFFcnJvckluZm87XG4gICAgICB9XG4gICAgfSBjYXRjaCAob08pIHtcbiAgICAgIGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGV4dHJhY3QgZXh0cmEgZGF0YSBmcm9tIHRoZSBFcnJvciBvYmplY3Q6Jywgb08pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/extraerrordata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar angular_1 = __webpack_require__(/*! ./angular */ \"./node_modules/@sentry/integrations/dist/angular.js\");\n\nexports.Angular = angular_1.Angular;\n\nvar captureconsole_1 = __webpack_require__(/*! ./captureconsole */ \"./node_modules/@sentry/integrations/dist/captureconsole.js\");\n\nexports.CaptureConsole = captureconsole_1.CaptureConsole;\n\nvar debug_1 = __webpack_require__(/*! ./debug */ \"./node_modules/@sentry/integrations/dist/debug.js\");\n\nexports.Debug = debug_1.Debug;\n\nvar dedupe_1 = __webpack_require__(/*! ./dedupe */ \"./node_modules/@sentry/integrations/dist/dedupe.js\");\n\nexports.Dedupe = dedupe_1.Dedupe;\n\nvar ember_1 = __webpack_require__(/*! ./ember */ \"./node_modules/@sentry/integrations/dist/ember.js\");\n\nexports.Ember = ember_1.Ember;\n\nvar extraerrordata_1 = __webpack_require__(/*! ./extraerrordata */ \"./node_modules/@sentry/integrations/dist/extraerrordata.js\");\n\nexports.ExtraErrorData = extraerrordata_1.ExtraErrorData;\n\nvar offline_1 = __webpack_require__(/*! ./offline */ \"./node_modules/@sentry/integrations/dist/offline.js\");\n\nexports.Offline = offline_1.Offline;\n\nvar reportingobserver_1 = __webpack_require__(/*! ./reportingobserver */ \"./node_modules/@sentry/integrations/dist/reportingobserver.js\");\n\nexports.ReportingObserver = reportingobserver_1.ReportingObserver;\n\nvar rewriteframes_1 = __webpack_require__(/*! ./rewriteframes */ \"./node_modules/@sentry/integrations/dist/rewriteframes.js\");\n\nexports.RewriteFrames = rewriteframes_1.RewriteFrames;\n\nvar sessiontiming_1 = __webpack_require__(/*! ./sessiontiming */ \"./node_modules/@sentry/integrations/dist/sessiontiming.js\");\n\nexports.SessionTiming = sessiontiming_1.SessionTiming;\n\nvar transaction_1 = __webpack_require__(/*! ./transaction */ \"./node_modules/@sentry/integrations/dist/transaction.js\");\n\nexports.Transaction = transaction_1.Transaction;\n\nvar vue_1 = __webpack_require__(/*! ./vue */ \"./node_modules/@sentry/integrations/dist/vue.js\");\n\nexports.Vue = vue_1.Vue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVM7O0FBQ1Q7O0FBQVMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEFuZ3VsYXIgfSBmcm9tICcuL2FuZ3VsYXInO1xuZXhwb3J0IHsgQ2FwdHVyZUNvbnNvbGUgfSBmcm9tICcuL2NhcHR1cmVjb25zb2xlJztcbmV4cG9ydCB7IERlYnVnIH0gZnJvbSAnLi9kZWJ1Zyc7XG5leHBvcnQgeyBEZWR1cGUgfSBmcm9tICcuL2RlZHVwZSc7XG5leHBvcnQgeyBFbWJlciB9IGZyb20gJy4vZW1iZXInO1xuZXhwb3J0IHsgRXh0cmFFcnJvckRhdGEgfSBmcm9tICcuL2V4dHJhZXJyb3JkYXRhJztcbmV4cG9ydCB7IE9mZmxpbmUgfSBmcm9tICcuL29mZmxpbmUnO1xuZXhwb3J0IHsgUmVwb3J0aW5nT2JzZXJ2ZXIgfSBmcm9tICcuL3JlcG9ydGluZ29ic2VydmVyJztcbmV4cG9ydCB7IFJld3JpdGVGcmFtZXMgfSBmcm9tICcuL3Jld3JpdGVmcmFtZXMnO1xuZXhwb3J0IHsgU2Vzc2lvblRpbWluZyB9IGZyb20gJy4vc2Vzc2lvbnRpbWluZyc7XG5leHBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuZXhwb3J0IHsgVnVlIH0gZnJvbSAnLi92dWUnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/offline.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/offline.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.sort */ \"./node_modules/core-js/modules/es.array.sort.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise */ \"./node_modules/core-js/modules/es.promise.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar localForage = __webpack_require__(/*! localforage */ \"./node_modules/localforage/dist/localforage.js\");\n/**\n * cache offline errors and send when connected\n */\n\n\nvar Offline =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Offline(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Offline.id; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.global = utils_1.getGlobalObject();\n    this.maxStoredEvents = options.maxStoredEvents || 30; // set a reasonable default\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    this.offlineEventStore = localForage.createInstance({\n      name: 'sentry/offlineEventStore'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Offline.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    var _this = this;\n\n    this.hub = getCurrentHub();\n\n    if ('addEventListener' in this.global) {\n      this.global.addEventListener('online', function () {\n        _this._sendEvents().catch(function () {\n          utils_1.logger.warn('could not send cached events');\n        });\n      });\n    }\n\n    addGlobalEventProcessor(function (event) {\n      if (_this.hub && _this.hub.getIntegration(Offline)) {\n        // cache if we are positively offline\n        if ('navigator' in _this.global && 'onLine' in _this.global.navigator && !_this.global.navigator.onLine) {\n          _this._cacheEvent(event).then(function (_event) {\n            return _this._enforceMaxEvents();\n          }).catch(function (_error) {\n            utils_1.logger.warn('could not cache event while offline');\n          }); // return null on success or failure, because being offline will still result in an error\n\n\n          return null;\n        }\n      }\n\n      return event;\n    }); // if online now, send any events stored in a previous offline session\n\n    if ('navigator' in this.global && 'onLine' in this.global.navigator && this.global.navigator.onLine) {\n      this._sendEvents().catch(function () {\n        utils_1.logger.warn('could not send cached events');\n      });\n    }\n  };\n  /**\n   * cache an event to send later\n   * @param event an event\n   */\n\n\n  Offline.prototype._cacheEvent = function (event) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.offlineEventStore.setItem(utils_1.uuid4(), event)];\n      });\n    });\n  };\n  /**\n   * purge excess events if necessary\n   */\n\n\n  Offline.prototype._enforceMaxEvents = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var events;\n\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        events = [];\n        return [2\n        /*return*/\n        , this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n          // aggregate events\n          events.push({\n            cacheKey: cacheKey,\n            event: event\n          });\n        }).then(function () {\n          // this promise resolves when the iteration is finished\n          return _this._purgeEvents( // purge all events past maxStoredEvents in reverse chronological order\n          events.sort(function (a, b) {\n            return (b.event.timestamp || 0) - (a.event.timestamp || 0);\n          }).slice(_this.maxStoredEvents < events.length ? _this.maxStoredEvents : events.length).map(function (event) {\n            return event.cacheKey;\n          }));\n        }).catch(function (_error) {\n          utils_1.logger.warn('could not enforce max events');\n        })];\n      });\n    });\n  };\n  /**\n   * purge event from cache\n   */\n\n\n  Offline.prototype._purgeEvent = function (cacheKey) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.offlineEventStore.removeItem(cacheKey)];\n      });\n    });\n  };\n  /**\n   * purge events from cache\n   */\n\n\n  Offline.prototype._purgeEvents = function (cacheKeys) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        // trail with .then to ensure the return type as void and not void|void[]\n        return [2\n        /*return*/\n        , Promise.all(cacheKeys.map(function (cacheKey) {\n          return _this._purgeEvent(cacheKey);\n        })).then()];\n      });\n    });\n  };\n  /**\n   * send all events\n   */\n\n\n  Offline.prototype._sendEvents = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n          if (_this.hub) {\n            _this.hub.captureEvent(event);\n\n            _this._purgeEvent(cacheKey).catch(function (_error) {\n              utils_1.logger.warn('could not purge event from cache');\n            });\n          } else {\n            utils_1.logger.warn('no hub found - could not send cached event');\n          }\n        })];\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Offline.id = 'Offline';\n  return Offline;\n}();\n\nexports.Offline = Offline;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/offline.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/reportingobserver.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/reportingobserver.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.trim */ \"./node_modules/core-js/modules/es.string.trim.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** JSDoc */\n\n\nvar ReportTypes;\n\n(function (ReportTypes) {\n  /** JSDoc */\n  ReportTypes[\"Crash\"] = \"crash\";\n  /** JSDoc */\n\n  ReportTypes[\"Deprecation\"] = \"deprecation\";\n  /** JSDoc */\n\n  ReportTypes[\"Intervention\"] = \"intervention\";\n})(ReportTypes || (ReportTypes = {}));\n/** Reporting API integration - https://w3c.github.io/reporting/ */\n\n\nvar ReportingObserver =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function ReportingObserver(_options) {\n    if (_options === void 0) {\n      _options = {\n        types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention]\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = ReportingObserver.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!utils_1.supportsReportingObserver()) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    var observer = new (utils_1.getGlobalObject().ReportingObserver)(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    observer.observe();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.prototype.handler = function (reports) {\n    var e_1, _a;\n\n    var hub = this._getCurrentHub && this._getCurrentHub();\n\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n\n    var _loop_1 = function _loop_1(report) {\n      hub.withScope(function (scope) {\n        scope.setExtra('url', report.url);\n        var label = \"ReportingObserver [\" + report.type + \"]\";\n        var details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          var plainBody = {}; // eslint-disable-next-line guard-for-in\n\n          for (var prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            var body = report.body; // A fancy way to create a message out of crashId OR reason OR both OR fallback\n\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            var body = report.body;\n            details = body.message || details;\n          }\n        }\n\n        hub.captureMessage(label + \": \" + details);\n      });\n    };\n\n    try {\n      for (var reports_1 = tslib_1.__values(reports), reports_1_1 = reports_1.next(); !reports_1_1.done; reports_1_1 = reports_1.next()) {\n        var report = reports_1_1.value;\n\n        _loop_1(report);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (reports_1_1 && !reports_1_1.done && (_a = reports_1.return)) _a.call(reports_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReportingObserver.id = 'ReportingObserver';\n  return ReportingObserver;\n}();\n\nexports.ReportingObserver = ReportingObserver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcmVwb3J0aW5nb2JzZXJ2ZXIudHM/NzljYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFQTtBQVVBOzs7QUFDQSxJQUFLLFdBQUw7O0FBQUEsV0FBSyxXQUFMLEVBQWdCO0FBQ2Q7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDRCxDQVBELEVBQUssV0FBVyxLQUFYLFdBQVcsTUFBaEI7QUF3Q0E7OztBQUNBO0FBQUE7QUFBQTtBQWdCRTs7O0FBR0EsNkJBQ21CLFFBRG5CLEVBS0c7QUFKZ0I7QUFBQTtBQUdmLGFBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFiLEVBQW9CLFdBQVcsQ0FBQyxXQUFoQyxFQUE2QyxXQUFXLENBQUMsWUFBekQ7QUFIUTtBQUloQjs7QUFKZ0I7QUFkbkI7Ozs7QUFHZ0IsZ0JBQWUsaUJBQWlCLENBQUMsRUFBakM7QUFnQlo7QUFFSjs7Ozs7QUFHTywwQ0FBUCxVQUFpQixDQUFqQixFQUF3RCxhQUF4RCxFQUFnRjtBQUM5RSxRQUFJLENBQUMsbUNBQUwsRUFBa0M7QUFDaEM7QUFDRDs7QUFFRCxTQUFLLGNBQUwsR0FBc0IsYUFBdEIsQ0FMOEUsQ0FPOUU7O0FBQ0EsUUFBTSxRQUFRLEdBQUcsS0FBSywwQkFBdUIsaUJBQTVCLEVBQStDLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBL0MsRUFBd0U7QUFDdkYsY0FBUSxFQUFFLElBRDZFO0FBRXZGLFdBQUssRUFBRSxLQUFLLFFBQUwsQ0FBYztBQUZrRSxLQUF4RSxDQUFqQixDQVI4RSxDQWE5RTs7QUFDQSxZQUFRLENBQUMsT0FBVDtBQUNELEdBZk07QUFpQlA7Ozs7O0FBR08sd0NBQVAsVUFBZSxPQUFmLEVBQWdDOzs7QUFDOUIsUUFBTSxHQUFHLEdBQUcsS0FBSyxjQUFMLElBQXVCLEtBQUssY0FBTCxFQUFuQzs7QUFDQSxRQUFJLENBQUMsR0FBRCxJQUFRLENBQUMsR0FBRyxDQUFDLGNBQUosQ0FBbUIsaUJBQW5CLENBQWIsRUFBb0Q7QUFDbEQ7QUFDRDs7bUNBQ1UsTSxFQUFNO0FBQ2YsU0FBRyxDQUFDLFNBQUosQ0FBYyxpQkFBSztBQUNqQixhQUFLLENBQUMsUUFBTixDQUFlLEtBQWYsRUFBc0IsTUFBTSxDQUFDLEdBQTdCO0FBRUEsWUFBTSxLQUFLLEdBQUcsd0JBQXNCLE1BQU0sQ0FBQyxJQUE3QixHQUFpQyxHQUEvQztBQUNBLFlBQUksT0FBTyxHQUFHLHNCQUFkOztBQUVBLFlBQUksTUFBTSxDQUFDLElBQVgsRUFBaUI7QUFDZjtBQUNBLGNBQU0sU0FBUyxHQUVYLEVBRkosQ0FGZSxDQU1mOztBQUNBLGVBQUssSUFBTSxJQUFYLElBQW1CLE1BQU0sQ0FBQyxJQUExQixFQUFnQztBQUM5QixxQkFBUyxDQUFDLElBQUQsQ0FBVCxHQUFrQixNQUFNLENBQUMsSUFBUCxDQUFZLElBQVosQ0FBbEI7QUFDRDs7QUFFRCxlQUFLLENBQUMsUUFBTixDQUFlLE1BQWYsRUFBdUIsU0FBdkI7O0FBRUEsY0FBSSxNQUFNLENBQUMsSUFBUCxLQUFnQixXQUFXLENBQUMsS0FBaEMsRUFBdUM7QUFDckMsZ0JBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFwQixDQURxQyxDQUVyQzs7QUFDQSxtQkFBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQUwsSUFBZ0IsRUFBakIsRUFBcUIsSUFBSSxDQUFDLE1BQUwsSUFBZSxFQUFwQyxFQUF3QyxJQUF4QyxDQUE2QyxHQUE3QyxFQUFrRCxJQUFsRCxNQUE0RCxPQUF0RTtBQUNELFdBSkQsTUFJTztBQUNMLGdCQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBcEI7QUFDQSxtQkFBTyxHQUFHLElBQUksQ0FBQyxPQUFMLElBQWdCLE9BQTFCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFHLENBQUMsY0FBSixDQUFzQixLQUFLLE9BQUwsR0FBVSxPQUFoQztBQUNELE9BOUJEOzs7O0FBREYsV0FBcUIsMkNBQU8sOEJBQTVCLEVBQTRCLGlCQUE1QixFQUE0Qiw4QkFBNUIsRUFBNEI7QUFBdkIsWUFBTSxNQUFNLG9CQUFaOztnQkFBTSxNO0FBZ0NWOzs7Ozs7Ozs7Ozs7QUFDRixHQXRDTTtBQWpEUDs7Ozs7QUFHYyx5QkFBYSxtQkFBYjtBQXFGaEI7QUFBQyxDQXpGRDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9kaXN0L3JlcG9ydGluZ29ic2VydmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCwgc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG4vKiogSlNEb2MgKi9cbmludGVyZmFjZSBSZXBvcnQge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIHR5cGU6IFJlcG9ydFR5cGVzO1xuICB1cmw6IHN0cmluZztcbiAgYm9keT86IFJlcG9ydEJvZHk7XG59XG5cbi8qKiBKU0RvYyAqL1xuZW51bSBSZXBvcnRUeXBlcyB7XG4gIC8qKiBKU0RvYyAqL1xuICBDcmFzaCA9ICdjcmFzaCcsXG4gIC8qKiBKU0RvYyAqL1xuICBEZXByZWNhdGlvbiA9ICdkZXByZWNhdGlvbicsXG4gIC8qKiBKU0RvYyAqL1xuICBJbnRlcnZlbnRpb24gPSAnaW50ZXJ2ZW50aW9uJyxcbn1cblxuLyoqIEpTRG9jICovXG50eXBlIFJlcG9ydEJvZHkgPSBDcmFzaFJlcG9ydEJvZHkgfCBEZXByZWNhdGlvblJlcG9ydEJvZHkgfCBJbnRlcnZlbnRpb25SZXBvcnRCb2R5O1xuXG4vKiogSlNEb2MgKi9cbmludGVyZmFjZSBDcmFzaFJlcG9ydEJvZHkge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIGNyYXNoSWQ6IHN0cmluZztcbiAgcmVhc29uPzogc3RyaW5nO1xufVxuXG4vKiogSlNEb2MgKi9cbmludGVyZmFjZSBEZXByZWNhdGlvblJlcG9ydEJvZHkge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIGlkOiBzdHJpbmc7XG4gIGFudGljaXBhdGVkUmVtb3ZhbD86IERhdGU7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgc291cmNlRmlsZT86IHN0cmluZztcbiAgbGluZU51bWJlcj86IG51bWJlcjtcbiAgY29sdW1uTnVtYmVyPzogbnVtYmVyO1xufVxuXG4vKiogSlNEb2MgKi9cbmludGVyZmFjZSBJbnRlcnZlbnRpb25SZXBvcnRCb2R5IHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHNvdXJjZUZpbGU/OiBzdHJpbmc7XG4gIGxpbmVOdW1iZXI/OiBudW1iZXI7XG4gIGNvbHVtbk51bWJlcj86IG51bWJlcjtcbn1cblxuLyoqIFJlcG9ydGluZyBBUEkgaW50ZWdyYXRpb24gLSBodHRwczovL3czYy5naXRodWIuaW8vcmVwb3J0aW5nLyAqL1xuZXhwb3J0IGNsYXNzIFJlcG9ydGluZ09ic2VydmVyIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdSZXBvcnRpbmdPYnNlcnZlcic7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gUmVwb3J0aW5nT2JzZXJ2ZXIuaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBodWIuXG4gICAqL1xuICBwcml2YXRlIF9nZXRDdXJyZW50SHViPzogKCkgPT4gSHViO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnM6IHtcbiAgICAgIHR5cGVzPzogUmVwb3J0VHlwZXNbXTtcbiAgICB9ID0ge1xuICAgICAgdHlwZXM6IFtSZXBvcnRUeXBlcy5DcmFzaCwgUmVwb3J0VHlwZXMuRGVwcmVjYXRpb24sIFJlcG9ydFR5cGVzLkludGVydmVudGlvbl0sXG4gICAgfSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShfOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBpZiAoIXN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IChnZXRHbG9iYWxPYmplY3Q8YW55PigpLlJlcG9ydGluZ09ic2VydmVyKSh0aGlzLmhhbmRsZXIuYmluZCh0aGlzKSwge1xuICAgICAgYnVmZmVyZWQ6IHRydWUsXG4gICAgICB0eXBlczogdGhpcy5fb3B0aW9ucy50eXBlcyxcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICBvYnNlcnZlci5vYnNlcnZlKCk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBoYW5kbGVyKHJlcG9ydHM6IFJlcG9ydFtdKTogdm9pZCB7XG4gICAgY29uc3QgaHViID0gdGhpcy5fZ2V0Q3VycmVudEh1YiAmJiB0aGlzLl9nZXRDdXJyZW50SHViKCk7XG4gICAgaWYgKCFodWIgfHwgIWh1Yi5nZXRJbnRlZ3JhdGlvbihSZXBvcnRpbmdPYnNlcnZlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCByZXBvcnQgb2YgcmVwb3J0cykge1xuICAgICAgaHViLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICAgIHNjb3BlLnNldEV4dHJhKCd1cmwnLCByZXBvcnQudXJsKTtcblxuICAgICAgICBjb25zdCBsYWJlbCA9IGBSZXBvcnRpbmdPYnNlcnZlciBbJHtyZXBvcnQudHlwZX1dYDtcbiAgICAgICAgbGV0IGRldGFpbHMgPSAnTm8gZGV0YWlscyBhdmFpbGFibGUnO1xuXG4gICAgICAgIGlmIChyZXBvcnQuYm9keSkge1xuICAgICAgICAgIC8vIE9iamVjdC5rZXlzIGRvZXNuJ3Qgd29yayBvbiBSZXBvcnRCb2R5LCBhcyBhbGwgcHJvcGVydGllcyBhcmUgaW5oZWlydGVkXG4gICAgICAgICAgY29uc3QgcGxhaW5Cb2R5OiB7XG4gICAgICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgICAgICAgfSA9IHt9O1xuXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiByZXBvcnQuYm9keSkge1xuICAgICAgICAgICAgcGxhaW5Cb2R5W3Byb3BdID0gcmVwb3J0LmJvZHlbcHJvcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ2JvZHknLCBwbGFpbkJvZHkpO1xuXG4gICAgICAgICAgaWYgKHJlcG9ydC50eXBlID09PSBSZXBvcnRUeXBlcy5DcmFzaCkge1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHJlcG9ydC5ib2R5IGFzIENyYXNoUmVwb3J0Qm9keTtcbiAgICAgICAgICAgIC8vIEEgZmFuY3kgd2F5IHRvIGNyZWF0ZSBhIG1lc3NhZ2Ugb3V0IG9mIGNyYXNoSWQgT1IgcmVhc29uIE9SIGJvdGggT1IgZmFsbGJhY2tcbiAgICAgICAgICAgIGRldGFpbHMgPSBbYm9keS5jcmFzaElkIHx8ICcnLCBib2R5LnJlYXNvbiB8fCAnJ10uam9pbignICcpLnRyaW0oKSB8fCBkZXRhaWxzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcmVwb3J0LmJvZHkgYXMgRGVwcmVjYXRpb25SZXBvcnRCb2R5IHwgSW50ZXJ2ZW50aW9uUmVwb3J0Qm9keTtcbiAgICAgICAgICAgIGRldGFpbHMgPSBib2R5Lm1lc3NhZ2UgfHwgZGV0YWlscztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBodWIuY2FwdHVyZU1lc3NhZ2UoYCR7bGFiZWx9OiAke2RldGFpbHN9YCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/reportingobserver.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/rewriteframes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/rewriteframes.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.replace */ \"./node_modules/core-js/modules/es.string.replace.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/** Rewrite event frames paths */\n\n\nvar RewriteFrames =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function RewriteFrames(options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = RewriteFrames.id;\n    /**\n     * @inheritDoc\n     */\n\n    this._iteratee = function (frame) {\n      if (!frame.filename) {\n        return frame;\n      } // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n\n\n      var isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n      var startsWithSlash = /^\\//.test(frame.filename);\n\n      if (isWindowsFrame || startsWithSlash) {\n        var filename = isWindowsFrame ? frame.filename.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        var base = _this._root ? utils_1.relative(_this._root, filename) : utils_1.basename(filename);\n        frame.filename = \"app:///\" + base;\n      }\n\n      return frame;\n    };\n\n    if (options.root) {\n      this._root = options.root;\n    }\n\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  RewriteFrames.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(RewriteFrames);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype.process = function (event) {\n    if (event.exception && Array.isArray(event.exception.values)) {\n      return this._processExceptionsEvent(event);\n    }\n\n    if (event.stacktrace) {\n      return this._processStacktraceEvent(event);\n    }\n\n    return event;\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processExceptionsEvent = function (event) {\n    var _this = this;\n\n    try {\n      return tslib_1.__assign(tslib_1.__assign({}, event), {\n        exception: tslib_1.__assign(tslib_1.__assign({}, event.exception), {\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(function (value) {\n            return tslib_1.__assign(tslib_1.__assign({}, value), {\n              stacktrace: _this._processStacktrace(value.stacktrace)\n            });\n          })\n        })\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processStacktraceEvent = function (event) {\n    try {\n      return tslib_1.__assign(tslib_1.__assign({}, event), {\n        stacktrace: this._processStacktrace(event.stacktrace)\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n\n\n  RewriteFrames.prototype._processStacktrace = function (stacktrace) {\n    var _this = this;\n\n    return tslib_1.__assign(tslib_1.__assign({}, stacktrace), {\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(function (f) {\n        return _this._iteratee(f);\n      })\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RewriteFrames.id = 'RewriteFrames';\n  return RewriteFrames;\n}();\n\nexports.RewriteFrames = RewriteFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcmV3cml0ZWZyYW1lcy50cz85MTUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBSUE7OztBQUNBO0FBQUE7QUFBQTtBQWdCRTs7O0FBR0EseUJBQW1CLE9BQW5CLEVBQWlGO0FBQWpGOztBQUFtQjtBQUFBO0FBQThEO0FBYmpGOzs7OztBQUdPLGdCQUFlLGFBQWEsQ0FBQyxFQUE3QjtBQTZDUDs7OztBQUdpQixxQkFBZ0MsVUFBQyxLQUFELEVBQWtCO0FBQ2pFLFVBQUksQ0FBQyxLQUFLLENBQUMsUUFBWCxFQUFxQjtBQUNuQixlQUFPLEtBQVA7QUFDRCxPQUhnRSxDQUlqRTs7O0FBQ0EsVUFBTSxjQUFjLEdBQUcsWUFBWSxJQUFaLENBQWlCLEtBQUssQ0FBQyxRQUF2QixDQUF2QjtBQUNBLFVBQU0sZUFBZSxHQUFHLE1BQU0sSUFBTixDQUFXLEtBQUssQ0FBQyxRQUFqQixDQUF4Qjs7QUFDQSxVQUFJLGNBQWMsSUFBSSxlQUF0QixFQUF1QztBQUNyQyxZQUFNLFFBQVEsR0FBRyxjQUFjLEdBQzNCLEtBQUssQ0FBQyxRQUFOLENBQ0csT0FESCxDQUNXLFNBRFgsRUFDc0IsRUFEdEIsRUFDMEI7QUFEMUIsU0FFRyxPQUZILENBRVcsS0FGWCxFQUVrQixHQUZsQixDQUQyQixDQUdKO0FBSEksVUFJM0IsS0FBSyxDQUFDLFFBSlY7QUFLQSxZQUFNLElBQUksR0FBRyxLQUFJLENBQUMsS0FBTCxHQUFhLGlCQUFTLEtBQUksQ0FBQyxLQUFkLEVBQXFCLFFBQXJCLENBQWIsR0FBOEMsaUJBQVMsUUFBVCxDQUEzRDtBQUNBLGFBQUssQ0FBQyxRQUFOLEdBQWlCLFlBQVUsSUFBM0I7QUFDRDs7QUFDRCxhQUFPLEtBQVA7QUFDRCxLQWpCZ0I7O0FBckNmLFFBQUksT0FBTyxDQUFDLElBQVosRUFBa0I7QUFDaEIsV0FBSyxLQUFMLEdBQWEsT0FBTyxDQUFDLElBQXJCO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPLENBQUMsUUFBWixFQUFzQjtBQUNwQixXQUFLLFNBQUwsR0FBaUIsT0FBTyxDQUFDLFFBQXpCO0FBQ0Q7QUFDRjtBQUVEOzs7OztBQUdPLHNDQUFQLFVBQWlCLHVCQUFqQixFQUE4RSxhQUE5RSxFQUFzRztBQUNwRywyQkFBdUIsQ0FBQyxpQkFBSztBQUMzQixVQUFNLElBQUksR0FBRyxhQUFhLEdBQUcsY0FBaEIsQ0FBK0IsYUFBL0IsQ0FBYjs7QUFDQSxVQUFJLElBQUosRUFBVTtBQUNSLGVBQU8sSUFBSSxDQUFDLE9BQUwsQ0FBYSxLQUFiLENBQVA7QUFDRDs7QUFDRCxhQUFPLEtBQVA7QUFDRCxLQU5zQixDQUF2QjtBQU9ELEdBUk07QUFVUDs7O0FBQ08sb0NBQVAsVUFBZSxLQUFmLEVBQTJCO0FBQ3pCLFFBQUksS0FBSyxDQUFDLFNBQU4sSUFBbUIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFLLENBQUMsU0FBTixDQUFnQixNQUE5QixDQUF2QixFQUE4RDtBQUM1RCxhQUFPLEtBQUssdUJBQUwsQ0FBNkIsS0FBN0IsQ0FBUDtBQUNEOztBQUVELFFBQUksS0FBSyxDQUFDLFVBQVYsRUFBc0I7QUFDcEIsYUFBTyxLQUFLLHVCQUFMLENBQTZCLEtBQTdCLENBQVA7QUFDRDs7QUFFRCxXQUFPLEtBQVA7QUFDRCxHQVZNO0FBa0NQOzs7QUFDUSxvREFBUixVQUFnQyxLQUFoQyxFQUE0QztBQUE1Qzs7QUFDRSxRQUFJO0FBQ0YsbURBQ0ssS0FETCxHQUNVO0FBQ1IsaUJBQVMsd0NBQ0osS0FBSyxDQUFDLFNBREYsR0FDVztBQUNsQjtBQUNBO0FBQ0EsZ0JBQU0sRUFBRSxLQUFLLENBQUMsU0FBTixDQUFpQixNQUFqQixDQUF5QixHQUF6QixDQUE2QixpQkFBSztBQUFJLHlEQUN6QyxLQUR5QyxHQUNwQztBQUNSLHdCQUFVLEVBQUUsS0FBSSxDQUFDLGtCQUFMLENBQXdCLEtBQUssQ0FGRyxVQUVoQztBQURKLGFBRG9DO0FBRzVDLFdBSE07QUFIVSxTQURYO0FBREQsT0FEVjtBQVlELEtBYkQsQ0FhRSxPQUFPLEdBQVAsRUFBWTtBQUNaLGFBQU8sS0FBUDtBQUNEO0FBQ0YsR0FqQk87QUFtQlI7OztBQUNRLG9EQUFSLFVBQWdDLEtBQWhDLEVBQTRDO0FBQzFDLFFBQUk7QUFDRixtREFDSyxLQURMLEdBQ1U7QUFDUixrQkFBVSxFQUFFLEtBQUssa0JBQUwsQ0FBd0IsS0FBSyxDQUFDLFVBQTlCO0FBREosT0FEVjtBQUlELEtBTEQsQ0FLRSxPQUFPLEdBQVAsRUFBWTtBQUNaLGFBQU8sS0FBUDtBQUNEO0FBQ0YsR0FUTztBQVdSOzs7QUFDUSwrQ0FBUixVQUEyQixVQUEzQixFQUFrRDtBQUFsRDs7QUFDRSxpREFDSyxVQURMLEdBQ2U7QUFDYixZQUFNLEVBQUUsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUF6QixJQUFtQyxVQUFVLENBQUMsTUFBWCxDQUFrQixHQUFsQixDQUFzQixhQUFDO0FBQUksb0JBQUksQ0FBQyxTQUFMO0FBQWlCLE9BQTVDO0FBRDlCLEtBRGY7QUFJRCxHQUxPO0FBNUdSOzs7OztBQUdjLHFCQUFhLGVBQWI7QUErR2hCO0FBQUMsQ0FuSEQ7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvZGlzdC9yZXdyaXRlZnJhbWVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50UHJvY2Vzc29yLCBIdWIsIEludGVncmF0aW9uLCBTdGFja0ZyYW1lLCBTdGFja3RyYWNlIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBiYXNlbmFtZSwgcmVsYXRpdmUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxudHlwZSBTdGFja0ZyYW1lSXRlcmF0ZWUgPSAoZnJhbWU6IFN0YWNrRnJhbWUpID0+IFN0YWNrRnJhbWU7XG5cbi8qKiBSZXdyaXRlIGV2ZW50IGZyYW1lcyBwYXRocyAqL1xuZXhwb3J0IGNsYXNzIFJld3JpdGVGcmFtZXMgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ1Jld3JpdGVGcmFtZXMnO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIG5hbWU6IHN0cmluZyA9IFJld3JpdGVGcmFtZXMuaWQ7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9yb290Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgcm9vdD86IHN0cmluZzsgaXRlcmF0ZWU/OiBTdGFja0ZyYW1lSXRlcmF0ZWUgfSA9IHt9KSB7XG4gICAgaWYgKG9wdGlvbnMucm9vdCkge1xuICAgICAgdGhpcy5fcm9vdCA9IG9wdGlvbnMucm9vdDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaXRlcmF0ZWUpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdGVlID0gb3B0aW9ucy5pdGVyYXRlZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3I6IChjYWxsYmFjazogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQsIGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IHZvaWQge1xuICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oUmV3cml0ZUZyYW1lcyk7XG4gICAgICBpZiAoc2VsZikge1xuICAgICAgICByZXR1cm4gc2VsZi5wcm9jZXNzKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBKU0RvYyAqL1xuICBwdWJsaWMgcHJvY2VzcyhldmVudDogRXZlbnQpOiBFdmVudCB7XG4gICAgaWYgKGV2ZW50LmV4Y2VwdGlvbiAmJiBBcnJheS5pc0FycmF5KGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnN0YWNrdHJhY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzU3RhY2t0cmFjZUV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2l0ZXJhdGVlOiBTdGFja0ZyYW1lSXRlcmF0ZWUgPSAoZnJhbWU6IFN0YWNrRnJhbWUpID0+IHtcbiAgICBpZiAoIWZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZSBmcmFtZSBmaWxlbmFtZSBiZWdpbnMgd2l0aCBgL2Agb3IgYSBXaW5kb3dzLXN0eWxlIHByZWZpeCBzdWNoIGFzIGBDOlxcYFxuICAgIGNvbnN0IGlzV2luZG93c0ZyYW1lID0gL15bQS1aXTpcXFxcLy50ZXN0KGZyYW1lLmZpbGVuYW1lKTtcbiAgICBjb25zdCBzdGFydHNXaXRoU2xhc2ggPSAvXlxcLy8udGVzdChmcmFtZS5maWxlbmFtZSk7XG4gICAgaWYgKGlzV2luZG93c0ZyYW1lIHx8IHN0YXJ0c1dpdGhTbGFzaCkge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBpc1dpbmRvd3NGcmFtZVxuICAgICAgICA/IGZyYW1lLmZpbGVuYW1lXG4gICAgICAgICAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJykgLy8gcmVwbGFjZSBhbGwgYFxcXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxuICAgICAgICA6IGZyYW1lLmZpbGVuYW1lO1xuICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX3Jvb3QgPyByZWxhdGl2ZSh0aGlzLl9yb290LCBmaWxlbmFtZSkgOiBiYXNlbmFtZShmaWxlbmFtZSk7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IGBhcHA6Ly8vJHtiYXNlfWA7XG4gICAgfVxuICAgIHJldHVybiBmcmFtZTtcbiAgfTtcblxuICAvKiogSlNEb2MgKi9cbiAgcHJpdmF0ZSBfcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudChldmVudDogRXZlbnQpOiBFdmVudCB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBleGNlcHRpb246IHtcbiAgICAgICAgICAuLi5ldmVudC5leGNlcHRpb24sXG4gICAgICAgICAgLy8gVGhlIGNoZWNrIGZvciB0aGlzIGlzIHBlcmZvcm1lZCBpbnNpZGUgYHByb2Nlc3NgIGNhbGwgaXRzZWxmLCBzYWZlIHRvIHNraXAgaGVyZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgdmFsdWVzOiBldmVudC5leGNlcHRpb24hLnZhbHVlcyEubWFwKHZhbHVlID0+ICh7XG4gICAgICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgICAgIHN0YWNrdHJhY2U6IHRoaXMuX3Byb2Nlc3NTdGFja3RyYWNlKHZhbHVlLnN0YWNrdHJhY2UpLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIHByaXZhdGUgX3Byb2Nlc3NTdGFja3RyYWNlRXZlbnQoZXZlbnQ6IEV2ZW50KTogRXZlbnQge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgc3RhY2t0cmFjZTogdGhpcy5fcHJvY2Vzc1N0YWNrdHJhY2UoZXZlbnQuc3RhY2t0cmFjZSksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKF9vTykge1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKiBKU0RvYyAqL1xuICBwcml2YXRlIF9wcm9jZXNzU3RhY2t0cmFjZShzdGFja3RyYWNlPzogU3RhY2t0cmFjZSk6IFN0YWNrdHJhY2Uge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGFja3RyYWNlLFxuICAgICAgZnJhbWVzOiBzdGFja3RyYWNlICYmIHN0YWNrdHJhY2UuZnJhbWVzICYmIHN0YWNrdHJhY2UuZnJhbWVzLm1hcChmID0+IHRoaXMuX2l0ZXJhdGVlKGYpKSxcbiAgICB9O1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/rewriteframes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/sessiontiming.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/sessiontiming.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n/** This function adds duration since Sentry was initialized till the time event was sent */\n\n\nvar SessionTiming =\n/** @class */\nfunction () {\n  function SessionTiming() {\n    /**\n     * @inheritDoc\n     */\n    this.name = SessionTiming.id;\n    /** Exact time Client was initialized expressed in milliseconds since Unix Epoch. */\n\n    this._startTime = Date.now();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(SessionTiming);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.prototype.process = function (event) {\n    var _a;\n\n    var now = Date.now();\n    return tslib_1.__assign(tslib_1.__assign({}, event), {\n      extra: tslib_1.__assign(tslib_1.__assign({}, event.extra), (_a = {}, _a['session:start'] = this._startTime, _a['session:duration'] = now - this._startTime, _a['session:end'] = now, _a))\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  SessionTiming.id = 'SessionTiming';\n  return SessionTiming;\n}();\n\nexports.SessionTiming = SessionTiming;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc2Vzc2lvbnRpbWluZy50cz85N2E3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFNRTs7O0FBR08sZ0JBQWUsYUFBYSxDQUFDLEVBQTdCO0FBRVA7O0FBQ21CLHNCQUFxQixJQUFJLENBQUMsR0FBTCxFQUFyQjtBQStCcEI7QUE3QkM7Ozs7O0FBR08sc0NBQVAsVUFBaUIsdUJBQWpCLEVBQThFLGFBQTlFLEVBQXNHO0FBQ3BHLDJCQUF1QixDQUFDLGlCQUFLO0FBQzNCLFVBQU0sSUFBSSxHQUFHLGFBQWEsR0FBRyxjQUFoQixDQUErQixhQUEvQixDQUFiOztBQUNBLFVBQUksSUFBSixFQUFVO0FBQ1IsZUFBTyxJQUFJLENBQUMsT0FBTCxDQUFhLEtBQWIsQ0FBUDtBQUNEOztBQUNELGFBQU8sS0FBUDtBQUNELEtBTnNCLENBQXZCO0FBT0QsR0FSTTtBQVVQOzs7OztBQUdPLG9DQUFQLFVBQWUsS0FBZixFQUEyQjs7O0FBQ3pCLFFBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFMLEVBQVo7QUFFQSxpREFDSyxLQURMLEdBQ1U7QUFDUixXQUFLLHdDQUNBLEtBQUssQ0FBQyxLQUROLElBQ1csWUFDYixlQURhLElBQ0ssS0FBSyxVQURWLEVBQ29CLEdBQ2pDLGtCQURpQyxJQUNaLEdBQUcsR0FBRyxLQUFLLFVBRm5CLEVBRTZCLEdBQzFDLGFBRDBDLElBQzFCLEdBSEgsRUFHTSxFQUpqQjtBQURHLEtBRFY7QUFTRCxHQVpNO0FBN0JQOzs7OztBQUdjLHFCQUFhLGVBQWI7QUF1Q2hCO0FBQUMsQ0EzQ0Q7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvZGlzdC9zZXNzaW9udGltaW5nLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50UHJvY2Vzc29yLCBIdWIsIEludGVncmF0aW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbi8qKiBUaGlzIGZ1bmN0aW9uIGFkZHMgZHVyYXRpb24gc2luY2UgU2VudHJ5IHdhcyBpbml0aWFsaXplZCB0aWxsIHRoZSB0aW1lIGV2ZW50IHdhcyBzZW50ICovXG5leHBvcnQgY2xhc3MgU2Vzc2lvblRpbWluZyBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnU2Vzc2lvblRpbWluZyc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gU2Vzc2lvblRpbWluZy5pZDtcblxuICAvKiogRXhhY3QgdGltZSBDbGllbnQgd2FzIGluaXRpYWxpemVkIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMgc2luY2UgVW5peCBFcG9jaC4gKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IF9zdGFydFRpbWU6IG51bWJlciA9IERhdGUubm93KCk7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihldmVudCA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKFNlc3Npb25UaW1pbmcpO1xuICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYucHJvY2VzcyhldmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBwcm9jZXNzKGV2ZW50OiBFdmVudCk6IEV2ZW50IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmV2ZW50LFxuICAgICAgZXh0cmE6IHtcbiAgICAgICAgLi4uZXZlbnQuZXh0cmEsXG4gICAgICAgIFsnc2Vzc2lvbjpzdGFydCddOiB0aGlzLl9zdGFydFRpbWUsXG4gICAgICAgIFsnc2Vzc2lvbjpkdXJhdGlvbiddOiBub3cgLSB0aGlzLl9zdGFydFRpbWUsXG4gICAgICAgIFsnc2Vzc2lvbjplbmQnXTogbm93LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/sessiontiming.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/transaction.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/transaction.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** Add node transaction to the event */\n\nvar Transaction =\n/** @class */\nfunction () {\n  function Transaction() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Transaction.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(Transaction);\n\n      if (self) {\n        return self.process(event);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.prototype.process = function (event) {\n    var frames = this._getFramesFromEvent(event); // use for loop so we don't have to reverse whole frames array\n\n\n    for (var i = frames.length - 1; i >= 0; i--) {\n      var frame = frames[i];\n\n      if (frame.in_app === true) {\n        event.transaction = this._getTransaction(frame);\n        break;\n      }\n    }\n\n    return event;\n  };\n  /** JSDoc */\n\n\n  Transaction.prototype._getFramesFromEvent = function (event) {\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n    return exception && exception.stacktrace && exception.stacktrace.frames || [];\n  };\n  /** JSDoc */\n\n\n  Transaction.prototype._getTransaction = function (frame) {\n    return frame.module || frame.function ? (frame.module || '?') + \"/\" + (frame.function || '?') : '<unknown>';\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Transaction.id = 'Transaction';\n  return Transaction;\n}();\n\nexports.Transaction = Transaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvdHJhbnNhY3Rpb24udHM/NzU2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBTUU7OztBQUdPLGdCQUFlLFdBQVcsQ0FBQyxFQUEzQjtBQTRDUjtBQTFDQzs7Ozs7QUFHTyxvQ0FBUCxVQUFpQix1QkFBakIsRUFBOEUsYUFBOUUsRUFBc0c7QUFDcEcsMkJBQXVCLENBQUMsaUJBQUs7QUFDM0IsVUFBTSxJQUFJLEdBQUcsYUFBYSxHQUFHLGNBQWhCLENBQStCLFdBQS9CLENBQWI7O0FBQ0EsVUFBSSxJQUFKLEVBQVU7QUFDUixlQUFPLElBQUksQ0FBQyxPQUFMLENBQWEsS0FBYixDQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxLQUFQO0FBQ0QsS0FOc0IsQ0FBdkI7QUFPRCxHQVJNO0FBVVA7Ozs7O0FBR08sa0NBQVAsVUFBZSxLQUFmLEVBQTJCO0FBQ3pCLFFBQU0sTUFBTSxHQUFHLEtBQUssbUJBQUwsQ0FBeUIsS0FBekIsQ0FBZixDQUR5QixDQUd6Qjs7O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBUCxHQUFnQixDQUE3QixFQUFnQyxDQUFDLElBQUksQ0FBckMsRUFBd0MsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxVQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBRCxDQUFwQjs7QUFFQSxVQUFJLEtBQUssQ0FBQyxNQUFOLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLGFBQUssQ0FBQyxXQUFOLEdBQW9CLEtBQUssZUFBTCxDQUFxQixLQUFyQixDQUFwQjtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPLEtBQVA7QUFDRCxHQWRNO0FBZ0JQOzs7QUFDUSw4Q0FBUixVQUE0QixLQUE1QixFQUF3QztBQUN0QyxRQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBTixJQUFtQixLQUFLLENBQUMsU0FBTixDQUFnQixNQUFuQyxJQUE2QyxLQUFLLENBQUMsU0FBTixDQUFnQixNQUFoQixDQUF1QixDQUF2QixDQUEvRDtBQUNBLFdBQVEsU0FBUyxJQUFJLFNBQVMsQ0FBQyxVQUF2QixJQUFxQyxTQUFTLENBQUMsVUFBVixDQUFxQixNQUEzRCxJQUFzRSxFQUE3RTtBQUNELEdBSE87QUFLUjs7O0FBQ1EsMENBQVIsVUFBd0IsS0FBeEIsRUFBeUM7QUFDdkMsV0FBTyxLQUFLLENBQUMsTUFBTixJQUFnQixLQUFLLENBQUMsUUFBdEIsR0FBaUMsQ0FBRyxLQUFLLENBQUMsTUFBTixJQUFnQixHQUFuQixJQUFzQixHQUF0QixJQUEwQixLQUFLLENBQUMsUUFBTixJQUFrQixHQUE1QyxDQUFqQyxHQUFxRixXQUE1RjtBQUNELEdBRk87QUFqRFI7Ozs7O0FBR2MsbUJBQWEsYUFBYjtBQWlEaEI7QUFBQyxDQXJERDs7QUFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2ludGVncmF0aW9ucy9kaXN0L3RyYW5zYWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIEV2ZW50UHJvY2Vzc29yLCBIdWIsIEludGVncmF0aW9uLCBTdGFja0ZyYW1lIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbi8qKiBBZGQgbm9kZSB0cmFuc2FjdGlvbiB0byB0aGUgZXZlbnQgKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnVHJhbnNhY3Rpb24nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIG5hbWU6IHN0cmluZyA9IFRyYW5zYWN0aW9uLmlkO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShhZGRHbG9iYWxFdmVudFByb2Nlc3NvcjogKGNhbGxiYWNrOiBFdmVudFByb2Nlc3NvcikgPT4gdm9pZCwgZ2V0Q3VycmVudEh1YjogKCkgPT4gSHViKTogdm9pZCB7XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZXZlbnQgPT4ge1xuICAgICAgY29uc3Qgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihUcmFuc2FjdGlvbik7XG4gICAgICBpZiAoc2VsZikge1xuICAgICAgICByZXR1cm4gc2VsZi5wcm9jZXNzKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHByb2Nlc3MoZXZlbnQ6IEV2ZW50KTogRXZlbnQge1xuICAgIGNvbnN0IGZyYW1lcyA9IHRoaXMuX2dldEZyYW1lc0Zyb21FdmVudChldmVudCk7XG5cbiAgICAvLyB1c2UgZm9yIGxvb3Agc28gd2UgZG9uJ3QgaGF2ZSB0byByZXZlcnNlIHdob2xlIGZyYW1lcyBhcnJheVxuICAgIGZvciAobGV0IGkgPSBmcmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGZyYW1lID0gZnJhbWVzW2ldO1xuXG4gICAgICBpZiAoZnJhbWUuaW5fYXBwID09PSB0cnVlKSB7XG4gICAgICAgIGV2ZW50LnRyYW5zYWN0aW9uID0gdGhpcy5fZ2V0VHJhbnNhY3Rpb24oZnJhbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICAvKiogSlNEb2MgKi9cbiAgcHJpdmF0ZSBfZ2V0RnJhbWVzRnJvbUV2ZW50KGV2ZW50OiBFdmVudCk6IFN0YWNrRnJhbWVbXSB7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1swXTtcbiAgICByZXR1cm4gKGV4Y2VwdGlvbiAmJiBleGNlcHRpb24uc3RhY2t0cmFjZSAmJiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMpIHx8IFtdO1xuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIHByaXZhdGUgX2dldFRyYW5zYWN0aW9uKGZyYW1lOiBTdGFja0ZyYW1lKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZnJhbWUubW9kdWxlIHx8IGZyYW1lLmZ1bmN0aW9uID8gYCR7ZnJhbWUubW9kdWxlIHx8ICc/J30vJHtmcmFtZS5mdW5jdGlvbiB8fCAnPyd9YCA6ICc8dW5rbm93bj4nO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/transaction.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/dist/vue.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/integrations/dist/vue.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.replace */ \"./node_modules/core-js/modules/es.string.replace.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar utils_1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/dist/index.js\");\n/**\n * Used to extract Tracing integration from the current client,\n * without the need to import `Tracing` itself from the @sentry/apm package.\n * @deprecated as @sentry/tracing should be used over @sentry/apm.\n */\n\n\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\n/**\n * Used to extract BrowserTracing integration from @sentry/tracing\n */\n\nvar BROWSER_TRACING_GETTER = {\n  id: 'BrowserTracing'\n}; // Mappings from operation to corresponding lifecycle hook.\n\nvar HOOKS = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated']\n};\nvar COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\\w)/g;\nvar ROOT_COMPONENT_NAME = 'root';\nvar ANONYMOUS_COMPONENT_NAME = 'anonymous component';\n/** JSDoc */\n\nvar Vue =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Vue(options) {\n    var _this = this;\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Vue.id;\n    /**\n     * Cache holding already processed component names\n     */\n\n    this._componentsCache = {};\n    /** Keep it as attribute function, to keep correct `this` binding inside the hooks callbacks  */\n    // eslint-disable-next-line @typescript-eslint/typedef\n\n    this._applyTracingHooks = function (vm, getCurrentHub) {\n      // Don't attach twice, just in case\n      if (vm.$options.$_sentryPerfHook) {\n        return;\n      }\n\n      vm.$options.$_sentryPerfHook = true;\n\n      var name = _this._getComponentName(vm);\n\n      var rootMount = name === ROOT_COMPONENT_NAME;\n      var spans = {}; // Render hook starts after once event is emitted,\n      // but it ends before the second event of the same type.\n      //\n      // Because of this, we start measuring inside the first event,\n      // but finish it before it triggers, to skip the event emitter timing itself.\n\n      var rootHandler = function rootHandler(hook) {\n        var now = utils_1.timestampWithMs(); // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n\n        if (_this._rootSpan) {\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            // Create an activity on the first event call. There'll be no second call, as rootSpan will be in place,\n            // thus new event handler won't be attached.\n            // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n            // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n\n            /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n            // eslint-disable-next-line deprecation/deprecation\n            var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n\n            if (tracingIntegration) {\n              _this._tracingActivity = tracingIntegration.constructor.pushActivity('Vue Application Render');\n              var transaction = tracingIntegration.constructor.getTransaction();\n\n              if (transaction) {\n                _this._rootSpan = transaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              } // Use functionality from @sentry/tracing\n\n            } else {\n              var activeTransaction = getActiveTransaction(getCurrentHub());\n\n              if (activeTransaction) {\n                _this._rootSpan = activeTransaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              }\n            }\n            /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n          });\n        }\n      };\n\n      var childHandler = function childHandler(hook, operation) {\n        // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n        var shouldTrack = Array.isArray(_this._options.tracingOptions.trackComponents) ? _this._options.tracingOptions.trackComponents.indexOf(name) > -1 : _this._options.tracingOptions.trackComponents;\n\n        if (!_this._rootSpan || !shouldTrack) {\n          return;\n        }\n\n        var now = utils_1.timestampWithMs();\n        var span = spans[operation]; // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n\n        if (span) {\n          span.finish();\n\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            if (_this._rootSpan) {\n              spans[operation] = _this._rootSpan.startChild({\n                description: \"Vue <\" + name + \">\",\n                op: operation\n              });\n            }\n          });\n        }\n      }; // Each component has it's own scope, so all activities are only related to one of them\n\n\n      _this._options.tracingOptions.hooks.forEach(function (operation) {\n        // Retrieve corresponding hooks from Vue lifecycle.\n        // eg. mount => ['beforeMount', 'mounted']\n        var internalHooks = HOOKS[operation];\n\n        if (!internalHooks) {\n          utils_1.logger.warn(\"Unknown hook: \" + operation);\n          return;\n        }\n\n        internalHooks.forEach(function (internalHook) {\n          var handler = rootMount ? rootHandler.bind(_this, internalHook) : childHandler.bind(_this, internalHook, operation);\n          var currentValue = vm.$options[internalHook];\n\n          if (Array.isArray(currentValue)) {\n            vm.$options[internalHook] = tslib_1.__spread([handler], currentValue);\n          } else if (typeof currentValue === 'function') {\n            vm.$options[internalHook] = [handler, currentValue];\n          } else {\n            vm.$options[internalHook] = [handler];\n          }\n        });\n      });\n    };\n\n    this._options = tslib_1.__assign(tslib_1.__assign({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Vue: utils_1.getGlobalObject().Vue,\n      attachProps: true,\n      logErrors: false,\n      tracing: false\n    }, options), {\n      tracingOptions: tslib_1.__assign({\n        hooks: ['mount', 'update'],\n        timeout: 2000,\n        trackComponents: false\n      }, options.tracingOptions)\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Vue.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!this._options.Vue) {\n      utils_1.logger.error('Vue integration is missing a Vue instance');\n      return;\n    }\n\n    this._attachErrorHandler(getCurrentHub);\n\n    if (this._options.tracing) {\n      this._startTracing(getCurrentHub);\n    }\n  };\n  /**\n   * Extract component name from the ViewModel\n   */\n\n\n  Vue.prototype._getComponentName = function (vm) {\n    // Such level of granularity is most likely not necessary, but better safe than sorry. — Kamil\n    if (!vm) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$root === vm) {\n      return ROOT_COMPONENT_NAME;\n    }\n\n    if (!vm.$options) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$options.name) {\n      return vm.$options.name;\n    }\n\n    if (vm.$options._componentTag) {\n      return vm.$options._componentTag;\n    } // injected by vue-loader\n\n\n    if (vm.$options.__file) {\n      var unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/');\n\n      var filename = utils_1.basename(unifiedFile, '.vue');\n      return this._componentsCache[filename] || (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, function (_, c) {\n        return c ? c.toUpperCase() : '';\n      }));\n    }\n\n    return ANONYMOUS_COMPONENT_NAME;\n  };\n  /** Finish top-level span and activity with a debounce configured using `timeout` option */\n\n\n  Vue.prototype._finishRootSpan = function (timestamp, getCurrentHub) {\n    var _this = this;\n\n    if (this._rootSpanTimer) {\n      clearTimeout(this._rootSpanTimer);\n    }\n\n    this._rootSpanTimer = setTimeout(function () {\n      if (_this._tracingActivity) {\n        // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n        // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n        // eslint-disable-next-line deprecation/deprecation\n        var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n\n        if (tracingIntegration) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          tracingIntegration.constructor.popActivity(_this._tracingActivity);\n        }\n      } // We should always finish the span, only should pop activity if using @sentry/apm\n\n\n      if (_this._rootSpan) {\n        _this._rootSpan.finish(timestamp);\n      }\n    }, this._options.tracingOptions.timeout);\n  };\n  /** Inject configured tracing hooks into Vue's component lifecycles */\n\n\n  Vue.prototype._startTracing = function (getCurrentHub) {\n    var applyTracingHooks = this._applyTracingHooks;\n\n    this._options.Vue.mixin({\n      beforeCreate: function beforeCreate() {\n        // eslint-disable-next-line deprecation/deprecation\n        if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {\n          // `this` points to currently rendered component\n          applyTracingHooks(this, getCurrentHub);\n        } else {\n          utils_1.logger.error('Vue integration has tracing enabled, but Tracing integration is not configured');\n        }\n      }\n    });\n  };\n  /** Inject Sentry's handler into owns Vue's error handler  */\n\n\n  Vue.prototype._attachErrorHandler = function (getCurrentHub) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var currentErrorHandler = this._options.Vue.config.errorHandler;\n\n    this._options.Vue.config.errorHandler = function (error, vm, info) {\n      var metadata = {};\n\n      if (vm) {\n        try {\n          metadata.componentName = _this._getComponentName(vm);\n\n          if (_this._options.attachProps) {\n            metadata.propsData = vm.$options.propsData;\n          }\n        } catch (_oO) {\n          utils_1.logger.warn('Unable to extract metadata from Vue component.');\n        }\n      }\n\n      if (info) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n        setTimeout(function () {\n          getCurrentHub().withScope(function (scope) {\n            scope.setContext('vue', metadata);\n            getCurrentHub().captureException(error);\n          });\n        });\n      }\n\n      if (typeof currentErrorHandler === 'function') {\n        currentErrorHandler.call(_this._options.Vue, error, vm, info);\n      }\n\n      if (_this._options.logErrors) {\n        if (_this._options.Vue.util) {\n          _this._options.Vue.util.warn(\"Error in \" + info + \": \\\"\" + error.toString() + \"\\\"\", vm);\n        } // eslint-disable-next-line no-console\n\n\n        console.error(error);\n      }\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Vue.id = 'Vue';\n  return Vue;\n}();\n\nexports.Vue = Vue;\n/** Grabs active transaction off scope */\n\nfunction getActiveTransaction(hub) {\n  if (hub && hub.getScope) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\nexports.getActiveTransaction = getActiveTransaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/dist/vue.js\n");

/***/ }),

/***/ "./node_modules/@sentry/minimal/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/minimal/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar hub_1 = __webpack_require__(/*! @sentry/hub */ \"./node_modules/@sentry/hub/dist/index.js\");\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction callOnHub(method) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var hub = hub_1.getCurrentHub();\n\n  if (hub && hub[method]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hub[method].apply(hub, tslib_1.__spread(args));\n  }\n\n  throw new Error(\"No hub defined or \" + method + \" was not found on the hub, please open a bug report.\");\n}\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\nfunction captureException(exception, captureContext) {\n  var syntheticException;\n\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception;\n  }\n\n  return callOnHub('captureException', exception, {\n    captureContext: captureContext,\n    originalException: exception,\n    syntheticException: syntheticException\n  });\n}\n\nexports.captureException = captureException;\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\n\nfunction captureMessage(message, captureContext) {\n  var syntheticException;\n\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception;\n  } // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n\n\n  var level = typeof captureContext === 'string' ? captureContext : undefined;\n  var context = typeof captureContext !== 'string' ? {\n    captureContext: captureContext\n  } : undefined;\n  return callOnHub('captureMessage', message, level, tslib_1.__assign({\n    originalException: message,\n    syntheticException: syntheticException\n  }, context));\n}\n\nexports.captureMessage = captureMessage;\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\n\nfunction captureEvent(event) {\n  return callOnHub('captureEvent', event);\n}\n\nexports.captureEvent = captureEvent;\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\n\nfunction configureScope(callback) {\n  callOnHub('configureScope', callback);\n}\n\nexports.configureScope = configureScope;\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\n\nfunction addBreadcrumb(breadcrumb) {\n  callOnHub('addBreadcrumb', breadcrumb);\n}\n\nexports.addBreadcrumb = addBreadcrumb;\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction setContext(name, context) {\n  callOnHub('setContext', name, context);\n}\n\nexports.setContext = setContext;\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\n\nfunction setExtras(extras) {\n  callOnHub('setExtras', extras);\n}\n\nexports.setExtras = setExtras;\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\n\nfunction setTags(tags) {\n  callOnHub('setTags', tags);\n}\n\nexports.setTags = setTags;\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\n\nfunction setExtra(key, extra) {\n  callOnHub('setExtra', key, extra);\n}\n\nexports.setExtra = setExtra;\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\n\nfunction setTag(key, value) {\n  callOnHub('setTag', key, value);\n}\n\nexports.setTag = setTag;\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\n\nfunction setUser(user) {\n  callOnHub('setUser', user);\n}\n\nexports.setUser = setUser;\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\n\nfunction withScope(callback) {\n  callOnHub('withScope', callback);\n}\n\nexports.withScope = withScope;\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction _callOnClient(method) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  callOnHub.apply(void 0, tslib_1.__spread(['_invokeClient', method], args));\n}\n\nexports._callOnClient = _callOnClient;\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\n\nfunction startTransaction(context, customSamplingContext) {\n  return callOnHub('startTransaction', tslib_1.__assign({}, context), customSamplingContext);\n}\n\nexports.startTransaction = startTransaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQWNBOzs7OztBQUtBOzs7QUFDQSxTQUFTLFNBQVQsQ0FBc0IsTUFBdEIsRUFBb0M7QUFBRTs7T0FBQSxVLEVBQUEscUIsRUFBQSxJLEVBQWM7QUFBZDs7O0FBQ3BDLE1BQU0sR0FBRyxHQUFHLHFCQUFaOztBQUNBLE1BQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFELENBQWQsRUFBcUM7QUFDbkM7QUFDQSxXQUFRLEdBQUcsQ0FBQyxNQUFELENBQUgsQ0FBd0IsS0FBeEIsTUFBRyxpQkFBaUMsSUFBakMsQ0FBSCxDQUFSO0FBQ0Q7O0FBQ0QsUUFBTSxJQUFJLEtBQUosQ0FBVSx1QkFBcUIsTUFBckIsR0FBMkIsc0RBQXJDLENBQU47QUFDRDtBQUVEOzs7Ozs7QUFNQTs7O0FBQ0EsU0FBZ0IsZ0JBQWhCLENBQWlDLFNBQWpDLEVBQWlELGNBQWpELEVBQWdGO0FBQzlFLE1BQUksa0JBQUo7O0FBQ0EsTUFBSTtBQUNGLFVBQU0sSUFBSSxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPLFNBQVAsRUFBa0I7QUFDbEIsc0JBQWtCLEdBQUcsU0FBckI7QUFDRDs7QUFDRCxTQUFPLFNBQVMsQ0FBQyxrQkFBRCxFQUFxQixTQUFyQixFQUFnQztBQUM5QyxrQkFBYyxnQkFEZ0M7QUFFOUMscUJBQWlCLEVBQUUsU0FGMkI7QUFHOUMsc0JBQWtCO0FBSDRCLEdBQWhDLENBQWhCO0FBS0Q7O0FBWkQ7QUFjQTs7Ozs7Ozs7QUFPQSxTQUFnQixjQUFoQixDQUErQixPQUEvQixFQUFnRCxjQUFoRCxFQUEwRjtBQUN4RixNQUFJLGtCQUFKOztBQUNBLE1BQUk7QUFDRixVQUFNLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPLFNBQVAsRUFBa0I7QUFDbEIsc0JBQWtCLEdBQUcsU0FBckI7QUFDRCxHQU51RixDQVF4RjtBQUNBOzs7QUFDQSxNQUFNLEtBQUssR0FBRyxPQUFPLGNBQVAsS0FBMEIsUUFBMUIsR0FBcUMsY0FBckMsR0FBc0QsU0FBcEU7QUFDQSxNQUFNLE9BQU8sR0FBRyxPQUFPLGNBQVAsS0FBMEIsUUFBMUIsR0FBcUM7QUFBRSxrQkFBYztBQUFoQixHQUFyQyxHQUEwRCxTQUExRTtBQUVBLFNBQU8sU0FBUyxDQUFDLGdCQUFELEVBQW1CLE9BQW5CLEVBQTRCLEtBQTVCLEVBQWlDO0FBQy9DLHFCQUFpQixFQUFFLE9BRDRCO0FBRS9DLHNCQUFrQjtBQUY2QixLQUc1QyxPQUg0QyxDQUFqQyxDQUFoQjtBQUtEOztBQWxCRDtBQW9CQTs7Ozs7OztBQU1BLFNBQWdCLFlBQWhCLENBQTZCLEtBQTdCLEVBQXlDO0FBQ3ZDLFNBQU8sU0FBUyxDQUFDLGNBQUQsRUFBaUIsS0FBakIsQ0FBaEI7QUFDRDs7QUFGRDtBQUlBOzs7OztBQUlBLFNBQWdCLGNBQWhCLENBQStCLFFBQS9CLEVBQStEO0FBQzdELFdBQVMsQ0FBTyxnQkFBUCxFQUF5QixRQUF6QixDQUFUO0FBQ0Q7O0FBRkQ7QUFJQTs7Ozs7Ozs7O0FBUUEsU0FBZ0IsYUFBaEIsQ0FBOEIsVUFBOUIsRUFBb0Q7QUFDbEQsV0FBUyxDQUFPLGVBQVAsRUFBd0IsVUFBeEIsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7O0FBS0E7O0FBQ0EsU0FBZ0IsVUFBaEIsQ0FBMkIsSUFBM0IsRUFBeUMsT0FBekMsRUFBK0U7QUFDN0UsV0FBUyxDQUFPLFlBQVAsRUFBcUIsSUFBckIsRUFBMkIsT0FBM0IsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7O0FBSUEsU0FBZ0IsU0FBaEIsQ0FBMEIsTUFBMUIsRUFBd0M7QUFDdEMsV0FBUyxDQUFPLFdBQVAsRUFBb0IsTUFBcEIsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7O0FBSUEsU0FBZ0IsT0FBaEIsQ0FBd0IsSUFBeEIsRUFBdUQ7QUFDckQsV0FBUyxDQUFPLFNBQVAsRUFBa0IsSUFBbEIsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7OztBQUtBLFNBQWdCLFFBQWhCLENBQXlCLEdBQXpCLEVBQXNDLEtBQXRDLEVBQWtEO0FBQ2hELFdBQVMsQ0FBTyxVQUFQLEVBQW1CLEdBQW5CLEVBQXdCLEtBQXhCLENBQVQ7QUFDRDs7QUFGRDtBQUlBOzs7Ozs7QUFLQSxTQUFnQixNQUFoQixDQUF1QixHQUF2QixFQUFvQyxLQUFwQyxFQUFpRDtBQUMvQyxXQUFTLENBQU8sUUFBUCxFQUFpQixHQUFqQixFQUFzQixLQUF0QixDQUFUO0FBQ0Q7O0FBRkQ7QUFJQTs7Ozs7O0FBS0EsU0FBZ0IsT0FBaEIsQ0FBd0IsSUFBeEIsRUFBeUM7QUFDdkMsV0FBUyxDQUFPLFNBQVAsRUFBa0IsSUFBbEIsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7Ozs7Ozs7Ozs7O0FBYUEsU0FBZ0IsU0FBaEIsQ0FBMEIsUUFBMUIsRUFBMEQ7QUFDeEQsV0FBUyxDQUFPLFdBQVAsRUFBb0IsUUFBcEIsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7Ozs7Ozs7QUFVQTs7QUFDQSxTQUFnQixhQUFoQixDQUE4QixNQUE5QixFQUE0QztBQUFFOztPQUFBLFUsRUFBQSxxQixFQUFBLEksRUFBYztBQUFkOzs7QUFDNUMsV0FBUyxNQUFULENBQVMsTUFBVCxFQUFTLGtCQUFPLGVBQVAsRUFBd0IsTUFBeEIsR0FBbUMsSUFBbkMsQ0FBVDtBQUNEOztBQUZEO0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxTQUFnQixnQkFBaEIsQ0FDRSxPQURGLEVBRUUscUJBRkYsRUFFK0M7QUFFN0MsU0FBTyxTQUFTLENBQUMsa0JBQUQsRUFBbUIscUJBQU8sT0FBUCxDQUFuQixFQUFxQyxxQkFBckMsQ0FBaEI7QUFDRDs7QUFMRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L21pbmltYWwvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEN1cnJlbnRIdWIsIEh1YiwgU2NvcGUgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQge1xuICBCcmVhZGNydW1iLFxuICBDYXB0dXJlQ29udGV4dCxcbiAgQ3VzdG9tU2FtcGxpbmdDb250ZXh0LFxuICBFdmVudCxcbiAgRXh0cmEsXG4gIEV4dHJhcyxcbiAgU2V2ZXJpdHksXG4gIFRyYW5zYWN0aW9uLFxuICBUcmFuc2FjdGlvbkNvbnRleHQsXG4gIFVzZXIsXG59IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG4vKipcbiAqIFRoaXMgY2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgY3VycmVudCBodWIuXG4gKiBAcGFyYW0gbWV0aG9kIGZ1bmN0aW9uIHRvIGNhbGwgb24gaHViLlxuICogQHBhcmFtIGFyZ3MgdG8gcGFzcyB0byBmdW5jdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNhbGxPbkh1YjxUPihtZXRob2Q6IHN0cmluZywgLi4uYXJnczogYW55W10pOiBUIHtcbiAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICBpZiAoaHViICYmIGh1YlttZXRob2QgYXMga2V5b2YgSHViXSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcmV0dXJuIChodWJbbWV0aG9kIGFzIGtleW9mIEh1Yl0gYXMgYW55KSguLi5hcmdzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYE5vIGh1YiBkZWZpbmVkIG9yICR7bWV0aG9kfSB3YXMgbm90IGZvdW5kIG9uIHRoZSBodWIsIHBsZWFzZSBvcGVuIGEgYnVnIHJlcG9ydC5gKTtcbn1cblxuLyoqXG4gKiBDYXB0dXJlcyBhbiBleGNlcHRpb24gZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gZXhjZXB0aW9uIEFuIGV4Y2VwdGlvbi1saWtlIG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbjogYW55LCBjYXB0dXJlQ29udGV4dD86IENhcHR1cmVDb250ZXh0KTogc3RyaW5nIHtcbiAgbGV0IHN5bnRoZXRpY0V4Y2VwdGlvbjogRXJyb3I7XG4gIHRyeSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZW50cnkgc3ludGhldGljRXhjZXB0aW9uJyk7XG4gIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgIHN5bnRoZXRpY0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbiBhcyBFcnJvcjtcbiAgfVxuICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXhjZXB0aW9uJywgZXhjZXB0aW9uLCB7XG4gICAgY2FwdHVyZUNvbnRleHQsXG4gICAgb3JpZ2luYWxFeGNlcHRpb246IGV4Y2VwdGlvbixcbiAgICBzeW50aGV0aWNFeGNlcHRpb24sXG4gIH0pO1xufVxuXG4vKipcbiAqIENhcHR1cmVzIGEgbWVzc2FnZSBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gU2VudHJ5LlxuICogQHBhcmFtIGxldmVsIERlZmluZSB0aGUgbGV2ZWwgb2YgdGhlIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyBUaGUgZ2VuZXJhdGVkIGV2ZW50SWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGNhcHR1cmVDb250ZXh0PzogQ2FwdHVyZUNvbnRleHQgfCBTZXZlcml0eSk6IHN0cmluZyB7XG4gIGxldCBzeW50aGV0aWNFeGNlcHRpb246IEVycm9yO1xuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgc3ludGhldGljRXhjZXB0aW9uID0gZXhjZXB0aW9uIGFzIEVycm9yO1xuICB9XG5cbiAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gcHJvdmlkZSBleHBsaWNpdCBzY29wZXMgdXBncmFkZSwgd2l0aG91dCBjaGFuZ2luZyB0aGUgb3JpZ2luYWxcbiAgLy8gYXJpdHkgb2YgdGhlIGBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBsZXZlbClgIG1ldGhvZC5cbiAgY29uc3QgbGV2ZWwgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdzdHJpbmcnID8gY2FwdHVyZUNvbnRleHQgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGNvbnRleHQgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgIT09ICdzdHJpbmcnID8geyBjYXB0dXJlQ29udGV4dCB9IDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBjYWxsT25IdWIoJ2NhcHR1cmVNZXNzYWdlJywgbWVzc2FnZSwgbGV2ZWwsIHtcbiAgICBvcmlnaW5hbEV4Y2VwdGlvbjogbWVzc2FnZSxcbiAgICBzeW50aGV0aWNFeGNlcHRpb24sXG4gICAgLi4uY29udGV4dCxcbiAgfSk7XG59XG5cbi8qKlxuICogQ2FwdHVyZXMgYSBtYW51YWxseSBjcmVhdGVkIGV2ZW50IGFuZCBzZW5kcyBpdCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZXZlbnRJZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFdmVudChldmVudDogRXZlbnQpOiBzdHJpbmcge1xuICByZXR1cm4gY2FsbE9uSHViKCdjYXB0dXJlRXZlbnQnLCBldmVudCk7XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgdG8gc2V0IGNvbnRleHQgaW5mb3JtYXRpb24gb250byB0aGUgc2NvcGUuXG4gKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBTY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVNjb3BlKGNhbGxiYWNrOiAoc2NvcGU6IFNjb3BlKSA9PiB2b2lkKTogdm9pZCB7XG4gIGNhbGxPbkh1Yjx2b2lkPignY29uZmlndXJlU2NvcGUnLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogUmVjb3JkcyBhIG5ldyBicmVhZGNydW1iIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gZnV0dXJlIGV2ZW50cy5cbiAqXG4gKiBCcmVhZGNydW1icyB3aWxsIGJlIGFkZGVkIHRvIHN1YnNlcXVlbnQgZXZlbnRzIHRvIHByb3ZpZGUgbW9yZSBjb250ZXh0IG9uXG4gKiB1c2VyJ3MgYWN0aW9ucyBwcmlvciB0byBhbiBlcnJvciBvciBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYnJlYWRjcnVtYiBUaGUgYnJlYWRjcnVtYiB0byByZWNvcmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWI6IEJyZWFkY3J1bWIpOiB2b2lkIHtcbiAgY2FsbE9uSHViPHZvaWQ+KCdhZGRCcmVhZGNydW1iJywgYnJlYWRjcnVtYik7XG59XG5cbi8qKlxuICogU2V0cyBjb250ZXh0IGRhdGEgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqIEBwYXJhbSBuYW1lIG9mIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0gY29udGV4dCBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWxpemVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQobmFtZTogc3RyaW5nLCBjb250ZXh0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCk6IHZvaWQge1xuICBjYWxsT25IdWI8dm9pZD4oJ3NldENvbnRleHQnLCBuYW1lLCBjb250ZXh0KTtcbn1cblxuLyoqXG4gKiBTZXQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBtZXJnZWQgc2VudCBhcyBleHRyYSBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGV4dHJhcyBFeHRyYXMgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXh0cmFzKGV4dHJhczogRXh0cmFzKTogdm9pZCB7XG4gIGNhbGxPbkh1Yjx2b2lkPignc2V0RXh0cmFzJywgZXh0cmFzKTtcbn1cblxuLyoqXG4gKiBTZXQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBtZXJnZWQgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gdGFncyBUYWdzIGNvbnRleHQgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VGFncyh0YWdzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KTogdm9pZCB7XG4gIGNhbGxPbkh1Yjx2b2lkPignc2V0VGFncycsIHRhZ3MpO1xufVxuXG4vKipcbiAqIFNldCBrZXk6dmFsdWUgdGhhdCB3aWxsIGJlIHNlbnQgYXMgZXh0cmEgZGF0YSB3aXRoIHRoZSBldmVudC5cbiAqIEBwYXJhbSBrZXkgU3RyaW5nIG9mIGV4dHJhXG4gKiBAcGFyYW0gZXh0cmEgQW55IGtpbmQgb2YgZGF0YS4gVGhpcyBkYXRhIHdpbGwgYmUgbm9ybWFsaXplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEV4dHJhKGtleTogc3RyaW5nLCBleHRyYTogRXh0cmEpOiB2b2lkIHtcbiAgY2FsbE9uSHViPHZvaWQ+KCdzZXRFeHRyYScsIGtleSwgZXh0cmEpO1xufVxuXG4vKipcbiAqIFNldCBrZXk6dmFsdWUgdGhhdCB3aWxsIGJlIHNlbnQgYXMgdGFncyBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICogQHBhcmFtIGtleSBTdHJpbmcga2V5IG9mIHRhZ1xuICogQHBhcmFtIHZhbHVlIFN0cmluZyB2YWx1ZSBvZiB0YWdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRhZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICBjYWxsT25IdWI8dm9pZD4oJ3NldFRhZycsIGtleSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdXNlciBjb250ZXh0IGluZm9ybWF0aW9uIGZvciBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB1c2VyIFVzZXIgY29udGV4dCBvYmplY3QgdG8gYmUgc2V0IGluIHRoZSBjdXJyZW50IGNvbnRleHQuIFBhc3MgYG51bGxgIHRvIHVuc2V0IHRoZSB1c2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VXNlcih1c2VyOiBVc2VyIHwgbnVsbCk6IHZvaWQge1xuICBjYWxsT25IdWI8dm9pZD4oJ3NldFVzZXInLCB1c2VyKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqXG4gKiBUaGlzIGlzIGVzc2VudGlhbGx5IGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yOlxuICpcbiAqICAgICBwdXNoU2NvcGUoKTtcbiAqICAgICBjYWxsYmFjaygpO1xuICogICAgIHBvcFNjb3BlKCk7XG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBlbmNsb3NlZCBpbnRvIHB1c2gvcG9wU2NvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2NvcGUoY2FsbGJhY2s6IChzY29wZTogU2NvcGUpID0+IHZvaWQpOiB2b2lkIHtcbiAgY2FsbE9uSHViPHZvaWQ+KCd3aXRoU2NvcGUnLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogQ2FsbHMgYSBmdW5jdGlvbiBvbiB0aGUgbGF0ZXN0IGNsaWVudC4gVXNlIHRoaXMgd2l0aCBjYXV0aW9uLCBpdCdzIG1lYW50IGFzXG4gKiBpbiBcImludGVybmFsXCIgaGVscGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gZXhwb3NlIGV2ZXJ5IHBvc3NpYmxlIGZ1bmN0aW9uIGluXG4gKiB0aGUgc2hpbS4gSXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdCB0aGUgY2xpZW50IGFjdHVhbGx5IGltcGxlbWVudHMgdGhlXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gbWV0aG9kIFRoZSBtZXRob2QgdG8gY2FsbCBvbiB0aGUgY2xpZW50L2NsaWVudC5cbiAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBjbGllbnQvZm9udGVuZC5cbiAqIEBoaWRkZW5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBfY2FsbE9uQ2xpZW50KG1ldGhvZDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICBjYWxsT25IdWI8dm9pZD4oJ19pbnZva2VDbGllbnQnLCBtZXRob2QsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBhIG5ldyBgVHJhbnNhY3Rpb25gIGFuZCByZXR1cm5zIGl0LiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCB0byBtYW51YWwgdHJhY2luZyBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQSB0cmVlIHN0cnVjdHVyZSBjYW4gYmUgYnVpbHQgYnkgYWRkaW5nIGNoaWxkIHNwYW5zIHRvIHRoZSB0cmFuc2FjdGlvbiwgYW5kIGNoaWxkIHNwYW5zIHRvIG90aGVyIHNwYW5zLiBUbyBzdGFydCBhXG4gKiBuZXcgY2hpbGQgc3BhbiB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uIG9yIGFueSBzcGFuLCBjYWxsIHRoZSByZXNwZWN0aXZlIGAuc3RhcnRDaGlsZCgpYCBtZXRob2QuXG4gKlxuICogRXZlcnkgY2hpbGQgc3BhbiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQsIG90aGVyd2lzZSB0aGUgdW5maW5pc2hlZCBzcGFucyBhcmUgZGlzY2FyZGVkLlxuICpcbiAqIFRoZSB0cmFuc2FjdGlvbiBtdXN0IGJlIGZpbmlzaGVkIHdpdGggYSBjYWxsIHRvIGl0cyBgLmZpbmlzaCgpYCBtZXRob2QsIGF0IHdoaWNoIHBvaW50IHRoZSB0cmFuc2FjdGlvbiB3aXRoIGFsbCBpdHNcbiAqIGZpbmlzaGVkIGNoaWxkIHNwYW5zIHdpbGwgYmUgc2VudCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGNvbnRleHQgUHJvcGVydGllcyBvZiB0aGUgbmV3IGBUcmFuc2FjdGlvbmAuXG4gKiBAcGFyYW0gY3VzdG9tU2FtcGxpbmdDb250ZXh0IEluZm9ybWF0aW9uIGdpdmVuIHRvIHRoZSB0cmFuc2FjdGlvbiBzYW1wbGluZyBmdW5jdGlvbiAoYWxvbmcgd2l0aCBjb250ZXh0LWRlcGVuZGVudFxuICogZGVmYXVsdCB2YWx1ZXMpLiBTZWUge0BsaW5rIE9wdGlvbnMudHJhY2VzU2FtcGxlcn0uXG4gKlxuICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIHdoaWNoIHdhcyBqdXN0IHN0YXJ0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhbnNhY3Rpb24oXG4gIGNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCxcbiAgY3VzdG9tU2FtcGxpbmdDb250ZXh0PzogQ3VzdG9tU2FtcGxpbmdDb250ZXh0LFxuKTogVHJhbnNhY3Rpb24ge1xuICByZXR1cm4gY2FsbE9uSHViKCdzdGFydFRyYW5zYWN0aW9uJywgeyAuLi5jb250ZXh0IH0sIGN1c3RvbVNhbXBsaW5nQ29udGV4dCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/minimal/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/types/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/types/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar loglevel_1 = __webpack_require__(/*! ./loglevel */ \"./node_modules/@sentry/types/dist/loglevel.js\");\n\nexports.LogLevel = loglevel_1.LogLevel;\n\nvar session_1 = __webpack_require__(/*! ./session */ \"./node_modules/@sentry/types/dist/session.js\");\n\nexports.SessionStatus = session_1.SessionStatus;\n\nvar severity_1 = __webpack_require__(/*! ./severity */ \"./node_modules/@sentry/types/dist/severity.js\");\n\nexports.Severity = severity_1.Severity;\n\nvar status_1 = __webpack_require__(/*! ./status */ \"./node_modules/@sentry/types/dist/status.js\");\n\nexports.Status = status_1.Status;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBV0E7O0FBQVM7O0FBVVQ7O0FBQWtDOztBQUNsQzs7QUFBUzs7QUFJVDs7QUFBUyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBCcmVhZGNydW1iLCBCcmVhZGNydW1iSGludCB9IGZyb20gJy4vYnJlYWRjcnVtYic7XG5leHBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5leHBvcnQgeyBDb250ZXh0LCBDb250ZXh0cyB9IGZyb20gJy4vY29udGV4dCc7XG5leHBvcnQgeyBEc24sIERzbkNvbXBvbmVudHMsIERzbkxpa2UsIERzblByb3RvY29sIH0gZnJvbSAnLi9kc24nO1xuZXhwb3J0IHsgRXh0ZW5kZWRFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuZXhwb3J0IHsgRXZlbnQsIEV2ZW50SGludCB9IGZyb20gJy4vZXZlbnQnO1xuZXhwb3J0IHsgRXZlbnRQcm9jZXNzb3IgfSBmcm9tICcuL2V2ZW50cHJvY2Vzc29yJztcbmV4cG9ydCB7IEV4Y2VwdGlvbiB9IGZyb20gJy4vZXhjZXB0aW9uJztcbmV4cG9ydCB7IEV4dHJhLCBFeHRyYXMgfSBmcm9tICcuL2V4dHJhJztcbmV4cG9ydCB7IEh1YiB9IGZyb20gJy4vaHViJztcbmV4cG9ydCB7IEludGVncmF0aW9uLCBJbnRlZ3JhdGlvbkNsYXNzIH0gZnJvbSAnLi9pbnRlZ3JhdGlvbic7XG5leHBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4vbG9nbGV2ZWwnO1xuZXhwb3J0IHsgTWVjaGFuaXNtIH0gZnJvbSAnLi9tZWNoYW5pc20nO1xuZXhwb3J0IHsgRXh0cmFjdGVkTm9kZVJlcXVlc3REYXRhLCBXb3JrZXJMb2NhdGlvbiB9IGZyb20gJy4vbWlzYyc7XG5leHBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmV4cG9ydCB7IFBhY2thZ2UgfSBmcm9tICcuL3BhY2thZ2UnO1xuZXhwb3J0IHsgUmVxdWVzdCwgU2VudHJ5UmVxdWVzdCwgU2VudHJ5UmVxdWVzdFR5cGUgfSBmcm9tICcuL3JlcXVlc3QnO1xuZXhwb3J0IHsgUmVzcG9uc2UgfSBmcm9tICcuL3Jlc3BvbnNlJztcbmV4cG9ydCB7IFJ1bnRpbWUgfSBmcm9tICcuL3J1bnRpbWUnO1xuZXhwb3J0IHsgQ2FwdHVyZUNvbnRleHQsIFNjb3BlLCBTY29wZUNvbnRleHQgfSBmcm9tICcuL3Njb3BlJztcbmV4cG9ydCB7IFNka0luZm8gfSBmcm9tICcuL3Nka2luZm8nO1xuZXhwb3J0IHsgU2Vzc2lvbiwgU2Vzc2lvbkNvbnRleHQsIFNlc3Npb25TdGF0dXMgfSBmcm9tICcuL3Nlc3Npb24nO1xuZXhwb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICcuL3NldmVyaXR5JztcbmV4cG9ydCB7IFNwYW4sIFNwYW5Db250ZXh0IH0gZnJvbSAnLi9zcGFuJztcbmV4cG9ydCB7IFN0YWNrRnJhbWUgfSBmcm9tICcuL3N0YWNrZnJhbWUnO1xuZXhwb3J0IHsgU3RhY2t0cmFjZSB9IGZyb20gJy4vc3RhY2t0cmFjZSc7XG5leHBvcnQgeyBTdGF0dXMgfSBmcm9tICcuL3N0YXR1cyc7XG5leHBvcnQge1xuICBDdXN0b21TYW1wbGluZ0NvbnRleHQsXG4gIE1lYXN1cmVtZW50cyxcbiAgU2FtcGxpbmdDb250ZXh0LFxuICBUcmFjZXBhcmVudERhdGEsXG4gIFRyYW5zYWN0aW9uLFxuICBUcmFuc2FjdGlvbkNvbnRleHQsXG59IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuZXhwb3J0IHsgVGhyZWFkIH0gZnJvbSAnLi90aHJlYWQnO1xuZXhwb3J0IHsgVHJhbnNwb3J0LCBUcmFuc3BvcnRPcHRpb25zLCBUcmFuc3BvcnRDbGFzcyB9IGZyb20gJy4vdHJhbnNwb3J0JztcbmV4cG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuZXhwb3J0IHsgV3JhcHBlZEZ1bmN0aW9uIH0gZnJvbSAnLi93cmFwcGVkZnVuY3Rpb24nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/types/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/types/dist/loglevel.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/types/dist/loglevel.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** Console logging verbosity for the SDK. */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  /** No logs will be generated. */\n  LogLevel[LogLevel[\"None\"] = 0] = \"None\";\n  /** Only SDK internal errors will be logged. */\n\n  LogLevel[LogLevel[\"Error\"] = 1] = \"Error\";\n  /** Information useful for debugging the SDK will be logged. */\n\n  LogLevel[LogLevel[\"Debug\"] = 2] = \"Debug\";\n  /** All SDK actions will be logged. */\n\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvbG9nbGV2ZWwudHM/YjhiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7QUFDQSxJQUFZLFFBQVo7O0FBQUEsV0FBWSxRQUFaLEVBQW9CO0FBQ2xCO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDRCxDQVRELEVBQVksUUFBUSxHQUFSLHdDQUFRLEVBQVIsQ0FBWiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2Rpc3QvbG9nbGV2ZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29uc29sZSBsb2dnaW5nIHZlcmJvc2l0eSBmb3IgdGhlIFNESy4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgLyoqIE5vIGxvZ3Mgd2lsbCBiZSBnZW5lcmF0ZWQuICovXG4gIE5vbmUgPSAwLFxuICAvKiogT25seSBTREsgaW50ZXJuYWwgZXJyb3JzIHdpbGwgYmUgbG9nZ2VkLiAqL1xuICBFcnJvciA9IDEsXG4gIC8qKiBJbmZvcm1hdGlvbiB1c2VmdWwgZm9yIGRlYnVnZ2luZyB0aGUgU0RLIHdpbGwgYmUgbG9nZ2VkLiAqL1xuICBEZWJ1ZyA9IDIsXG4gIC8qKiBBbGwgU0RLIGFjdGlvbnMgd2lsbCBiZSBsb2dnZWQuICovXG4gIFZlcmJvc2UgPSAzLFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/types/dist/loglevel.js\n");

/***/ }),

/***/ "./node_modules/@sentry/types/dist/session.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/types/dist/session.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Session Status\n */\n\nvar SessionStatus;\n\n(function (SessionStatus) {\n  /** JSDoc */\n  SessionStatus[\"Ok\"] = \"ok\";\n  /** JSDoc */\n\n  SessionStatus[\"Exited\"] = \"exited\";\n  /** JSDoc */\n\n  SessionStatus[\"Crashed\"] = \"crashed\";\n  /** JSDoc */\n\n  SessionStatus[\"Abnormal\"] = \"abnormal\";\n})(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc2Vzc2lvbi50cz9kMWU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWlEQTs7OztBQUdBLElBQVksYUFBWjs7QUFBQSxXQUFZLGFBQVosRUFBeUI7QUFDdkI7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNELENBVEQsRUFBWSxhQUFhLEdBQWIsa0RBQWEsRUFBYixDQUFaIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHlwZXMvZGlzdC9zZXNzaW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlcic7XG5cbi8qKlxuICogQGluaGVyaXRkb2NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uIGV4dGVuZHMgU2Vzc2lvbkNvbnRleHQge1xuICAvKiogSlNEb2MgKi9cbiAgdXBkYXRlKGNvbnRleHQ/OiBTZXNzaW9uQ29udGV4dCk6IHZvaWQ7XG5cbiAgLyoqIEpTRG9jICovXG4gIGNsb3NlKHN0YXR1cz86IFNlc3Npb25TdGF0dXMpOiB2b2lkO1xuXG4gIC8qKiBKU0RvYyAqL1xuICB0b0pTT04oKToge1xuICAgIGluaXQ6IGJvb2xlYW47XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgZGlkPzogc3RyaW5nO1xuICAgIHRpbWVzdGFtcDogc3RyaW5nO1xuICAgIHN0YXJ0ZWQ6IHN0cmluZztcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIHN0YXR1czogU2Vzc2lvblN0YXR1cztcbiAgICBlcnJvcnM6IG51bWJlcjtcbiAgICBhdHRycz86IHtcbiAgICAgIHJlbGVhc2U/OiBzdHJpbmc7XG4gICAgICBlbnZpcm9ubWVudD86IHN0cmluZztcbiAgICAgIHVzZXJfYWdlbnQ/OiBzdHJpbmc7XG4gICAgICBpcF9hZGRyZXNzPzogc3RyaW5nO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogU2Vzc2lvbiBDb250ZXh0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvbkNvbnRleHQge1xuICBzaWQ/OiBzdHJpbmc7XG4gIGRpZD86IHN0cmluZztcbiAgdGltZXN0YW1wPzogbnVtYmVyO1xuICBzdGFydGVkPzogbnVtYmVyO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgc3RhdHVzPzogU2Vzc2lvblN0YXR1cztcbiAgcmVsZWFzZT86IHN0cmluZztcbiAgZW52aXJvbm1lbnQ/OiBzdHJpbmc7XG4gIHVzZXJBZ2VudD86IHN0cmluZztcbiAgaXBBZGRyZXNzPzogc3RyaW5nO1xuICBlcnJvcnM/OiBudW1iZXI7XG4gIHVzZXI/OiBVc2VyIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBTZXNzaW9uIFN0YXR1c1xuICovXG5leHBvcnQgZW51bSBTZXNzaW9uU3RhdHVzIHtcbiAgLyoqIEpTRG9jICovXG4gIE9rID0gJ29rJyxcbiAgLyoqIEpTRG9jICovXG4gIEV4aXRlZCA9ICdleGl0ZWQnLFxuICAvKiogSlNEb2MgKi9cbiAgQ3Jhc2hlZCA9ICdjcmFzaGVkJyxcbiAgLyoqIEpTRG9jICovXG4gIEFibm9ybWFsID0gJ2Fibm9ybWFsJyxcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/types/dist/session.js\n");

/***/ }),

/***/ "./node_modules/@sentry/types/dist/severity.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/types/dist/severity.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** JSDoc */\n// eslint-disable-next-line import/export\n\nvar Severity;\n\n(function (Severity) {\n  /** JSDoc */\n  Severity[\"Fatal\"] = \"fatal\";\n  /** JSDoc */\n\n  Severity[\"Error\"] = \"error\";\n  /** JSDoc */\n\n  Severity[\"Warning\"] = \"warning\";\n  /** JSDoc */\n\n  Severity[\"Log\"] = \"log\";\n  /** JSDoc */\n\n  Severity[\"Info\"] = \"info\";\n  /** JSDoc */\n\n  Severity[\"Debug\"] = \"debug\";\n  /** JSDoc */\n\n  Severity[\"Critical\"] = \"critical\";\n})(Severity = exports.Severity || (exports.Severity = {})); // eslint-disable-next-line @typescript-eslint/no-namespace, import/export\n\n\n(function (Severity) {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  function fromString(level) {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n\n      case 'info':\n        return Severity.Info;\n\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n\n      case 'error':\n        return Severity.Error;\n\n      case 'fatal':\n        return Severity.Fatal;\n\n      case 'critical':\n        return Severity.Critical;\n\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n\n  Severity.fromString = fromString;\n})(Severity = exports.Severity || (exports.Severity = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc2V2ZXJpdHkudHM/NzYzYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBOztBQUNBLElBQVksUUFBWjs7QUFBQSxXQUFZLFFBQVosRUFBb0I7QUFDbEI7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNELENBZkQsRUFBWSxRQUFRLEdBQVIsd0NBQVEsRUFBUixDQUFaLEUsQ0FpQkE7OztBQUNBLFdBQWlCLFFBQWpCLEVBQXlCO0FBQ3ZCOzs7Ozs7QUFNQSxXQUFnQixVQUFoQixDQUEyQixLQUEzQixFQUF3QztBQUN0QyxZQUFRLEtBQVI7QUFDRSxXQUFLLE9BQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxLQUFoQjs7QUFDRixXQUFLLE1BQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxJQUFoQjs7QUFDRixXQUFLLE1BQUw7QUFDQSxXQUFLLFNBQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxPQUFoQjs7QUFDRixXQUFLLE9BQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxLQUFoQjs7QUFDRixXQUFLLE9BQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxLQUFoQjs7QUFDRixXQUFLLFVBQUw7QUFDRSxlQUFPLFFBQVEsQ0FBQyxRQUFoQjs7QUFDRixXQUFLLEtBQUw7QUFDQTtBQUNFLGVBQU8sUUFBUSxDQUFDLEdBQWhCO0FBaEJKO0FBa0JEOztBQW5CZSx3QkFBVSxVQUFWO0FBb0JqQixDQTNCRCxFQUFpQixRQUFRLEdBQVIsd0NBQVEsRUFBUixDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3R5cGVzL2Rpc3Qvc2V2ZXJpdHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogSlNEb2MgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvZXhwb3J0XG5leHBvcnQgZW51bSBTZXZlcml0eSB7XG4gIC8qKiBKU0RvYyAqL1xuICBGYXRhbCA9ICdmYXRhbCcsXG4gIC8qKiBKU0RvYyAqL1xuICBFcnJvciA9ICdlcnJvcicsXG4gIC8qKiBKU0RvYyAqL1xuICBXYXJuaW5nID0gJ3dhcm5pbmcnLFxuICAvKiogSlNEb2MgKi9cbiAgTG9nID0gJ2xvZycsXG4gIC8qKiBKU0RvYyAqL1xuICBJbmZvID0gJ2luZm8nLFxuICAvKiogSlNEb2MgKi9cbiAgRGVidWcgPSAnZGVidWcnLFxuICAvKiogSlNEb2MgKi9cbiAgQ3JpdGljYWwgPSAnY3JpdGljYWwnLFxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZSwgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IG5hbWVzcGFjZSBTZXZlcml0eSB7XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIHN0cmluZy1iYXNlZCBsZXZlbCBpbnRvIGEge0BsaW5rIFNldmVyaXR5fS5cbiAgICpcbiAgICogQHBhcmFtIGxldmVsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBTZXZlcml0eVxuICAgKiBAcmV0dXJucyBTZXZlcml0eVxuICAgKi9cbiAgZXhwb3J0IGZ1bmN0aW9uIGZyb21TdHJpbmcobGV2ZWw6IHN0cmluZyk6IFNldmVyaXR5IHtcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlICdkZWJ1Zyc6XG4gICAgICAgIHJldHVybiBTZXZlcml0eS5EZWJ1ZztcbiAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICByZXR1cm4gU2V2ZXJpdHkuSW5mbztcbiAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgIHJldHVybiBTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICByZXR1cm4gU2V2ZXJpdHkuRXJyb3I7XG4gICAgICBjYXNlICdmYXRhbCc6XG4gICAgICAgIHJldHVybiBTZXZlcml0eS5GYXRhbDtcbiAgICAgIGNhc2UgJ2NyaXRpY2FsJzpcbiAgICAgICAgcmV0dXJuIFNldmVyaXR5LkNyaXRpY2FsO1xuICAgICAgY2FzZSAnbG9nJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBTZXZlcml0eS5Mb2c7XG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/types/dist/severity.js\n");

/***/ }),

/***/ "./node_modules/@sentry/types/dist/status.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/types/dist/status.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** The status of an event. */\n// eslint-disable-next-line import/export\n\nvar Status;\n\n(function (Status) {\n  /** The status could not be determined. */\n  Status[\"Unknown\"] = \"unknown\";\n  /** The event was skipped due to configuration or callbacks. */\n\n  Status[\"Skipped\"] = \"skipped\";\n  /** The event was sent to Sentry successfully. */\n\n  Status[\"Success\"] = \"success\";\n  /** The client is currently rate limited and will try again later. */\n\n  Status[\"RateLimit\"] = \"rate_limit\";\n  /** The event could not be processed. */\n\n  Status[\"Invalid\"] = \"invalid\";\n  /** A server-side error ocurred during submission. */\n\n  Status[\"Failed\"] = \"failed\";\n})(Status = exports.Status || (exports.Status = {})); // eslint-disable-next-line @typescript-eslint/no-namespace, import/export\n\n\n(function (Status) {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  function fromHttpCode(code) {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n\n  Status.fromHttpCode = fromHttpCode;\n})(Status = exports.Status || (exports.Status = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc3RhdHVzLnRzPzJmOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTs7QUFDQSxJQUFZLE1BQVo7O0FBQUEsV0FBWSxNQUFaLEVBQWtCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0QsQ0FiRCxFQUFZLE1BQU0sR0FBTixvQ0FBTSxFQUFOLENBQVosRSxDQWVBOzs7QUFDQSxXQUFpQixNQUFqQixFQUF1QjtBQUNyQjs7Ozs7O0FBTUEsV0FBZ0IsWUFBaEIsQ0FBNkIsSUFBN0IsRUFBeUM7QUFDdkMsUUFBSSxJQUFJLElBQUksR0FBUixJQUFlLElBQUksR0FBRyxHQUExQixFQUErQjtBQUM3QixhQUFPLE1BQU0sQ0FBQyxPQUFkO0FBQ0Q7O0FBRUQsUUFBSSxJQUFJLEtBQUssR0FBYixFQUFrQjtBQUNoQixhQUFPLE1BQU0sQ0FBQyxTQUFkO0FBQ0Q7O0FBRUQsUUFBSSxJQUFJLElBQUksR0FBUixJQUFlLElBQUksR0FBRyxHQUExQixFQUErQjtBQUM3QixhQUFPLE1BQU0sQ0FBQyxPQUFkO0FBQ0Q7O0FBRUQsUUFBSSxJQUFJLElBQUksR0FBWixFQUFpQjtBQUNmLGFBQU8sTUFBTSxDQUFDLE1BQWQ7QUFDRDs7QUFFRCxXQUFPLE1BQU0sQ0FBQyxPQUFkO0FBQ0Q7O0FBbEJlLHdCQUFZLFlBQVo7QUFtQmpCLENBMUJELEVBQWlCLE1BQU0sR0FBTixvQ0FBTSxFQUFOLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdHlwZXMvZGlzdC9zdGF0dXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVGhlIHN0YXR1cyBvZiBhbiBldmVudC4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvZXhwb3J0XG5leHBvcnQgZW51bSBTdGF0dXMge1xuICAvKiogVGhlIHN0YXR1cyBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC4gKi9cbiAgVW5rbm93biA9ICd1bmtub3duJyxcbiAgLyoqIFRoZSBldmVudCB3YXMgc2tpcHBlZCBkdWUgdG8gY29uZmlndXJhdGlvbiBvciBjYWxsYmFja3MuICovXG4gIFNraXBwZWQgPSAnc2tpcHBlZCcsXG4gIC8qKiBUaGUgZXZlbnQgd2FzIHNlbnQgdG8gU2VudHJ5IHN1Y2Nlc3NmdWxseS4gKi9cbiAgU3VjY2VzcyA9ICdzdWNjZXNzJyxcbiAgLyoqIFRoZSBjbGllbnQgaXMgY3VycmVudGx5IHJhdGUgbGltaXRlZCBhbmQgd2lsbCB0cnkgYWdhaW4gbGF0ZXIuICovXG4gIFJhdGVMaW1pdCA9ICdyYXRlX2xpbWl0JyxcbiAgLyoqIFRoZSBldmVudCBjb3VsZCBub3QgYmUgcHJvY2Vzc2VkLiAqL1xuICBJbnZhbGlkID0gJ2ludmFsaWQnLFxuICAvKiogQSBzZXJ2ZXItc2lkZSBlcnJvciBvY3VycmVkIGR1cmluZyBzdWJtaXNzaW9uLiAqL1xuICBGYWlsZWQgPSAnZmFpbGVkJyxcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2UsIGltcG9ydC9leHBvcnRcbmV4cG9ydCBuYW1lc3BhY2UgU3RhdHVzIHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEge0BsaW5rIFN0YXR1c30uXG4gICAqXG4gICAqIEBwYXJhbSBjb2RlIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgKiBAcmV0dXJucyBUaGUgc2VuZCBzdGF0dXMgb3Ige0BsaW5rIFN0YXR1cy5Vbmtub3dufS5cbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBmcm9tSHR0cENvZGUoY29kZTogbnVtYmVyKTogU3RhdHVzIHtcbiAgICBpZiAoY29kZSA+PSAyMDAgJiYgY29kZSA8IDMwMCkge1xuICAgICAgcmV0dXJuIFN0YXR1cy5TdWNjZXNzO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0MjkpIHtcbiAgICAgIHJldHVybiBTdGF0dXMuUmF0ZUxpbWl0O1xuICAgIH1cblxuICAgIGlmIChjb2RlID49IDQwMCAmJiBjb2RlIDwgNTAwKSB7XG4gICAgICByZXR1cm4gU3RhdHVzLkludmFsaWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPj0gNTAwKSB7XG4gICAgICByZXR1cm4gU3RhdHVzLkZhaWxlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RhdHVzLlVua25vd247XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/types/dist/status.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/async.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/async.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction forget(promise) {\n  promise.then(null, function (e) {\n    // TODO: Use a better logging mechanism\n    // eslint-disable-next-line no-console\n    console.error(e);\n  });\n}\n\nexports.forget = forget;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvYXN5bmMudHM/ZjgxMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7OztBQUlBOztBQUNBLFNBQWdCLE1BQWhCLENBQXVCLE9BQXZCLEVBQWdEO0FBQzlDLFNBQU8sQ0FBQyxJQUFSLENBQWEsSUFBYixFQUFtQixhQUFDO0FBQ2xCO0FBQ0E7QUFDQSxXQUFPLENBQUMsS0FBUixDQUFjLENBQWQ7QUFDRCxHQUpEO0FBS0Q7O0FBTkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L2FzeW5jLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25zdW1lcyB0aGUgcHJvbWlzZSBhbmQgbG9ncyB0aGUgZXJyb3Igd2hlbiBpdCByZWplY3RzLlxuICogQHBhcmFtIHByb21pc2UgQSBwcm9taXNlIHRvIGZvcmdldC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBmb3JnZXQocHJvbWlzZTogUHJvbWlzZUxpa2U8YW55Pik6IHZvaWQge1xuICBwcm9taXNlLnRoZW4obnVsbCwgZSA9PiB7XG4gICAgLy8gVE9ETzogVXNlIGEgYmV0dGVyIGxvZ2dpbmcgbWVjaGFuaXNtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/async.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/browser.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/browser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\n\nfunction htmlTreeAsString(elem) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0; // eslint-disable-next-line no-plusplus\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem); // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\nexports.htmlTreeAsString = htmlTreeAsString;\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nfunction _htmlElementAsString(el) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  if (elem.id) {\n    out.push(\"#\" + elem.id);\n  } // eslint-disable-next-line prefer-const\n\n\n  className = elem.className;\n\n  if (className && is_1.isString(className)) {\n    classes = className.split(/\\s+/);\n\n    for (i = 0; i < classes.length; i++) {\n      out.push(\".\" + classes[i]);\n    }\n  }\n\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n\n  return out.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvYnJvd3Nlci50cz83OWQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFFQTs7Ozs7Ozs7QUFNQSxTQUFnQixnQkFBaEIsQ0FBaUMsSUFBakMsRUFBOEM7QUFLNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFJO0FBQ0YsUUFBSSxXQUFXLEdBQUcsSUFBbEI7QUFDQSxRQUFNLG1CQUFtQixHQUFHLENBQTVCO0FBQ0EsUUFBTSxjQUFjLEdBQUcsRUFBdkI7QUFDQSxRQUFNLEdBQUcsR0FBRyxFQUFaO0FBQ0EsUUFBSSxNQUFNLEdBQUcsQ0FBYjtBQUNBLFFBQUksR0FBRyxHQUFHLENBQVY7QUFDQSxRQUFNLFNBQVMsR0FBRyxLQUFsQjtBQUNBLFFBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUE1QjtBQUNBLFFBQUksT0FBTyxTQUFYLENBVEUsQ0FXRjs7QUFDQSxXQUFPLFdBQVcsSUFBSSxNQUFNLEtBQUssbUJBQWpDLEVBQXNEO0FBQ3BELGFBQU8sR0FBRyxvQkFBb0IsQ0FBQyxXQUFELENBQTlCLENBRG9ELENBRXBEO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQUksT0FBTyxLQUFLLE1BQVosSUFBdUIsTUFBTSxHQUFHLENBQVQsSUFBYyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQUosR0FBYSxTQUFuQixHQUErQixPQUFPLENBQUMsTUFBdkMsSUFBaUQsY0FBMUYsRUFBMkc7QUFDekc7QUFDRDs7QUFFRCxTQUFHLENBQUMsSUFBSixDQUFTLE9BQVQ7QUFFQSxTQUFHLElBQUksT0FBTyxDQUFDLE1BQWY7QUFDQSxpQkFBVyxHQUFHLFdBQVcsQ0FBQyxVQUExQjtBQUNEOztBQUVELFdBQU8sR0FBRyxDQUFDLE9BQUosR0FBYyxJQUFkLENBQW1CLFNBQW5CLENBQVA7QUFDRCxHQTdCRCxDQTZCRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQU8sV0FBUDtBQUNEO0FBQ0Y7O0FBekNEO0FBMkNBOzs7Ozs7QUFLQSxTQUFTLG9CQUFULENBQThCLEVBQTlCLEVBQXlDO0FBQ3ZDLE1BQU0sSUFBSSxHQUFHLEVBQWI7QUFPQSxNQUFNLEdBQUcsR0FBRyxFQUFaO0FBQ0EsTUFBSSxTQUFKO0FBQ0EsTUFBSSxPQUFKO0FBQ0EsTUFBSSxHQUFKO0FBQ0EsTUFBSSxJQUFKO0FBQ0EsTUFBSSxDQUFKOztBQUVBLE1BQUksQ0FBQyxJQUFELElBQVMsQ0FBQyxJQUFJLENBQUMsT0FBbkIsRUFBNEI7QUFDMUIsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsS0FBRyxDQUFDLElBQUosQ0FBUyxJQUFJLENBQUMsT0FBTCxDQUFhLFdBQWIsRUFBVDs7QUFDQSxNQUFJLElBQUksQ0FBQyxFQUFULEVBQWE7QUFDWCxPQUFHLENBQUMsSUFBSixDQUFTLE1BQUksSUFBSSxDQUFDLEVBQWxCO0FBQ0QsR0F0QnNDLENBd0J2Qzs7O0FBQ0EsV0FBUyxHQUFHLElBQUksQ0FBQyxTQUFqQjs7QUFDQSxNQUFJLFNBQVMsSUFBSSxjQUFTLFNBQVQsQ0FBakIsRUFBc0M7QUFDcEMsV0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFWLENBQWdCLEtBQWhCLENBQVY7O0FBQ0EsU0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBeEIsRUFBZ0MsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxTQUFHLENBQUMsSUFBSixDQUFTLE1BQUksT0FBTyxDQUFDLENBQUQsQ0FBcEI7QUFDRDtBQUNGOztBQUNELE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsQ0FBckI7O0FBQ0EsT0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBN0IsRUFBcUMsQ0FBQyxFQUF0QyxFQUEwQztBQUN4QyxPQUFHLEdBQUcsWUFBWSxDQUFDLENBQUQsQ0FBbEI7QUFDQSxRQUFJLEdBQUcsSUFBSSxDQUFDLFlBQUwsQ0FBa0IsR0FBbEIsQ0FBUDs7QUFDQSxRQUFJLElBQUosRUFBVTtBQUNSLFNBQUcsQ0FBQyxJQUFKLENBQVMsTUFBSSxHQUFKLEdBQU8sS0FBUCxHQUFZLElBQVosR0FBZ0IsS0FBekI7QUFDRDtBQUNGOztBQUNELFNBQU8sR0FBRyxDQUFDLElBQUosQ0FBUyxFQUFULENBQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2Rpc3QvYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi9pcyc7XG5cbi8qKlxuICogR2l2ZW4gYSBjaGlsZCBET00gZWxlbWVudCwgcmV0dXJucyBhIHF1ZXJ5LXNlbGVjdG9yIHN0YXRlbWVudCBkZXNjcmliaW5nIHRoYXRcbiAqIGFuZCBpdHMgYW5jZXN0b3JzXG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gYm9keSA+IGRpdiA+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxUcmVlQXNTdHJpbmcoZWxlbTogdW5rbm93bik6IHN0cmluZyB7XG4gIHR5cGUgU2ltcGxlTm9kZSA9IHtcbiAgICBwYXJlbnROb2RlOiBTaW1wbGVOb2RlO1xuICB9IHwgbnVsbDtcblxuICAvLyB0cnkvY2F0Y2ggYm90aDpcbiAgLy8gLSBhY2Nlc3NpbmcgZXZlbnQudGFyZ2V0IChzZWUgZ2V0c2VudHJ5L3JhdmVuLWpzIzgzOCwgIzc2OClcbiAgLy8gLSBgaHRtbFRyZWVBc1N0cmluZ2AgYmVjYXVzZSBpdCdzIGNvbXBsZXgsIGFuZCBqdXN0IGFjY2Vzc2luZyB0aGUgRE9NIGluY29ycmVjdGx5XG4gIC8vIC0gY2FuIHRocm93IGFuIGV4Y2VwdGlvbiBpbiBzb21lIGNpcmN1bXN0YW5jZXMuXG4gIHRyeSB7XG4gICAgbGV0IGN1cnJlbnRFbGVtID0gZWxlbSBhcyBTaW1wbGVOb2RlO1xuICAgIGNvbnN0IE1BWF9UUkFWRVJTRV9IRUlHSFQgPSA1O1xuICAgIGNvbnN0IE1BWF9PVVRQVVRfTEVOID0gODA7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgbGV0IGhlaWdodCA9IDA7XG4gICAgbGV0IGxlbiA9IDA7XG4gICAgY29uc3Qgc2VwYXJhdG9yID0gJyA+ICc7XG4gICAgY29uc3Qgc2VwTGVuZ3RoID0gc2VwYXJhdG9yLmxlbmd0aDtcbiAgICBsZXQgbmV4dFN0cjtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgIHdoaWxlIChjdXJyZW50RWxlbSAmJiBoZWlnaHQrKyA8IE1BWF9UUkFWRVJTRV9IRUlHSFQpIHtcbiAgICAgIG5leHRTdHIgPSBfaHRtbEVsZW1lbnRBc1N0cmluZyhjdXJyZW50RWxlbSk7XG4gICAgICAvLyBiYWlsIG91dCBpZlxuICAgICAgLy8gLSBuZXh0U3RyIGlzIHRoZSAnaHRtbCcgZWxlbWVudFxuICAgICAgLy8gLSB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCB3b3VsZCBiZSBjcmVhdGVkIGV4Y2VlZHMgTUFYX09VVFBVVF9MRU5cbiAgICAgIC8vICAgKGlnbm9yZSB0aGlzIGxpbWl0IGlmIHdlIGFyZSBvbiB0aGUgZmlyc3QgaXRlcmF0aW9uKVxuICAgICAgaWYgKG5leHRTdHIgPT09ICdodG1sJyB8fCAoaGVpZ2h0ID4gMSAmJiBsZW4gKyBvdXQubGVuZ3RoICogc2VwTGVuZ3RoICsgbmV4dFN0ci5sZW5ndGggPj0gTUFYX09VVFBVVF9MRU4pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBvdXQucHVzaChuZXh0U3RyKTtcblxuICAgICAgbGVuICs9IG5leHRTdHIubGVuZ3RoO1xuICAgICAgY3VycmVudEVsZW0gPSBjdXJyZW50RWxlbS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQucmV2ZXJzZSgpLmpvaW4oc2VwYXJhdG9yKTtcbiAgfSBjYXRjaCAoX29PKSB7XG4gICAgcmV0dXJuICc8dW5rbm93bj4nO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNpbXBsZSwgcXVlcnktc2VsZWN0b3IgcmVwcmVzZW50YXRpb24gb2YgYSBET00gZWxlbWVudFxuICogZS5nLiBbSFRNTEVsZW1lbnRdID0+IGlucHV0I2Zvby5idG5bbmFtZT1iYXpdXG4gKiBAcmV0dXJucyBnZW5lcmF0ZWQgRE9NIHBhdGhcbiAqL1xuZnVuY3Rpb24gX2h0bWxFbGVtZW50QXNTdHJpbmcoZWw6IHVua25vd24pOiBzdHJpbmcge1xuICBjb25zdCBlbGVtID0gZWwgYXMge1xuICAgIHRhZ05hbWU/OiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGdldEF0dHJpYnV0ZShrZXk6IHN0cmluZyk6IHN0cmluZztcbiAgfTtcblxuICBjb25zdCBvdXQgPSBbXTtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgbGV0IGNsYXNzZXM7XG4gIGxldCBrZXk7XG4gIGxldCBhdHRyO1xuICBsZXQgaTtcblxuICBpZiAoIWVsZW0gfHwgIWVsZW0udGFnTmFtZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIG91dC5wdXNoKGVsZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgaWYgKGVsZW0uaWQpIHtcbiAgICBvdXQucHVzaChgIyR7ZWxlbS5pZH1gKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWU7XG4gIGlmIChjbGFzc05hbWUgJiYgaXNTdHJpbmcoY2xhc3NOYW1lKSkge1xuICAgIGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoL1xccysvKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgb3V0LnB1c2goYC4ke2NsYXNzZXNbaV19YCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGFsbG93ZWRBdHRycyA9IFsndHlwZScsICduYW1lJywgJ3RpdGxlJywgJ2FsdCddO1xuICBmb3IgKGkgPSAwOyBpIDwgYWxsb3dlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gYWxsb3dlZEF0dHJzW2ldO1xuICAgIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgIGlmIChhdHRyKSB7XG4gICAgICBvdXQucHVzaChgWyR7a2V5fT1cIiR7YXR0cn1cIl1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/browser.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/dsn.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/dsn.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.parse-int */ \"./node_modules/core-js/modules/es.parse-int.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar error_1 = __webpack_require__(/*! ./error */ \"./node_modules/@sentry/utils/dist/error.js\");\n/** Regular expression used to parse a Dsn. */\n\n\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n/** Error message */\n\nvar ERROR_MESSAGE = 'Invalid Dsn';\n/** The Sentry Dsn, identifying a Sentry instance and project. */\n\nvar Dsn =\n/** @class */\nfunction () {\n  /** Creates a new Dsn component */\n  function Dsn(from) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n\n\n  Dsn.prototype.toString = function (withPassword) {\n    if (withPassword === void 0) {\n      withPassword = false;\n    }\n\n    var _a = this,\n        host = _a.host,\n        path = _a.path,\n        pass = _a.pass,\n        port = _a.port,\n        projectId = _a.projectId,\n        protocol = _a.protocol,\n        user = _a.user;\n\n    return protocol + \"://\" + user + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n  };\n  /** Parses a string into this Dsn. */\n\n\n  Dsn.prototype._fromString = function (str) {\n    var match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new error_1.SentryError(ERROR_MESSAGE);\n    }\n\n    var _a = tslib_1.__read(match.slice(1), 6),\n        protocol = _a[0],\n        user = _a[1],\n        _b = _a[2],\n        pass = _b === void 0 ? '' : _b,\n        host = _a[3],\n        _c = _a[4],\n        port = _c === void 0 ? '' : _c,\n        lastPath = _a[5];\n\n    var path = '';\n    var projectId = lastPath;\n    var split = projectId.split('/');\n\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n\n    if (projectId) {\n      var projectMatch = projectId.match(/^\\d+/);\n\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({\n      host: host,\n      pass: pass,\n      path: path,\n      projectId: projectId,\n      port: port,\n      protocol: protocol,\n      user: user\n    });\n  };\n  /** Maps Dsn components into this instance. */\n\n\n  Dsn.prototype._fromComponents = function (components) {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  };\n  /** Validates this Dsn and throws on error. */\n\n\n  Dsn.prototype._validate = function () {\n    var _this = this;\n\n    ['protocol', 'user', 'host', 'projectId'].forEach(function (component) {\n      if (!_this[component]) {\n        throw new error_1.SentryError(ERROR_MESSAGE + \": \" + component + \" missing\");\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new error_1.SentryError(ERROR_MESSAGE + \": Invalid projectId \" + this.projectId);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new error_1.SentryError(ERROR_MESSAGE + \": Invalid protocol \" + this.protocol);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new error_1.SentryError(ERROR_MESSAGE + \": Invalid port \" + this.port);\n    }\n  };\n\n  return Dsn;\n}();\n\nexports.Dsn = Dsn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/dsn.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/error.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/error.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar polyfill_1 = __webpack_require__(/*! ./polyfill */ \"./node_modules/@sentry/utils/dist/polyfill.js\");\n/** An error emitted by Sentry SDKs and related utilities. */\n\n\nvar SentryError =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SentryError, _super);\n\n  function SentryError(message) {\n    var _newTarget = this.constructor;\n\n    var _this = _super.call(this, message) || this;\n\n    _this.message = message;\n    _this.name = _newTarget.prototype.constructor.name;\n    polyfill_1.setPrototypeOf(_this, _newTarget.prototype);\n    return _this;\n  }\n\n  return SentryError;\n}(Error);\n\nexports.SentryError = SentryError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvZXJyb3IudHM/OTIwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBRUE7OztBQUNBO0FBQUE7QUFBQTtBQUFpQzs7QUFJL0IsdUJBQTBCLE9BQTFCLEVBQXlDOzs7QUFBekMsZ0JBQ0Usa0JBQU0sT0FBTixLQUFjLElBRGhCOztBQUEwQjtBQUd4QixTQUFJLENBQUMsSUFBTCxHQUFZLFdBQVcsU0FBWCxDQUFxQixXQUFyQixDQUFpQyxJQUE3QztBQUNBLDhCQUFlLEtBQWYsRUFBcUIsV0FBVyxTQUFoQzs7QUFDRDs7QUFDSDtBQUFDLENBVkQsQ0FBaUMsS0FBakM7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L2Vycm9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2V0UHJvdG90eXBlT2YgfSBmcm9tICcuL3BvbHlmaWxsJztcblxuLyoqIEFuIGVycm9yIGVtaXR0ZWQgYnkgU2VudHJ5IFNES3MgYW5kIHJlbGF0ZWQgdXRpbGl0aWVzLiAqL1xuZXhwb3J0IGNsYXNzIFNlbnRyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogRGlzcGxheSBuYW1lIG9mIHRoaXMgZXJyb3IgaW5zdGFuY2UuICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMubmFtZSA9IG5ldy50YXJnZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/error.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\ntslib_1.__exportStar(__webpack_require__(/*! ./async */ \"./node_modules/@sentry/utils/dist/async.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./browser */ \"./node_modules/@sentry/utils/dist/browser.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./dsn */ \"./node_modules/@sentry/utils/dist/dsn.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./error */ \"./node_modules/@sentry/utils/dist/error.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./instrument */ \"./node_modules/@sentry/utils/dist/instrument.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./logger */ \"./node_modules/@sentry/utils/dist/logger.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./memo */ \"./node_modules/@sentry/utils/dist/memo.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"./node_modules/@sentry/utils/dist/misc.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./node */ \"./node_modules/@sentry/utils/dist/node.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./object */ \"./node_modules/@sentry/utils/dist/object.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./path */ \"./node_modules/@sentry/utils/dist/path.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./promisebuffer */ \"./node_modules/@sentry/utils/dist/promisebuffer.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./stacktrace */ \"./node_modules/@sentry/utils/dist/stacktrace.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./string */ \"./node_modules/@sentry/utils/dist/string.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./supports */ \"./node_modules/@sentry/utils/dist/supports.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./syncpromise */ \"./node_modules/@sentry/utils/dist/syncpromise.js\"), exports);\n\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"./node_modules/@sentry/utils/dist/time.js\"), exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvaW5kZXgudHM/NmYzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9Ac2VudHJ5L3V0aWxzL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FzeW5jJztcbmV4cG9ydCAqIGZyb20gJy4vYnJvd3Nlcic7XG5leHBvcnQgKiBmcm9tICcuL2Rzbic7XG5leHBvcnQgKiBmcm9tICcuL2Vycm9yJztcbmV4cG9ydCAqIGZyb20gJy4vaW5zdHJ1bWVudCc7XG5leHBvcnQgKiBmcm9tICcuL2lzJztcbmV4cG9ydCAqIGZyb20gJy4vbG9nZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vbWVtbyc7XG5leHBvcnQgKiBmcm9tICcuL21pc2MnO1xuZXhwb3J0ICogZnJvbSAnLi9ub2RlJztcbmV4cG9ydCAqIGZyb20gJy4vb2JqZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vcGF0aCc7XG5leHBvcnQgKiBmcm9tICcuL3Byb21pc2VidWZmZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zdGFja3RyYWNlJztcbmV4cG9ydCAqIGZyb20gJy4vc3RyaW5nJztcbmV4cG9ydCAqIGZyb20gJy4vc3VwcG9ydHMnO1xuZXhwb3J0ICogZnJvbSAnLi9zeW5jcHJvbWlzZSc7XG5leHBvcnQgKiBmcm9tICcuL3RpbWUnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/instrument.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/instrument.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.fill */ \"./node_modules/core-js/modules/es.array.fill.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.splice */ \"./node_modules/core-js/modules/es.array.splice.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n\nvar logger_1 = __webpack_require__(/*! ./logger */ \"./node_modules/@sentry/utils/dist/logger.js\");\n\nvar misc_1 = __webpack_require__(/*! ./misc */ \"./node_modules/@sentry/utils/dist/misc.js\");\n\nvar object_1 = __webpack_require__(/*! ./object */ \"./node_modules/@sentry/utils/dist/object.js\");\n\nvar stacktrace_1 = __webpack_require__(/*! ./stacktrace */ \"./node_modules/@sentry/utils/dist/stacktrace.js\");\n\nvar supports_1 = __webpack_require__(/*! ./supports */ \"./node_modules/@sentry/utils/dist/supports.js\");\n\nvar global = misc_1.getGlobalObject();\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nvar handlers = {};\nvar instrumented = {};\n/** Instruments given API */\n\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n\n    case 'dom':\n      instrumentDOM();\n      break;\n\n    case 'xhr':\n      instrumentXHR();\n      break;\n\n    case 'fetch':\n      instrumentFetch();\n      break;\n\n    case 'history':\n      instrumentHistory();\n      break;\n\n    case 'error':\n      instrumentError();\n      break;\n\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n\n    default:\n      logger_1.logger.warn('unknown instrumentation type:', type);\n  }\n}\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\n\n\nfunction addInstrumentationHandler(handler) {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n\n  handlers[handler.type] = handlers[handler.type] || [];\n  handlers[handler.type].push(handler.callback);\n  instrument(handler.type);\n}\n\nexports.addInstrumentationHandler = addInstrumentationHandler;\n/** JSDoc */\n\nfunction triggerHandlers(type, data) {\n  var e_1, _a;\n\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  try {\n    for (var _b = tslib_1.__values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var handler = _c.value;\n\n      try {\n        handler(data);\n      } catch (e) {\n        logger_1.logger.error(\"Error while triggering instrumentation handler.\\nType: \" + type + \"\\nName: \" + stacktrace_1.getFunctionName(handler) + \"\\nError: \" + e);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n/** JSDoc */\n\n\nfunction instrumentConsole() {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    object_1.fill(global.console, level, function (originalConsoleLevel) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        triggerHandlers('console', {\n          args: args,\n          level: level\n        }); // this fails for some browsers. :(\n\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n/** JSDoc */\n\n\nfunction instrumentFetch() {\n  if (!supports_1.supportsNativeFetch()) {\n    return;\n  }\n\n  object_1.fill(global, 'fetch', function (originalFetch) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var handlerData = {\n        args: args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args)\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', tslib_1.__assign({}, handlerData)); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      return originalFetch.apply(global, args).then(function (response) {\n        triggerHandlers('fetch', tslib_1.__assign(tslib_1.__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          response: response\n        }));\n        return response;\n      }, function (error) {\n        triggerHandlers('fetch', tslib_1.__assign(tslib_1.__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          error: error\n        })); // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n        throw error;\n      });\n    };\n  });\n}\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** Extract `method` from fetch call arguments */\n\n\nfunction getFetchMethod(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n\n  if ('Request' in global && is_1.isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n\n  return 'GET';\n}\n/** Extract `url` from fetch call arguments */\n\n\nfunction getFetchUrl(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n\n  if ('Request' in global && is_1.isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\n\n\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  } // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n\n\n  var requestKeys = [];\n  var requestValues = [];\n  var xhrproto = XMLHttpRequest.prototype;\n  object_1.fill(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      } // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n      var xhr = this;\n      var url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: is_1.isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1]\n      }; // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      if (is_1.isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      var onreadystatechangeHandler = function onreadystatechangeHandler() {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            var requestPos = requestKeys.indexOf(xhr);\n\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              var args_1 = requestValues.splice(requestPos)[0];\n\n              if (xhr.__sentry_xhr__ && args_1[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args_1[0];\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: xhr\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        object_1.fill(xhr, 'onreadystatechange', function (original) {\n          return function () {\n            var readyStateArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              readyStateArgs[_i] = arguments[_i];\n            }\n\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n  object_1.fill(xhrproto, 'send', function (originalSend) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      requestKeys.push(this);\n      requestValues.push(args);\n      triggerHandlers('xhr', {\n        args: args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nvar lastHref;\n/** JSDoc */\n\nfunction instrumentHistory() {\n  if (!supports_1.supportsHistory()) {\n    return;\n  }\n\n  var oldOnPopState = global.onpopstate;\n\n  global.onpopstate = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var to = global.location.href; // keep track of the current URL state, as we always receive only the updated state\n\n    var from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from: from,\n      to: to\n    });\n\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n  /** @hidden */\n\n\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var url = args.length > 2 ? args[2] : undefined;\n\n      if (url) {\n        // coerce to string (this is what pushState does)\n        var from = lastHref;\n        var to = String(url); // keep track of the current URL state, as we always receive only the updated state\n\n        lastHref = to;\n        triggerHandlers('history', {\n          from: from,\n          to: to\n        });\n      }\n\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  object_1.fill(global.history, 'pushState', historyReplacementFunction);\n  object_1.fill(global.history, 'replaceState', historyReplacementFunction);\n}\n/** JSDoc */\n\n\nfunction instrumentDOM() {\n  if (!('document' in global)) {\n    return;\n  } // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n\n\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false); // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n\n  ['EventTarget', 'Node'].forEach(function (target) {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    var proto = global[target] && global[target].prototype; // eslint-disable-next-line no-prototype-builtins\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n\n    object_1.fill(proto, 'addEventListener', function (original) {\n      return function (eventName, fn, options) {\n        if (fn && fn.handleEvent) {\n          if (eventName === 'click') {\n            object_1.fill(fn, 'handleEvent', function (innerOriginal) {\n              return function (event) {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n\n          if (eventName === 'keypress') {\n            object_1.fill(fn, 'handleEvent', function (innerOriginal) {\n              return function (event) {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n    object_1.fill(proto, 'removeEventListener', function (original) {\n      return function (eventName, fn, options) {\n        try {\n          original.call(this, eventName, fn.__sentry_wrapped__, options);\n        } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nvar debounceDuration = 1000;\nvar debounceTimer = 0;\nvar keypressTimeout;\nvar lastCapturedEvent;\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\n\nfunction domEventHandler(name, handler, debounce) {\n  if (debounce === void 0) {\n    debounce = false;\n  }\n\n  return function (event) {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined; // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(function () {\n        handler({\n          event: event,\n          name: name\n        });\n      });\n    } else {\n      handler({\n        event: event,\n        name: name\n      });\n    }\n  };\n}\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\n\n\nfunction keypressEventHandler(handler) {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return function (event) {\n    var target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    var tagName = target && target.tagName; // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n\n    if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable) {\n      return;\n    } // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n\n\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n\n    clearTimeout(keypressTimeout);\n    keypressTimeout = setTimeout(function () {\n      keypressTimeout = undefined;\n    }, debounceDuration);\n  };\n}\n\nvar _oldOnErrorHandler = null;\n/** JSDoc */\n\nfunction instrumentError() {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column: column,\n      error: error,\n      line: line,\n      msg: msg,\n      url: url\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nvar _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/instrument.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/is.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/dist/is.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.symbol */ \"./node_modules/core-js/modules/es.symbol.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.description */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.iterator */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isError(wat) {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n\n    case '[object Exception]':\n      return true;\n\n    case '[object DOMException]':\n      return true;\n\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nexports.isError = isError;\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isErrorEvent(wat) {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\nexports.isErrorEvent = isErrorEvent;\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isDOMError(wat) {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\nexports.isDOMError = isDOMError;\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isDOMException(wat) {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\nexports.isDOMException = isDOMException;\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isString(wat) {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\nexports.isString = isString;\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isPrimitive(wat) {\n  return wat === null || _typeof(wat) !== 'object' && typeof wat !== 'function';\n}\n\nexports.isPrimitive = isPrimitive;\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isPlainObject(wat) {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\nexports.isPlainObject = isPlainObject;\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\nexports.isEvent = isEvent;\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\nexports.isElement = isElement;\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isRegExp(wat) {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\nexports.isRegExp = isRegExp;\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\n\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\nexports.isThenable = isThenable;\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\nexports.isSyntheticEvent = isSyntheticEvent;\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\n\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\nexports.isInstanceOf = isInstanceOf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/is.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/logger.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar misc_1 = __webpack_require__(/*! ./misc */ \"./node_modules/@sentry/utils/dist/misc.js\"); // TODO: Implement different loggers for different environments\n\n\nvar global = misc_1.getGlobalObject();\n/** Prefix for logging strings */\n\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\n\nvar Logger =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n\n\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    misc_1.consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    misc_1.consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    misc_1.consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n\n  return Logger;\n}(); // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n\n\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexports.logger = logger;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvbG9nZ2VyLnRzPzExZDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQSw0RixDQUVBOzs7QUFDQSxJQUFNLE1BQU0sR0FBRyx3QkFBZjtBQUVBOztBQUNBLElBQU0sTUFBTSxHQUFHLGdCQUFmO0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBSUU7QUFDQTtBQUNFLFNBQUssUUFBTCxHQUFnQixLQUFoQjtBQUNEO0FBRUQ7OztBQUNPLDZCQUFQO0FBQ0UsU0FBSyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0QsR0FGTTtBQUlQOzs7QUFDTyw0QkFBUDtBQUNFLFNBQUssUUFBTCxHQUFnQixJQUFoQjtBQUNELEdBRk07QUFJUDs7O0FBQ08seUJBQVA7QUFBVzs7U0FBQSxVLEVBQUEscUIsRUFBQSxJLEVBQWM7QUFBZDs7O0FBQ1QsUUFBSSxDQUFDLEtBQUssUUFBVixFQUFvQjtBQUNsQjtBQUNEOztBQUNELDBCQUFlO0FBQ2IsWUFBTSxDQUFDLE9BQVAsQ0FBZSxHQUFmLENBQXNCLE1BQU0sWUFBTixHQUFnQixJQUFJLENBQUMsSUFBTCxDQUFVLEdBQVYsQ0FBdEM7QUFDRCxLQUZEO0FBR0QsR0FQTTtBQVNQOzs7QUFDTywwQkFBUDtBQUFZOztTQUFBLFUsRUFBQSxxQixFQUFBLEksRUFBYztBQUFkOzs7QUFDVixRQUFJLENBQUMsS0FBSyxRQUFWLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBQ0QsMEJBQWU7QUFDYixZQUFNLENBQUMsT0FBUCxDQUFlLElBQWYsQ0FBdUIsTUFBTSxhQUFOLEdBQWlCLElBQUksQ0FBQyxJQUFMLENBQVUsR0FBVixDQUF4QztBQUNELEtBRkQ7QUFHRCxHQVBNO0FBU1A7OztBQUNPLDJCQUFQO0FBQWE7O1NBQUEsVSxFQUFBLHFCLEVBQUEsSSxFQUFjO0FBQWQ7OztBQUNYLFFBQUksQ0FBQyxLQUFLLFFBQVYsRUFBb0I7QUFDbEI7QUFDRDs7QUFDRCwwQkFBZTtBQUNiLFlBQU0sQ0FBQyxPQUFQLENBQWUsS0FBZixDQUF3QixNQUFNLGNBQU4sR0FBa0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxHQUFWLENBQTFDO0FBQ0QsS0FGRDtBQUdELEdBUE07O0FBUVQ7QUFBQyxDQWhERCxHLENBa0RBOzs7QUFDQSxNQUFNLENBQUMsVUFBUCxHQUFvQixNQUFNLENBQUMsVUFBUCxJQUFxQixFQUF6QztBQUNBLElBQU0sTUFBTSxHQUFJLE1BQU0sQ0FBQyxVQUFQLENBQWtCLE1BQWxCLEtBQXdDLE1BQU0sQ0FBQyxVQUFQLENBQWtCLE1BQWxCLEdBQTJCLElBQUksTUFBSixFQUFuRSxDQUFoQjtBQUVTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZGlzdC9sb2dnZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCwgZ2V0R2xvYmFsT2JqZWN0IH0gZnJvbSAnLi9taXNjJztcblxuLy8gVE9ETzogSW1wbGVtZW50IGRpZmZlcmVudCBsb2dnZXJzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzXG5jb25zdCBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3Q8V2luZG93IHwgTm9kZUpTLkdsb2JhbD4oKTtcblxuLyoqIFByZWZpeCBmb3IgbG9nZ2luZyBzdHJpbmdzICovXG5jb25zdCBQUkVGSVggPSAnU2VudHJ5IExvZ2dlciAnO1xuXG4vKiogSlNEb2MgKi9cbmNsYXNzIExvZ2dlciB7XG4gIC8qKiBKU0RvYyAqL1xuICBwcml2YXRlIF9lbmFibGVkOiBib29sZWFuO1xuXG4gIC8qKiBKU0RvYyAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIHB1YmxpYyBkaXNhYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKiBKU0RvYyAqL1xuICBwdWJsaWMgZW5hYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqIEpTRG9jICovXG4gIHB1YmxpYyBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgZ2xvYmFsLmNvbnNvbGUubG9nKGAke1BSRUZJWH1bTG9nXTogJHthcmdzLmpvaW4oJyAnKX1gKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBKU0RvYyAqL1xuICBwdWJsaWMgd2FybiguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBnbG9iYWwuY29uc29sZS53YXJuKGAke1BSRUZJWH1bV2Fybl06ICR7YXJncy5qb2luKCcgJyl9YCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogSlNEb2MgKi9cbiAgcHVibGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGdsb2JhbC5jb25zb2xlLmVycm9yKGAke1BSRUZJWH1bRXJyb3JdOiAke2FyZ3Muam9pbignICcpfWApO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIEVuc3VyZSB3ZSBvbmx5IGhhdmUgYSBzaW5nbGUgbG9nZ2VyIGluc3RhbmNlLCBldmVuIGlmIG11bHRpcGxlIHZlcnNpb25zIG9mIEBzZW50cnkvdXRpbHMgYXJlIGJlaW5nIHVzZWRcbmdsb2JhbC5fX1NFTlRSWV9fID0gZ2xvYmFsLl9fU0VOVFJZX18gfHwge307XG5jb25zdCBsb2dnZXIgPSAoZ2xvYmFsLl9fU0VOVFJZX18ubG9nZ2VyIGFzIExvZ2dlcikgfHwgKGdsb2JhbC5fX1NFTlRSWV9fLmxvZ2dlciA9IG5ldyBMb2dnZXIoKSk7XG5cbmV4cG9ydCB7IGxvZ2dlciB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/logger.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/memo.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/memo.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.splice */ \"./node_modules/core-js/modules/es.array.splice.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.weak-set */ \"./node_modules/core-js/modules/es.weak-set.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\n\nvar Memo =\n/** @class */\nfunction () {\n  function Memo() {\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n\n\n  Memo.prototype.memoize = function (obj) {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n\n      this._inner.add(obj);\n\n      return false;\n    } // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n\n    for (var i = 0; i < this._inner.length; i++) {\n      var value = this._inner[i];\n\n      if (value === obj) {\n        return true;\n      }\n    }\n\n    this._inner.push(obj);\n\n    return false;\n  };\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n\n\n  Memo.prototype.unmemoize = function (obj) {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (var i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n\n          break;\n        }\n      }\n    }\n  };\n\n  return Memo;\n}();\n\nexports.Memo = Memo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvbWVtby50cz8zMmM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBTUU7QUFDRSxTQUFLLFdBQUwsR0FBbUIsT0FBTyxPQUFQLEtBQW1CLFVBQXRDO0FBQ0EsU0FBSyxNQUFMLEdBQWMsS0FBSyxXQUFMLEdBQW1CLElBQUksT0FBSixFQUFuQixHQUFtQyxFQUFqRDtBQUNEO0FBRUQ7Ozs7OztBQUlPLDJCQUFQLFVBQWUsR0FBZixFQUF1QjtBQUNyQixRQUFJLEtBQUssV0FBVCxFQUFzQjtBQUNwQixVQUFJLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsR0FBaEIsQ0FBSixFQUEwQjtBQUN4QixlQUFPLElBQVA7QUFDRDs7QUFDRCxXQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLEdBQWhCOztBQUNBLGFBQU8sS0FBUDtBQUNELEtBUG9CLENBUXJCOzs7QUFDQSxTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLEtBQUssTUFBTCxDQUFZLE1BQWhDLEVBQXdDLENBQUMsRUFBekMsRUFBNkM7QUFDM0MsVUFBTSxLQUFLLEdBQUcsS0FBSyxNQUFMLENBQVksQ0FBWixDQUFkOztBQUNBLFVBQUksS0FBSyxLQUFLLEdBQWQsRUFBbUI7QUFDakIsZUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLEdBQWpCOztBQUNBLFdBQU8sS0FBUDtBQUNELEdBakJNO0FBbUJQOzs7Ozs7QUFJTyw2QkFBUCxVQUFpQixHQUFqQixFQUF5QjtBQUN2QixRQUFJLEtBQUssV0FBVCxFQUFzQjtBQUNwQixXQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLEdBQW5CO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxLQUFLLE1BQUwsQ0FBWSxNQUFoQyxFQUF3QyxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLFlBQUksS0FBSyxNQUFMLENBQVksQ0FBWixNQUFtQixHQUF2QixFQUE0QjtBQUMxQixlQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLENBQW5CLEVBQXNCLENBQXRCOztBQUNBO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsR0FYTTs7QUFZVDtBQUFDLENBbEREOztBQUFhIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZGlzdC9tZW1vLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzICovXG4vKipcbiAqIE1lbW8gY2xhc3MgdXNlZCBmb3IgZGVjeWNsZSBqc29uIG9iamVjdHMuIFVzZXMgV2Vha1NldCBpZiBhdmFpbGFibGUgb3RoZXJ3aXNlIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgTWVtbyB7XG4gIC8qKiBEZXRlcm1pbmVzIGlmIFdlYWtTZXQgaXMgYXZhaWxhYmxlICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2hhc1dlYWtTZXQ6IGJvb2xlYW47XG4gIC8qKiBFaXRoZXIgV2Vha1NldCBvciBBcnJheSAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9pbm5lcjogYW55O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9oYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbic7XG4gICAgdGhpcy5faW5uZXIgPSB0aGlzLl9oYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgb2JqIHRvIHJlbWVtYmVyLlxuICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byByZW1lbWJlclxuICAgKi9cbiAgcHVibGljIG1lbW9pemUob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5faGFzV2Vha1NldCkge1xuICAgICAgaWYgKHRoaXMuX2lubmVyLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5faW5uZXIuYWRkKG9iaik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5faW5uZXJbaV07XG4gICAgICBpZiAodmFsdWUgPT09IG9iaikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW5uZXIucHVzaChvYmopO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIG9iamVjdCBmcm9tIGludGVybmFsIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGZvcmdldFxuICAgKi9cbiAgcHVibGljIHVubWVtb2l6ZShvYmo6IGFueSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9oYXNXZWFrU2V0KSB7XG4gICAgICB0aGlzLl9pbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5faW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIHRoaXMuX2lubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/memo.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/misc.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/misc.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.array-buffer.slice */ \"./node_modules/core-js/modules/es.array-buffer.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.keys */ \"./node_modules/core-js/modules/es.object.keys.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.parse-int */ \"./node_modules/core-js/modules/es.parse-int.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.replace */ \"./node_modules/core-js/modules/es.string.replace.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.uint16-array */ \"./node_modules/core-js/modules/es.typed-array.uint16-array.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.copy-within */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.every */ \"./node_modules/core-js/modules/es.typed-array.every.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.fill */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.filter */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.find */ \"./node_modules/core-js/modules/es.typed-array.find.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.find-index */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.for-each */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.includes */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.index-of */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.iterator */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.join */ \"./node_modules/core-js/modules/es.typed-array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.last-index-of */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.map */ \"./node_modules/core-js/modules/es.typed-array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce-right */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.reverse */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.set */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.slice */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.some */ \"./node_modules/core-js/modules/es.typed-array.some.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.sort */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.subarray */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.typed-array.to-string */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar node_1 = __webpack_require__(/*! ./node */ \"./node_modules/@sentry/utils/dist/node.js\");\n\nvar string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@sentry/utils/dist/string.js\");\n\nvar fallbackGlobalObject = {};\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\n\nfunction getGlobalObject() {\n  return node_1.isNodeEnv() ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : fallbackGlobalObject;\n}\n\nexports.getGlobalObject = getGlobalObject;\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\n\nfunction uuid4() {\n  var global = getGlobalObject();\n  var crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    var arr = new Uint16Array(8);\n    crypto.getRandomValues(arr); // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n\n    arr[3] = arr[3] & 0xfff | 0x4000; // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n\n    arr[4] = arr[4] & 0x3fff | 0x8000;\n\n    var pad = function pad(num) {\n      var v = num.toString(16);\n\n      while (v.length < 4) {\n        v = \"0\" + v;\n      }\n\n      return v;\n    };\n\n    return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n  } // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\n\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-bitwise\n    var r = Math.random() * 16 | 0; // eslint-disable-next-line no-bitwise\n\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nexports.uuid4 = uuid4;\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\n\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  var match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  } // coerce to undefined values to empty string so we don't get 'undefined'\n\n\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment\n  };\n}\n\nexports.parseUrl = parseUrl;\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\n\nfunction getEventDescription(event) {\n  if (event.message) {\n    return event.message;\n  }\n\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    var exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return exception.type + \": \" + exception.value;\n    }\n\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n\n  return event.event_id || '<unknown>';\n}\n\nexports.getEventDescription = getEventDescription;\n/** JSDoc */\n\nfunction consoleSandbox(callback) {\n  var global = getGlobalObject();\n  var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n  var originalConsole = global.console;\n  var wrappedLevels = {}; // Restore all wrapped console methods\n\n  levels.forEach(function (level) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in global.console && originalConsole[level].__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalConsole[level].__sentry_original__;\n    }\n  }); // Perform callback manipulations\n\n  var result = callback(); // Revert restoration to wrapped state\n\n  Object.keys(wrappedLevels).forEach(function (level) {\n    originalConsole[level] = wrappedLevels[level];\n  });\n  return result;\n}\n\nexports.consoleSandbox = consoleSandbox;\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\n\nfunction addExceptionTypeValue(event, value, type) {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\nexports.addExceptionTypeValue = addExceptionTypeValue;\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\n\nfunction addExceptionMechanism(event, mechanism) {\n  if (mechanism === void 0) {\n    mechanism = {};\n  } // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n\n\n  try {\n    // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values[0].mechanism = event.exception.values[0].mechanism || {};\n    Object.keys(mechanism).forEach(function (key) {\n      // @ts-ignore Mechanism has no index signature\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values[0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {// no-empty\n  }\n}\n\nexports.addExceptionMechanism = addExceptionMechanism;\n/**\n * A safe form of location.href\n */\n\nfunction getLocationHref() {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\nexports.getLocationHref = getLocationHref; // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n\nvar SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\n\nfunction parseSemver(input) {\n  var match = input.match(SEMVER_REGEXP) || [];\n  var major = parseInt(match[1], 10);\n  var minor = parseInt(match[2], 10);\n  var patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\n\nexports.parseSemver = parseSemver;\nvar defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\n\nfunction parseRetryAfterHeader(now, header) {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  var headerDelay = parseInt(\"\" + header, 10);\n\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  var headerDate = Date.parse(\"\" + header);\n\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\nexports.parseRetryAfterHeader = parseRetryAfterHeader;\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\n\nfunction addContextToFrame(lines, frame, linesOfContext) {\n  if (linesOfContext === void 0) {\n    linesOfContext = 5;\n  }\n\n  var lineno = frame.lineno || 0;\n  var maxLines = lines.length;\n  var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {\n    return string_1.snipLine(line, 0);\n  });\n  frame.context_line = string_1.snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {\n    return string_1.snipLine(line, 0);\n  });\n}\n\nexports.addContextToFrame = addContextToFrame;\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\n\nfunction stripUrlQueryAndFragment(urlPath) {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\nexports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/misc.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/node.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/node.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, module) {__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n\nvar object_1 = __webpack_require__(/*! ./object */ \"./node_modules/@sentry/utils/dist/object.js\");\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\n\nfunction isNodeEnv() {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nexports.isNodeEnv = isNodeEnv;\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\nexports.dynamicRequire = dynamicRequire;\n/** Default request keys that'll be used to extract data from the request */\n\nvar DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\n\nfunction extractNodeRequestData(req, keys) {\n  if (keys === void 0) {\n    keys = DEFAULT_REQUEST_KEYS;\n  } // make sure we can safely use dynamicRequire below\n\n\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  var requestData = {}; // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n\n  var headers = req.headers || req.header || {}; // method:\n  //   node, express, koa: req.method\n\n  var method = req.method; // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n\n  var host = req.hostname || req.host || headers.host || '<no host>'; // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n\n  var protocol = req.protocol === 'https' || req.secure || (req.socket || {}).encrypted ? 'https' : 'http'; // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n\n  var originalUrl = req.originalUrl || req.url || ''; // absolute url\n\n  var absoluteUrl = protocol + \"://\" + host + originalUrl;\n  keys.forEach(function (key) {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n\n      case 'method':\n        requestData.method = method;\n        break;\n\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        } // body data:\n        //   node, express, koa: req.body\n\n\n        if (req.body !== undefined) {\n          requestData.data = is_1.isString(req.body) ? req.body : JSON.stringify(object_1.normalize(req.body));\n        }\n\n        break;\n\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = req[key];\n        }\n\n    }\n  });\n  return requestData;\n}\n\nexports.extractNodeRequestData = extractNodeRequestData;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/node.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/object.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/object.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(/*! core-js/modules/es.symbol */ \"./node_modules/core-js/modules/es.symbol.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.description */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.iterator */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.fill */ \"./node_modules/core-js/modules/es.array.fill.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.sort */ \"./node_modules/core-js/modules/es.array.sort.js\");\n\n__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.keys */ \"./node_modules/core-js/modules/es.object.keys.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.url.to-json */ \"./node_modules/core-js/modules/web.url.to-json.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.js\");\n\nvar browser_1 = __webpack_require__(/*! ./browser */ \"./node_modules/@sentry/utils/dist/browser.js\");\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n\nvar memo_1 = __webpack_require__(/*! ./memo */ \"./node_modules/@sentry/utils/dist/memo.js\");\n\nvar stacktrace_1 = __webpack_require__(/*! ./stacktrace */ \"./node_modules/@sentry/utils/dist/stacktrace.js\");\n\nvar string_1 = __webpack_require__(/*! ./string */ \"./node_modules/@sentry/utils/dist/string.js\");\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\n\n\nfunction fill(source, name, replacement) {\n  if (!(name in source)) {\n    return;\n  }\n\n  var original = source[name];\n  var wrapped = replacement(original); // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    } catch (_Oo) {// This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\nexports.fill = fill;\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\n\nfunction urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]);\n  }).join('&');\n}\n\nexports.urlEncode = urlEncode;\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\n\nfunction getWalkSource(value) {\n  if (is_1.isError(value)) {\n    var error = value;\n    var err = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    };\n\n    for (var i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (is_1.isEvent(value)) {\n    var event_1 = value;\n    var source = {};\n    source.type = event_1.type; // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n    try {\n      source.target = is_1.isElement(event_1.target) ? browser_1.htmlTreeAsString(event_1.target) : Object.prototype.toString.call(event_1.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = is_1.isElement(event_1.currentTarget) ? browser_1.htmlTreeAsString(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && is_1.isInstanceOf(value, CustomEvent)) {\n      source.detail = event_1.detail;\n    }\n\n    for (var i in event_1) {\n      if (Object.prototype.hasOwnProperty.call(event_1, i)) {\n        source[i] = event_1;\n      }\n    }\n\n    return source;\n  }\n\n  return value;\n}\n/** Calculates bytes size of input string */\n\n\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\n\n\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n/** JSDoc */\n\n\nfunction normalizeToSize(object, // Default Node.js REPL depth\ndepth, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize) {\n  if (depth === void 0) {\n    depth = 3;\n  }\n\n  if (maxSize === void 0) {\n    maxSize = 100 * 1024;\n  }\n\n  var serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized;\n}\n\nexports.normalizeToSize = normalizeToSize;\n/** Transforms any input value into a string form, either primitive value or a type of the input */\n\nfunction serializeValue(value) {\n  var type = Object.prototype.toString.call(value); // Node.js REPL notation\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  var normalized = normalizeValue(value);\n  return is_1.isPrimitive(normalized) ? normalized : type;\n}\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n\n\nfunction normalizeValue(value, key) {\n  if (key === 'domain' && value && _typeof(value) === 'object' && value._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof global !== 'undefined' && value === global) {\n    return '[Global]';\n  }\n\n  if (typeof window !== 'undefined' && value === window) {\n    return '[Window]';\n  }\n\n  if (typeof document !== 'undefined' && value === document) {\n    return '[Document]';\n  } // React's SyntheticEvent thingy\n\n\n  if (is_1.isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return \"[Function: \" + stacktrace_1.getFunctionName(value) + \"]\";\n  }\n\n  return value;\n}\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nfunction walk(key, value, depth, memo) {\n  if (depth === void 0) {\n    depth = +Infinity;\n  }\n\n  if (memo === void 0) {\n    memo = new memo_1.Memo();\n  } // If we reach the maximum depth, serialize whatever has left\n\n\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n\n\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n\n\n  var normalized = normalizeValue(value, key);\n\n  if (is_1.isPrimitive(normalized)) {\n    return normalized;\n  } // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n\n\n  var source = getWalkSource(value); // Create an accumulator that will act as a parent for all future itterations of that branch\n\n  var acc = Array.isArray(value) ? [] : {}; // If we already walked that branch, bail out, as it's circular reference\n\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  } // Walk all keys of the source\n\n\n  for (var innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    } // Recursively walk through all the child nodes\n\n\n    acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  } // Once walked through all the branches, remove the parent from memo storage\n\n\n  memo.unmemoize(value); // Return accumulated values\n\n  return acc;\n}\n\nexports.walk = walk;\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction normalize(input, depth) {\n  try {\n    return JSON.parse(JSON.stringify(input, function (key, value) {\n      return walk(key, value, depth);\n    }));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\nexports.normalize = normalize;\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction extractExceptionKeysForMessage(exception, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 40;\n  }\n\n  var keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return string_1.truncate(keys[0], maxLength);\n  }\n\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n\n    if (serialized.length > maxLength) {\n      continue;\n    }\n\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n\n    return string_1.truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\nexports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\n\nfunction dropUndefinedKeys(val) {\n  var e_1, _a;\n\n  if (is_1.isPlainObject(val)) {\n    var obj = val;\n    var rv = {};\n\n    try {\n      for (var _b = tslib_1.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (typeof obj[key] !== 'undefined') {\n          rv[key] = dropUndefinedKeys(obj[key]);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return rv;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys);\n  }\n\n  return val;\n}\n\nexports.dropUndefinedKeys = dropUndefinedKeys;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/object.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/path.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/path.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.concat */ \"./node_modules/core-js/modules/es.array.concat.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.filter */ \"./node_modules/core-js/modules/es.array.filter.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.splice */ \"./node_modules/core-js/modules/es.array.splice.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** JSDoc */\n\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up++;\n    } else if (up) {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\n\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n} // path.resolve([from ...], to)\n// posix version\n\n/** JSDoc */\n\n\nfunction resolve() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n\n  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? args[i] : '/'; // Skip empty entries\n\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  } // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n\n\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\nexports.resolve = resolve;\n/** JSDoc */\n\nfunction trim(arr) {\n  var start = 0;\n\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  var end = arr.length - 1;\n\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n\n  return arr.slice(start, end - start + 1);\n} // path.relative(from, to)\n// posix version\n\n/** JSDoc */\n\n\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\nexports.relative = relative; // path.normalize(path)\n// posix version\n\n/** JSDoc */\n\nfunction normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/'; // Normalize the path\n\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\nexports.normalizePath = normalizePath; // posix version\n\n/** JSDoc */\n\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\nexports.isAbsolute = isAbsolute; // posix version\n\n/** JSDoc */\n\nfunction join() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return normalizePath(args.join('/'));\n}\n\nexports.join = join;\n/** JSDoc */\n\nfunction dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexports.dirname = dirname;\n/** JSDoc */\n\nfunction basename(path, ext) {\n  var f = splitPath(path)[2];\n\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n\n  return f;\n}\n\nexports.basename = basename;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/path.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/polyfill.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/polyfill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.object.set-prototype-of */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setPrototypeOf = Object.setPrototypeOf || ({\n  __proto__: []\n} instanceof Array ? setProtoOf : mixinProperties);\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction setProtoOf(obj, proto) {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj;\n}\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction mixinProperties(obj, proto) {\n  for (var prop in proto) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcG9seWZpbGwudHM/MzhmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFhLHlCQUNYLE1BQU0sQ0FBQyxjQUFQLEtBQTBCO0FBQUUsV0FBUyxFQUFFO0FBQWIsYUFBNkIsS0FBN0IsR0FBcUMsVUFBckMsR0FBa0QsZUFBNUUsQ0FEVztBQUdiOzs7QUFHQTs7QUFDQSxTQUFTLFVBQVQsQ0FBb0QsR0FBcEQsRUFBa0UsS0FBbEUsRUFBK0U7QUFDN0U7QUFDQSxLQUFHLENBQUMsU0FBSixHQUFnQixLQUFoQjtBQUNBLFNBQU8sR0FBUDtBQUNEO0FBRUQ7OztBQUdBOzs7QUFDQSxTQUFTLGVBQVQsQ0FBeUQsR0FBekQsRUFBdUUsS0FBdkUsRUFBb0Y7QUFDbEYsT0FBSyxJQUFNLElBQVgsSUFBbUIsS0FBbkIsRUFBMEI7QUFDeEI7QUFDQSxRQUFJLENBQUMsR0FBRyxDQUFDLGNBQUosQ0FBbUIsSUFBbkIsQ0FBTCxFQUErQjtBQUM3QjtBQUNBLFNBQUcsQ0FBQyxJQUFELENBQUgsR0FBWSxLQUFLLENBQUMsSUFBRCxDQUFqQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxHQUFQO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L3BvbHlmaWxsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNldFByb3RvdHlwZU9mID1cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ID8gc2V0UHJvdG9PZiA6IG1peGluUHJvcGVydGllcyk7XG5cbi8qKlxuICogc2V0UHJvdG90eXBlT2YgcG9seWZpbGwgdXNpbmcgX19wcm90b19fXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBzZXRQcm90b09mPFRUYXJnZXQgZXh0ZW5kcyBvYmplY3QsIFRQcm90bz4ob2JqOiBUVGFyZ2V0LCBwcm90bzogVFByb3RvKTogVFRhcmdldCAmIFRQcm90byB7XG4gIC8vIEB0cy1pZ25vcmUgX19wcm90b19fIGRvZXMgbm90IGV4aXN0IG9uIG9ialxuICBvYmouX19wcm90b19fID0gcHJvdG87XG4gIHJldHVybiBvYmogYXMgVFRhcmdldCAmIFRQcm90bztcbn1cblxuLyoqXG4gKiBzZXRQcm90b3R5cGVPZiBwb2x5ZmlsbCB1c2luZyBtaXhpblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZnVuY3Rpb24gbWl4aW5Qcm9wZXJ0aWVzPFRUYXJnZXQgZXh0ZW5kcyBvYmplY3QsIFRQcm90bz4ob2JqOiBUVGFyZ2V0LCBwcm90bzogVFByb3RvKTogVFRhcmdldCAmIFRQcm90byB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBwcm90bykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgLy8gQHRzLWlnbm9yZSB0eXBlc2NyaXB0IGNvbXBsYWlucyBhYm91dCBpbmRleGluZyBzbyB3ZSByZW1vdmVcbiAgICAgIG9ialtwcm9wXSA9IHByb3RvW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmogYXMgVFRhcmdldCAmIFRQcm90bztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/polyfill.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/promisebuffer.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/promisebuffer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.splice */ \"./node_modules/core-js/modules/es.array.splice.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar error_1 = __webpack_require__(/*! ./error */ \"./node_modules/@sentry/utils/dist/error.js\");\n\nvar syncpromise_1 = __webpack_require__(/*! ./syncpromise */ \"./node_modules/@sentry/utils/dist/syncpromise.js\");\n/** A simple queue that holds promises. */\n\n\nvar PromiseBuffer =\n/** @class */\nfunction () {\n  function PromiseBuffer(_limit) {\n    this._limit = _limit;\n    /** Internal set of queued Promises */\n\n    this._buffer = [];\n  }\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n\n\n  PromiseBuffer.prototype.isReady = function () {\n    return this._limit === undefined || this.length() < this._limit;\n  };\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n\n\n  PromiseBuffer.prototype.add = function (task) {\n    var _this = this;\n\n    if (!this.isReady()) {\n      return syncpromise_1.SyncPromise.reject(new error_1.SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n\n    task.then(function () {\n      return _this.remove(task);\n    }).then(null, function () {\n      return _this.remove(task).then(null, function () {// We have to add this catch here otherwise we have an unhandledPromiseRejection\n        // because it's a new Promise chain.\n      });\n    });\n    return task;\n  };\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n\n\n  PromiseBuffer.prototype.remove = function (task) {\n    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n\n    return removedTask;\n  };\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n\n\n  PromiseBuffer.prototype.length = function () {\n    return this._buffer.length;\n  };\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n\n\n  PromiseBuffer.prototype.drain = function (timeout) {\n    var _this = this;\n\n    return new syncpromise_1.SyncPromise(function (resolve) {\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      syncpromise_1.SyncPromise.all(_this._buffer).then(function () {\n        clearTimeout(capturedSetTimeout);\n        resolve(true);\n      }).then(null, function () {\n        resolve(true);\n      });\n    });\n  };\n\n  return PromiseBuffer;\n}();\n\nexports.PromiseBuffer = PromiseBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvcHJvbWlzZWJ1ZmZlci50cz8yYWEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBQ0E7QUFFQTs7O0FBQ0E7QUFBQTtBQUFBO0FBSUUseUJBQTZCLE1BQTdCLEVBQTRDO0FBQWY7QUFIN0I7O0FBQ2lCLG1CQUFpQyxFQUFqQztBQUUrQjtBQUVoRDs7Ozs7QUFHTyxvQ0FBUDtBQUNFLFdBQU8sS0FBSyxNQUFMLEtBQWdCLFNBQWhCLElBQTZCLEtBQUssTUFBTCxLQUFnQixLQUFLLE1BQXpEO0FBQ0QsR0FGTTtBQUlQOzs7Ozs7OztBQU1PLGdDQUFQLFVBQVcsSUFBWCxFQUErQjtBQUEvQjs7QUFDRSxRQUFJLENBQUMsS0FBSyxPQUFMLEVBQUwsRUFBcUI7QUFDbkIsYUFBTywwQkFBWSxNQUFaLENBQW1CLElBQUksbUJBQUosQ0FBZ0IsaURBQWhCLENBQW5CLENBQVA7QUFDRDs7QUFDRCxRQUFJLEtBQUssT0FBTCxDQUFhLE9BQWIsQ0FBcUIsSUFBckIsTUFBK0IsQ0FBQyxDQUFwQyxFQUF1QztBQUNyQyxXQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCLElBQWxCO0FBQ0Q7O0FBQ0QsUUFBSSxDQUNELElBREgsQ0FDUTtBQUFNLGtCQUFJLENBQUMsTUFBTDtBQUFpQixLQUQvQixFQUVHLElBRkgsQ0FFUSxJQUZSLEVBRWM7QUFDVixrQkFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFaLEVBQWtCLElBQWxCLENBQXVCLElBQXZCLEVBQTZCLGFBQzNCO0FBQ0E7QUFDRCxPQUhEO0FBR0UsS0FOTjtBQVFBLFdBQU8sSUFBUDtBQUNELEdBaEJNO0FBa0JQOzs7Ozs7OztBQU1PLG1DQUFQLFVBQWMsSUFBZCxFQUFrQztBQUNoQyxRQUFNLFdBQVcsR0FBRyxLQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLEtBQUssT0FBTCxDQUFhLE9BQWIsQ0FBcUIsSUFBckIsQ0FBcEIsRUFBZ0QsQ0FBaEQsRUFBbUQsQ0FBbkQsQ0FBcEI7O0FBQ0EsV0FBTyxXQUFQO0FBQ0QsR0FITTtBQUtQOzs7OztBQUdPLG1DQUFQO0FBQ0UsV0FBTyxLQUFLLE9BQUwsQ0FBYSxNQUFwQjtBQUNELEdBRk07QUFJUDs7Ozs7Ozs7QUFNTyxrQ0FBUCxVQUFhLE9BQWIsRUFBNkI7QUFBN0I7O0FBQ0UsV0FBTyxJQUFJLHlCQUFKLENBQXlCLG1CQUFPO0FBQ3JDLFVBQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDO0FBQ3BDLFlBQUksT0FBTyxJQUFJLE9BQU8sR0FBRyxDQUF6QixFQUE0QjtBQUMxQixpQkFBTyxDQUFDLEtBQUQsQ0FBUDtBQUNEO0FBQ0YsT0FKb0MsRUFJbEMsT0FKa0MsQ0FBckM7QUFLQSxnQ0FBWSxHQUFaLENBQWdCLEtBQUksQ0FBQyxPQUFyQixFQUNHLElBREgsQ0FDUTtBQUNKLG9CQUFZLENBQUMsa0JBQUQsQ0FBWjtBQUNBLGVBQU8sQ0FBQyxJQUFELENBQVA7QUFDRCxPQUpILEVBS0csSUFMSCxDQUtRLElBTFIsRUFLYztBQUNWLGVBQU8sQ0FBQyxJQUFELENBQVA7QUFDRCxPQVBIO0FBUUQsS0FkTSxDQUFQO0FBZUQsR0FoQk07O0FBaUJUO0FBQUMsQ0E5RUQ7O0FBQWEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L3Byb21pc2VidWZmZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZW50cnlFcnJvciB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICcuL3N5bmNwcm9taXNlJztcblxuLyoqIEEgc2ltcGxlIHF1ZXVlIHRoYXQgaG9sZHMgcHJvbWlzZXMuICovXG5leHBvcnQgY2xhc3MgUHJvbWlzZUJ1ZmZlcjxUPiB7XG4gIC8qKiBJbnRlcm5hbCBzZXQgb2YgcXVldWVkIFByb21pc2VzICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2J1ZmZlcjogQXJyYXk8UHJvbWlzZUxpa2U8VD4+ID0gW107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfbGltaXQ/OiBudW1iZXIpIHt9XG5cbiAgLyoqXG4gICAqIFNheXMgaWYgdGhlIGJ1ZmZlciBpcyByZWFkeSB0byB0YWtlIG1vcmUgcmVxdWVzdHNcbiAgICovXG4gIHB1YmxpYyBpc1JlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9saW1pdCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubGVuZ3RoKCkgPCB0aGlzLl9saW1pdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBwcm9taXNlIHRvIHRoZSBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHRhc2sgQ2FuIGJlIGFueSBQcm9taXNlTGlrZTxUPlxuICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgcHJvbWlzZS5cbiAgICovXG4gIHB1YmxpYyBhZGQodGFzazogUHJvbWlzZUxpa2U8VD4pOiBQcm9taXNlTGlrZTxUPiB7XG4gICAgaWYgKCF0aGlzLmlzUmVhZHkoKSkge1xuICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlamVjdChuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBkdWUgdG8gYnVmZmVyIGxpbWl0IHJlYWNoZWQuJykpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYnVmZmVyLmluZGV4T2YodGFzaykgPT09IC0xKSB7XG4gICAgICB0aGlzLl9idWZmZXIucHVzaCh0YXNrKTtcbiAgICB9XG4gICAgdGFza1xuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5yZW1vdmUodGFzaykpXG4gICAgICAudGhlbihudWxsLCAoKSA9PlxuICAgICAgICB0aGlzLnJlbW92ZSh0YXNrKS50aGVuKG51bGwsICgpID0+IHtcbiAgICAgICAgICAvLyBXZSBoYXZlIHRvIGFkZCB0aGlzIGNhdGNoIGhlcmUgb3RoZXJ3aXNlIHdlIGhhdmUgYW4gdW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvblxuICAgICAgICAgIC8vIGJlY2F1c2UgaXQncyBhIG5ldyBQcm9taXNlIGNoYWluLlxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgcHJvbWlzZSB0byB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICogQHJldHVybnMgUmVtb3ZlZCBwcm9taXNlLlxuICAgKi9cbiAgcHVibGljIHJlbW92ZSh0YXNrOiBQcm9taXNlTGlrZTxUPik6IFByb21pc2VMaWtlPFQ+IHtcbiAgICBjb25zdCByZW1vdmVkVGFzayA9IHRoaXMuX2J1ZmZlci5zcGxpY2UodGhpcy5fYnVmZmVyLmluZGV4T2YodGFzayksIDEpWzBdO1xuICAgIHJldHVybiByZW1vdmVkVGFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIG51bWJlciBvZiB1bnJlc29sdmVkIHByb21pc2VzIGluIHRoZSBxdWV1ZS5cbiAgICovXG4gIHB1YmxpYyBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgZHJhaW4gdGhlIHdob2xlIHF1ZXVlLCByZXR1cm5zIHRydWUgaWYgcXVldWUgaXMgZW1wdHkgb3IgZHJhaW5lZC5cbiAgICogSWYgdGltZW91dCBpcyBwcm92aWRlZCBhbmQgdGhlIHF1ZXVlIHRha2VzIGxvbmdlciB0byBkcmFpbiwgdGhlIHByb21pc2Ugc3RpbGwgcmVzb2x2ZXMgYnV0IHdpdGggZmFsc2UuXG4gICAqXG4gICAqIEBwYXJhbSB0aW1lb3V0IE51bWJlciBpbiBtcyB0byB3YWl0IHVudGlsIGl0IHJlc29sdmVzIHdpdGggZmFsc2UuXG4gICAqL1xuICBwdWJsaWMgZHJhaW4odGltZW91dD86IG51bWJlcik6IFByb21pc2VMaWtlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlPGJvb2xlYW4+KHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgY2FwdHVyZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgU3luY1Byb21pc2UuYWxsKHRoaXMuX2J1ZmZlcilcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNsZWFyVGltZW91dChjYXB0dXJlZFNldFRpbWVvdXQpO1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKG51bGwsICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/promisebuffer.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/stacktrace.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/stacktrace.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.function.name */ \"./node_modules/core-js/modules/es.function.name.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar defaultFunctionName = '<anonymous>';\n/**\n * Safely extract function name from itself\n */\n\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\nexports.getFunctionName = getFunctionName;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc3RhY2t0cmFjZS50cz8zMzUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTSxtQkFBbUIsR0FBRyxhQUE1QjtBQUVBOzs7O0FBR0EsU0FBZ0IsZUFBaEIsQ0FBZ0MsRUFBaEMsRUFBMkM7QUFDekMsTUFBSTtBQUNGLFFBQUksQ0FBQyxFQUFELElBQU8sT0FBTyxFQUFQLEtBQWMsVUFBekIsRUFBcUM7QUFDbkMsYUFBTyxtQkFBUDtBQUNEOztBQUNELFdBQU8sRUFBRSxDQUFDLElBQUgsSUFBVyxtQkFBbEI7QUFDRCxHQUxELENBS0UsT0FBTyxDQUFQLEVBQVU7QUFDVjtBQUNBO0FBQ0EsV0FBTyxtQkFBUDtBQUNEO0FBQ0Y7O0FBWEQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L3N0YWNrdHJhY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0RnVuY3Rpb25OYW1lID0gJzxhbm9ueW1vdXM+JztcblxuLyoqXG4gKiBTYWZlbHkgZXh0cmFjdCBmdW5jdGlvbiBuYW1lIGZyb20gaXRzZWxmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm46IHVua25vd24pOiBzdHJpbmcge1xuICB0cnkge1xuICAgIGlmICghZm4gfHwgdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLm5hbWUgfHwgZGVmYXVsdEZ1bmN0aW9uTmFtZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEp1c3QgYWNjZXNzaW5nIGN1c3RvbSBwcm9wcyBpbiBzb21lIFNlbGVuaXVtIGVudmlyb25tZW50c1xuICAgIC8vIGNhbiBjYXVzZSBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBleGNlcHRpb24gKHNlZSByYXZlbi1qcyM0OTUpLlxuICAgIHJldHVybiBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/stacktrace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/string.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/string.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.join */ \"./node_modules/core-js/modules/es.array.join.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\n\nfunction truncate(str, max) {\n  if (max === void 0) {\n    max = 0;\n  }\n\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n\n  return str.length <= max ? str : str.substr(0, max) + \"...\";\n}\n\nexports.truncate = truncate;\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nfunction snipLine(line, colno) {\n  var newLine = line;\n  var ll = newLine.length;\n\n  if (ll <= 150) {\n    return newLine;\n  }\n\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  var start = Math.max(colno - 60, 0);\n\n  if (start < 5) {\n    start = 0;\n  }\n\n  var end = Math.min(start + 140, ll);\n\n  if (end > ll - 5) {\n    end = ll;\n  }\n\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n\n  if (start > 0) {\n    newLine = \"'{snip} \" + newLine;\n  }\n\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\nexports.snipLine = snipLine;\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  var output = []; // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n  for (var i = 0; i < input.length; i++) {\n    var value = input[i];\n\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\nexports.safeJoin = safeJoin;\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\n\nfunction isMatchingPattern(value, pattern) {\n  if (!is_1.isString(value)) {\n    return false;\n  }\n\n  if (is_1.isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n\n  return false;\n}\n\nexports.isMatchingPattern = isMatchingPattern;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvc3RyaW5nLnRzPzE1ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBRUE7Ozs7Ozs7OztBQU9BLFNBQWdCLFFBQWhCLENBQXlCLEdBQXpCLEVBQXNDLEdBQXRDLEVBQXFEO0FBQWY7QUFBQTtBQUFlOztBQUNuRCxNQUFJLE9BQU8sR0FBUCxLQUFlLFFBQWYsSUFBMkIsR0FBRyxLQUFLLENBQXZDLEVBQTBDO0FBQ3hDLFdBQU8sR0FBUDtBQUNEOztBQUNELFNBQU8sR0FBRyxDQUFDLE1BQUosSUFBYyxHQUFkLEdBQW9CLEdBQXBCLEdBQTZCLEdBQUcsQ0FBQyxNQUFKLENBQVcsQ0FBWCxFQUFjLEdBQWQsSUFBa0IsS0FBdEQ7QUFDRDs7QUFMRDtBQU9BOzs7Ozs7Ozs7QUFRQSxTQUFnQixRQUFoQixDQUF5QixJQUF6QixFQUF1QyxLQUF2QyxFQUFvRDtBQUNsRCxNQUFJLE9BQU8sR0FBRyxJQUFkO0FBQ0EsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQW5COztBQUNBLE1BQUksRUFBRSxJQUFJLEdBQVYsRUFBZTtBQUNiLFdBQU8sT0FBUDtBQUNEOztBQUNELE1BQUksS0FBSyxHQUFHLEVBQVosRUFBZ0I7QUFDZDtBQUNBLFNBQUssR0FBRyxFQUFSO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFLLEdBQUcsRUFBakIsRUFBcUIsQ0FBckIsQ0FBWjs7QUFDQSxNQUFJLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDYixTQUFLLEdBQUcsQ0FBUjtBQUNEOztBQUVELE1BQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBSyxHQUFHLEdBQWpCLEVBQXNCLEVBQXRCLENBQVY7O0FBQ0EsTUFBSSxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQWYsRUFBa0I7QUFDaEIsT0FBRyxHQUFHLEVBQU47QUFDRDs7QUFDRCxNQUFJLEdBQUcsS0FBSyxFQUFaLEVBQWdCO0FBQ2QsU0FBSyxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsR0FBRyxHQUFHLEdBQWYsRUFBb0IsQ0FBcEIsQ0FBUjtBQUNEOztBQUVELFNBQU8sR0FBRyxPQUFPLENBQUMsS0FBUixDQUFjLEtBQWQsRUFBcUIsR0FBckIsQ0FBVjs7QUFDQSxNQUFJLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDYixXQUFPLEdBQUcsYUFBVyxPQUFyQjtBQUNEOztBQUNELE1BQUksR0FBRyxHQUFHLEVBQVYsRUFBYztBQUNaLFdBQU8sSUFBSSxTQUFYO0FBQ0Q7O0FBRUQsU0FBTyxPQUFQO0FBQ0Q7O0FBakNEO0FBbUNBOzs7Ozs7QUFNQTs7QUFDQSxTQUFnQixRQUFoQixDQUF5QixLQUF6QixFQUF1QyxTQUF2QyxFQUF5RDtBQUN2RCxNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFkLENBQUwsRUFBMkI7QUFDekIsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFBTSxNQUFNLEdBQUcsRUFBZixDQUx1RCxDQU12RDs7QUFDQSxPQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUExQixFQUFrQyxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLFFBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFELENBQW5COztBQUNBLFFBQUk7QUFDRixZQUFNLENBQUMsSUFBUCxDQUFZLE1BQU0sQ0FBQyxLQUFELENBQWxCO0FBQ0QsS0FGRCxDQUVFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsWUFBTSxDQUFDLElBQVAsQ0FBWSw4QkFBWjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxNQUFNLENBQUMsSUFBUCxDQUFZLFNBQVosQ0FBUDtBQUNEOztBQWpCRDtBQW1CQTs7Ozs7O0FBS0EsU0FBZ0IsaUJBQWhCLENBQWtDLEtBQWxDLEVBQWlELE9BQWpELEVBQXlFO0FBQ3ZFLE1BQUksQ0FBQyxjQUFTLEtBQVQsQ0FBTCxFQUFzQjtBQUNwQixXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJLGNBQVMsT0FBVCxDQUFKLEVBQXVCO0FBQ3JCLFdBQVEsT0FBa0IsQ0FBQyxJQUFuQixDQUF3QixLQUF4QixDQUFSO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDL0IsV0FBTyxLQUFLLENBQUMsT0FBTixDQUFjLE9BQWQsTUFBMkIsQ0FBQyxDQUFuQztBQUNEOztBQUNELFNBQU8sS0FBUDtBQUNEOztBQVpEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdXRpbHMvZGlzdC9zdHJpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1JlZ0V4cCwgaXNTdHJpbmcgfSBmcm9tICcuL2lzJztcblxuLyoqXG4gKiBUcnVuY2F0ZXMgZ2l2ZW4gc3RyaW5nIHRvIHRoZSBtYXhpbXVtIGNoYXJhY3RlcnMgY291bnRcbiAqXG4gKiBAcGFyYW0gc3RyIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHNlcmlhbGl6YWJsZSB2YWx1ZXNcbiAqIEBwYXJhbSBtYXggTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiB0cnVuY2F0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyBzdHJpbmcgRW5jb2RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyOiBzdHJpbmcsIG1heDogbnVtYmVyID0gMCk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBtYXggPT09IDApIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIHJldHVybiBzdHIubGVuZ3RoIDw9IG1heCA/IHN0ciA6IGAke3N0ci5zdWJzdHIoMCwgbWF4KX0uLi5gO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGp1c3QgYHRyaW1fbGluZWAgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnkvYmxvYi9tYXN0ZXIvc3JjL3NlbnRyeS9sYW5nL2phdmFzY3JpcHQvcHJvY2Vzc29yLnB5I0w2N1xuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbmlwTGluZShsaW5lOiBzdHJpbmcsIGNvbG5vOiBudW1iZXIpOiBzdHJpbmcge1xuICBsZXQgbmV3TGluZSA9IGxpbmU7XG4gIGNvbnN0IGxsID0gbmV3TGluZS5sZW5ndGg7XG4gIGlmIChsbCA8PSAxNTApIHtcbiAgICByZXR1cm4gbmV3TGluZTtcbiAgfVxuICBpZiAoY29sbm8gPiBsbCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGNvbG5vID0gbGw7XG4gIH1cblxuICBsZXQgc3RhcnQgPSBNYXRoLm1heChjb2xubyAtIDYwLCAwKTtcbiAgaWYgKHN0YXJ0IDwgNSkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGxldCBlbmQgPSBNYXRoLm1pbihzdGFydCArIDE0MCwgbGwpO1xuICBpZiAoZW5kID4gbGwgLSA1KSB7XG4gICAgZW5kID0gbGw7XG4gIH1cbiAgaWYgKGVuZCA9PT0gbGwpIHtcbiAgICBzdGFydCA9IE1hdGgubWF4KGVuZCAtIDE0MCwgMCk7XG4gIH1cblxuICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgaWYgKHN0YXJ0ID4gMCkge1xuICAgIG5ld0xpbmUgPSBgJ3tzbmlwfSAke25ld0xpbmV9YDtcbiAgfVxuICBpZiAoZW5kIDwgbGwpIHtcbiAgICBuZXdMaW5lICs9ICcge3NuaXB9JztcbiAgfVxuXG4gIHJldHVybiBuZXdMaW5lO1xufVxuXG4vKipcbiAqIEpvaW4gdmFsdWVzIGluIGFycmF5XG4gKiBAcGFyYW0gaW5wdXQgYXJyYXkgb2YgdmFsdWVzIHRvIGJlIGpvaW5lZCB0b2dldGhlclxuICogQHBhcmFtIGRlbGltaXRlciBzdHJpbmcgdG8gYmUgcGxhY2VkIGluLWJldHdlZW4gdmFsdWVzXG4gKiBAcmV0dXJucyBKb2luZWQgdmFsdWVzXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpvaW4oaW5wdXQ6IGFueVtdLCBkZWxpbWl0ZXI/OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gW107XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICB0cnkge1xuICAgICAgb3V0cHV0LnB1c2goU3RyaW5nKHZhbHVlKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgb3V0cHV0LnB1c2goJ1t2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF0nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0LmpvaW4oZGVsaW1pdGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHZhbHVlIG1hdGNoZXMgYSByZWdleCBvciBpbmNsdWRlcyB0aGUgc3RyaW5nXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyB2YWx1ZSB0byBiZSBjaGVja2VkIGFnYWluc3RcbiAqIEBwYXJhbSBwYXR0ZXJuIEVpdGhlciBhIHJlZ2V4IG9yIGEgc3RyaW5nIHRoYXQgbXVzdCBiZSBjb250YWluZWQgaW4gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWF0Y2hpbmdQYXR0ZXJuKHZhbHVlOiBzdHJpbmcsIHBhdHRlcm46IFJlZ0V4cCB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAoIWlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiAocGF0dGVybiBhcyBSZWdFeHApLnRlc3QodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihwYXR0ZXJuKSAhPT0gLTE7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/string.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/supports.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/supports.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise */ \"./node_modules/core-js/modules/es.promise.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = __webpack_require__(/*! ./logger */ \"./node_modules/@sentry/utils/dist/logger.js\");\n\nvar misc_1 = __webpack_require__(/*! ./misc */ \"./node_modules/@sentry/utils/dist/misc.js\");\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\n\n\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.supportsErrorEvent = supportsErrorEvent;\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.supportsDOMError = supportsDOMError;\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.supportsDOMException = supportsDOMException;\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsFetch() {\n  if (!('fetch' in misc_1.getGlobalObject())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.supportsFetch = supportsFetch;\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\n\n\nfunction supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  var global = misc_1.getGlobalObject(); // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  } // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n\n\n  var result = false;\n  var doc = global.document; // eslint-disable-next-line deprecation/deprecation\n\n  if (doc && typeof doc.createElement === \"function\") {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger_1.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\nexports.supportsNativeFetch = supportsNativeFetch;\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in misc_1.getGlobalObject();\n}\n\nexports.supportsReportingObserver = supportsReportingObserver;\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.supportsReferrerPolicy = supportsReferrerPolicy;\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\n\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  var global = misc_1.getGlobalObject();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var chrome = global.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}\n\nexports.supportsHistory = supportsHistory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/supports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/syncpromise.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/syncpromise.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.concat */ \"./node_modules/core-js/modules/es.array.concat.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise */ \"./node_modules/core-js/modules/es.promise.js\");\n\n__webpack_require__(/*! core-js/modules/es.promise.finally */ \"./node_modules/core-js/modules/es.promise.finally.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/* eslint-disable @typescript-eslint/typedef */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar is_1 = __webpack_require__(/*! ./is */ \"./node_modules/@sentry/utils/dist/is.js\");\n/** SyncPromise internal states */\n\n\nvar States;\n\n(function (States) {\n  /** Pending */\n  States[\"PENDING\"] = \"PENDING\";\n  /** Resolved / OK */\n\n  States[\"RESOLVED\"] = \"RESOLVED\";\n  /** Rejected / Error */\n\n  States[\"REJECTED\"] = \"REJECTED\";\n})(States || (States = {}));\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\n\n\nvar SyncPromise =\n/** @class */\nfunction () {\n  function SyncPromise(executor) {\n    var _this = this;\n\n    this._state = States.PENDING;\n    this._handlers = [];\n    /** JSDoc */\n\n    this._resolve = function (value) {\n      _this._setResult(States.RESOLVED, value);\n    };\n    /** JSDoc */\n\n\n    this._reject = function (reason) {\n      _this._setResult(States.REJECTED, reason);\n    };\n    /** JSDoc */\n\n\n    this._setResult = function (state, value) {\n      if (_this._state !== States.PENDING) {\n        return;\n      }\n\n      if (is_1.isThenable(value)) {\n        value.then(_this._resolve, _this._reject);\n        return;\n      }\n\n      _this._state = state;\n      _this._value = value;\n\n      _this._executeHandlers();\n    }; // TODO: FIXME\n\n    /** JSDoc */\n\n\n    this._attachHandler = function (handler) {\n      _this._handlers = _this._handlers.concat(handler);\n\n      _this._executeHandlers();\n    };\n    /** JSDoc */\n\n\n    this._executeHandlers = function () {\n      if (_this._state === States.PENDING) {\n        return;\n      }\n\n      var cachedHandlers = _this._handlers.slice();\n\n      _this._handlers = [];\n      cachedHandlers.forEach(function (handler) {\n        if (handler.done) {\n          return;\n        }\n\n        if (_this._state === States.RESOLVED) {\n          if (handler.onfulfilled) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            handler.onfulfilled(_this._value);\n          }\n        }\n\n        if (_this._state === States.REJECTED) {\n          if (handler.onrejected) {\n            handler.onrejected(_this._value);\n          }\n        }\n\n        handler.done = true;\n      });\n    };\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /** JSDoc */\n\n\n  SyncPromise.resolve = function (value) {\n    return new SyncPromise(function (resolve) {\n      resolve(value);\n    });\n  };\n  /** JSDoc */\n\n\n  SyncPromise.reject = function (reason) {\n    return new SyncPromise(function (_, reject) {\n      reject(reason);\n    });\n  };\n  /** JSDoc */\n\n\n  SyncPromise.all = function (collection) {\n    return new SyncPromise(function (resolve, reject) {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(\"Promise.all requires an array as input.\"));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      var counter = collection.length;\n      var resolvedCollection = [];\n      collection.forEach(function (item, index) {\n        SyncPromise.resolve(item).then(function (value) {\n          resolvedCollection[index] = value;\n          counter -= 1;\n\n          if (counter !== 0) {\n            return;\n          }\n\n          resolve(resolvedCollection);\n        }).then(null, reject);\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  SyncPromise.prototype.then = function (_onfulfilled, _onrejected) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve, reject) {\n      _this._attachHandler({\n        done: false,\n        onfulfilled: function onfulfilled(result) {\n          if (!_onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result);\n            return;\n          }\n\n          try {\n            resolve(_onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: function onrejected(reason) {\n          if (!_onrejected) {\n            reject(reason);\n            return;\n          }\n\n          try {\n            resolve(_onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        }\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  SyncPromise.prototype.catch = function (onrejected) {\n    return this.then(function (val) {\n      return val;\n    }, onrejected);\n  };\n  /** JSDoc */\n\n\n  SyncPromise.prototype.finally = function (onfinally) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve, reject) {\n      var val;\n      var isRejected;\n      return _this.then(function (value) {\n        isRejected = false;\n        val = value;\n\n        if (onfinally) {\n          onfinally();\n        }\n      }, function (reason) {\n        isRejected = true;\n        val = reason;\n\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(function () {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val);\n      });\n    });\n  };\n  /** JSDoc */\n\n\n  SyncPromise.prototype.toString = function () {\n    return '[object SyncPromise]';\n  };\n\n  return SyncPromise;\n}();\n\nexports.SyncPromise = SyncPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/syncpromise.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/dist/time.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/dist/time.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar misc_1 = __webpack_require__(/*! ./misc */ \"./node_modules/@sentry/utils/dist/misc.js\");\n\nvar node_1 = __webpack_require__(/*! ./node */ \"./node_modules/@sentry/utils/dist/node.js\");\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\n\n\nvar dateTimestampSource = {\n  nowSeconds: function nowSeconds() {\n    return Date.now() / 1000;\n  }\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\n\nfunction getBrowserPerformance() {\n  var performance = misc_1.getGlobalObject().performance;\n\n  if (!performance || !performance.now) {\n    return undefined;\n  } // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n\n\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function now() {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\n\n\nfunction getNodePerformance() {\n  try {\n    var perfHooks = node_1.dynamicRequire(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\n\n\nvar platformPerformance = node_1.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function nowSeconds() {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\n\nexports.dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\n\nexports.timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource); // Re-exported with an old name for backwards-compatibility.\n\nexports.timestampWithMs = exports.timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\n\nexports.usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\n\nexports.browserPerformanceTimeOrigin = function () {\n  var performance = misc_1.getGlobalObject().performance;\n\n  if (!performance) {\n    return undefined;\n  }\n\n  if (performance.timeOrigin) {\n    return performance.timeOrigin;\n  } // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n\n\n  return performance.timing && performance.timing.navigationStart || Date.now();\n}();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9zcmMvdGltZS50cz9lMDRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTtBQVNBOzs7Ozs7Ozs7QUFPQSxJQUFNLG1CQUFtQixHQUFvQjtBQUMzQyxZQUFVLEVBQUU7QUFBTSxlQUFJLENBQUMsR0FBTDtBQUFpQjtBQURRLENBQTdDO0FBbUJBOzs7Ozs7O0FBTUEsU0FBUyxxQkFBVCxHQUE4QjtBQUNwQjs7QUFDUixNQUFJLENBQUMsV0FBRCxJQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFqQyxFQUFzQztBQUNwQyxXQUFPLFNBQVA7QUFDRCxHQUoyQixDQU01QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFMLEtBQWEsV0FBVyxDQUFDLEdBQVosRUFBaEM7QUFFQSxTQUFPO0FBQ0wsT0FBRyxFQUFFO0FBQU0sd0JBQVcsQ0FBWDtBQUFpQixLQUR2QjtBQUVMLGNBQVU7QUFGTCxHQUFQO0FBSUQ7QUFFRDs7Ozs7O0FBSUEsU0FBUyxrQkFBVCxHQUEyQjtBQUN6QixNQUFJO0FBQ0YsUUFBTSxTQUFTLEdBQUcsc0JBQWUsTUFBZixFQUF1QixZQUF2QixDQUFsQjtBQUNBLFdBQU8sU0FBUyxDQUFDLFdBQWpCO0FBQ0QsR0FIRCxDQUdFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsV0FBTyxTQUFQO0FBQ0Q7QUFDRjtBQUVEOzs7OztBQUdBLElBQU0sbUJBQW1CLEdBQTRCLHFCQUFjLGtCQUFrQixFQUFoQyxHQUFxQyxxQkFBcUIsRUFBL0c7QUFFQSxJQUFNLGVBQWUsR0FDbkIsbUJBQW1CLEtBQUssU0FBeEIsR0FDSSxtQkFESixHQUVJO0FBQ0UsWUFBVSxFQUFFO0FBQU0sWUFBQyxtQkFBbUIsQ0FBQyxVQUFwQixHQUFpQyxtQkFBbUIsQ0FBQyxHQUFwQixFQUFsQztBQUFtRTtBQUR2RixDQUhOO0FBT0E7Ozs7QUFHYSxpQ0FBeUIsbUJBQW1CLENBQUMsVUFBcEIsQ0FBK0IsSUFBL0IsQ0FBb0MsbUJBQXBDLENBQXpCO0FBRWI7Ozs7Ozs7Ozs7OztBQVdhLDZCQUFxQixlQUFlLENBQUMsVUFBaEIsQ0FBMkIsSUFBM0IsQ0FBZ0MsZUFBaEMsQ0FBckIsQyxDQUViOztBQUNhLDBCQUFrQiwwQkFBbEI7QUFFYjs7OztBQUdhLDhCQUFzQixtQkFBbUIsS0FBSyxTQUE5QztBQUViOzs7OztBQUlhLHVDQUFnQztBQUNuQzs7QUFDUixNQUFJLENBQUMsV0FBTCxFQUFrQjtBQUNoQixXQUFPLFNBQVA7QUFDRDs7QUFDRCxNQUFJLFdBQVcsQ0FBQyxVQUFoQixFQUE0QjtBQUMxQixXQUFPLFdBQVcsQ0FBQyxVQUFuQjtBQUNELEdBUDBDLENBUTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBUSxXQUFXLENBQUMsTUFBWixJQUFzQixXQUFXLENBQUMsTUFBWixDQUFtQixlQUExQyxJQUE4RCxJQUFJLENBQUMsR0FBTCxFQUFyRTtBQUNELENBZjJDLEVBQS9CLEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9kaXN0L3RpbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL21pc2MnO1xuaW1wb3J0IHsgZHluYW1pY1JlcXVpcmUsIGlzTm9kZUVudiB9IGZyb20gJy4vbm9kZSc7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY2FuIHJldHVybiB0aGUgY3VycmVudCB0aW1lc3RhbXAgaW4gc2Vjb25kcyBzaW5jZSB0aGUgVU5JWCBlcG9jaC5cbiAqL1xuaW50ZXJmYWNlIFRpbWVzdGFtcFNvdXJjZSB7XG4gIG5vd1NlY29uZHMoKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgVGltZXN0YW1wU291cmNlIGltcGxlbWVudGF0aW9uIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgUGVyZm9ybWFuY2UgV2ViIEFQSSBuYXRpdmVseS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBUaW1lc3RhbXBTb3VyY2UgZG9lcyBub3QgdXNlIGEgbW9ub3RvbmljIGNsb2NrLiBBIGNhbGwgdG8gYG5vd1NlY29uZHNgIG1heSByZXR1cm4gYSB0aW1lc3RhbXAgZWFybGllclxuICogdGhhbiBhIHByZXZpb3VzbHkgcmV0dXJuZWQgdmFsdWUuIFdlIGRvIG5vdCB0cnkgdG8gZW11bGF0ZSBhIG1vbm90b25pYyBiZWhhdmlvciBpbiBvcmRlciB0byBmYWNpbGl0YXRlIGRlYnVnZ2luZy4gSXRcbiAqIGlzIG1vcmUgb2J2aW91cyB0byBleHBsYWluIFwid2h5IGRvZXMgbXkgc3BhbiBoYXZlIG5lZ2F0aXZlIGR1cmF0aW9uXCIgdGhhbiBcIndoeSBteSBzcGFucyBoYXZlIHplcm8gZHVyYXRpb25cIi5cbiAqL1xuY29uc3QgZGF0ZVRpbWVzdGFtcFNvdXJjZTogVGltZXN0YW1wU291cmNlID0ge1xuICBub3dTZWNvbmRzOiAoKSA9PiBEYXRlLm5vdygpIC8gMTAwMCxcbn07XG5cbi8qKlxuICogQSBwYXJ0aWFsIGRlZmluaXRpb24gb2YgdGhlIFtQZXJmb3JtYW5jZSBXZWIgQVBJXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2V9XG4gKiBmb3IgYWNjZXNzaW5nIGEgaGlnaCByZXNvbHV0aW9uIG1vbm90b25pYyBjbG9jay5cbiAqL1xuaW50ZXJmYWNlIFBlcmZvcm1hbmNlIHtcbiAgLyoqXG4gICAqIFRoZSBtaWxsaXNlY29uZCB0aW1lc3RhbXAgYXQgd2hpY2ggbWVhc3VyZW1lbnQgYmVnYW4sIG1lYXN1cmVkIGluIFVuaXggdGltZS5cbiAgICovXG4gIHRpbWVPcmlnaW46IG51bWJlcjtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgbWlsbGlzZWNvbmQgdGltZXN0YW1wLCB3aGVyZSAwIHJlcHJlc2VudHMgdGhlIHN0YXJ0IG9mIG1lYXN1cmVtZW50LlxuICAgKi9cbiAgbm93KCk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBQZXJmb3JtYW5jZSBBUEkgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiwgb3IgdW5kZWZpbmVkIGZvciBicm93c2VycyB0aGF0IGRvIG5vdFxuICogc3VwcG9ydCB0aGUgQVBJLlxuICpcbiAqIFdyYXBwaW5nIHRoZSBuYXRpdmUgQVBJIHdvcmtzIGFyb3VuZCBkaWZmZXJlbmNlcyBpbiBiZWhhdmlvciBmcm9tIGRpZmZlcmVudCBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlclBlcmZvcm1hbmNlKCk6IFBlcmZvcm1hbmNlIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgeyBwZXJmb3JtYW5jZSB9ID0gZ2V0R2xvYmFsT2JqZWN0PFdpbmRvdz4oKTtcbiAgaWYgKCFwZXJmb3JtYW5jZSB8fCAhcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFJlcGxhY2UgcGVyZm9ybWFuY2UudGltZU9yaWdpbiB3aXRoIG91ciBvd24gdGltZU9yaWdpbiBiYXNlZCBvbiBEYXRlLm5vdygpLlxuICAvL1xuICAvLyBUaGlzIGlzIGEgcGFydGlhbCB3b3JrYXJvdW5kIGZvciBicm93c2VycyByZXBvcnRpbmcgcGVyZm9ybWFuY2UudGltZU9yaWdpbiBzdWNoIHRoYXQgcGVyZm9ybWFuY2UudGltZU9yaWdpbiArXG4gIC8vIHBlcmZvcm1hbmNlLm5vdygpIGdpdmVzIGEgZGF0ZSBhcmJpdHJhcmlseSBpbiB0aGUgcGFzdC5cbiAgLy9cbiAgLy8gQWRkaXRpb25hbGx5LCBjb21wdXRpbmcgdGltZU9yaWdpbiBpbiB0aGlzIHdheSBmaWxscyB0aGUgZ2FwIGZvciBicm93c2VycyB3aGVyZSBwZXJmb3JtYW5jZS50aW1lT3JpZ2luIGlzXG4gIC8vIHVuZGVmaW5lZC5cbiAgLy9cbiAgLy8gVGhlIGFzc3VtcHRpb24gdGhhdCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCkgfj0gRGF0ZS5ub3coKSBpcyBmbGF3ZWQsIGJ1dCB3ZSBkZXBlbmQgb24gaXQgdG9cbiAgLy8gaW50ZXJhY3Qgd2l0aCBkYXRhIGNvbWluZyBvdXQgb2YgcGVyZm9ybWFuY2UgZW50cmllcy5cbiAgLy9cbiAgLy8gTm90ZSB0aGF0IGRlc3BpdGUgcmVjb21tZW5kYXRpb25zIGFnYWluc3QgaXQgaW4gdGhlIHNwZWMsIGJyb3dzZXJzIGltcGxlbWVudCB0aGUgUGVyZm9ybWFuY2UgQVBJIHdpdGggYSBjbG9jayB0aGF0XG4gIC8vIG1pZ2h0IHN0b3Agd2hlbiB0aGUgY29tcHV0ZXIgaXMgYXNsZWVwIChhbmQgcGVyaGFwcyB1bmRlciBvdGhlciBjaXJjdW1zdGFuY2VzKS4gU3VjaCBiZWhhdmlvciBjYXVzZXNcbiAgLy8gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpIHRvIGhhdmUgYW4gYXJiaXRyYXJ5IHNrZXcgb3ZlciBEYXRlLm5vdygpLiBJbiBsYXB0b3AgY29tcHV0ZXJzLCB3ZSBoYXZlXG4gIC8vIG9ic2VydmVkIHNrZXdzIHRoYXQgY2FuIGJlIGFzIGxvbmcgYXMgZGF5cywgd2Vla3Mgb3IgbW9udGhzLlxuICAvL1xuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAgLy9cbiAgLy8gQlVHOiBkZXNwaXRlIG91ciBiZXN0IGludGVudGlvbnMsIHRoaXMgd29ya2Fyb3VuZCBoYXMgaXRzIGxpbWl0YXRpb25zLiBJdCBtb3N0bHkgYWRkcmVzc2VzIHRpbWluZ3Mgb2YgcGFnZWxvYWRcbiAgLy8gdHJhbnNhY3Rpb25zLCBidXQgaWdub3JlcyB0aGUgc2tldyBidWlsdCB1cCBvdmVyIHRpbWUgdGhhdCBjYW4gYXZlcnNlbHkgYWZmZWN0IHRpbWVzdGFtcHMgb2YgbmF2aWdhdGlvblxuICAvLyB0cmFuc2FjdGlvbnMgb2YgbG9uZy1saXZlZCB3ZWIgcGFnZXMuXG4gIGNvbnN0IHRpbWVPcmlnaW4gPSBEYXRlLm5vdygpIC0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBub3c6ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpLFxuICAgIHRpbWVPcmlnaW4sXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmF0aXZlIFBlcmZvcm1hbmNlIEFQSSBpbXBsZW1lbnRhdGlvbiBmcm9tIE5vZGUuanMuIFJldHVybnMgdW5kZWZpbmVkIGluIG9sZCBOb2RlLmpzIHZlcnNpb25zIHRoYXQgZG9uJ3RcbiAqIGltcGxlbWVudCB0aGUgQVBJLlxuICovXG5mdW5jdGlvbiBnZXROb2RlUGVyZm9ybWFuY2UoKTogUGVyZm9ybWFuY2UgfCB1bmRlZmluZWQge1xuICB0cnkge1xuICAgIGNvbnN0IHBlcmZIb29rcyA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3BlcmZfaG9va3MnKSBhcyB7IHBlcmZvcm1hbmNlOiBQZXJmb3JtYW5jZSB9O1xuICAgIHJldHVybiBwZXJmSG9va3MucGVyZm9ybWFuY2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogVGhlIFBlcmZvcm1hbmNlIEFQSSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0sIGlmIGF2YWlsYWJsZS5cbiAqL1xuY29uc3QgcGxhdGZvcm1QZXJmb3JtYW5jZTogUGVyZm9ybWFuY2UgfCB1bmRlZmluZWQgPSBpc05vZGVFbnYoKSA/IGdldE5vZGVQZXJmb3JtYW5jZSgpIDogZ2V0QnJvd3NlclBlcmZvcm1hbmNlKCk7XG5cbmNvbnN0IHRpbWVzdGFtcFNvdXJjZTogVGltZXN0YW1wU291cmNlID1cbiAgcGxhdGZvcm1QZXJmb3JtYW5jZSA9PT0gdW5kZWZpbmVkXG4gICAgPyBkYXRlVGltZXN0YW1wU291cmNlXG4gICAgOiB7XG4gICAgICAgIG5vd1NlY29uZHM6ICgpID0+IChwbGF0Zm9ybVBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gKyBwbGF0Zm9ybVBlcmZvcm1hbmNlLm5vdygpKSAvIDEwMDAsXG4gICAgICB9O1xuXG4vKipcbiAqIFJldHVybnMgYSB0aW1lc3RhbXAgaW4gc2Vjb25kcyBzaW5jZSB0aGUgVU5JWCBlcG9jaCB1c2luZyB0aGUgRGF0ZSBBUEkuXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRlVGltZXN0YW1wSW5TZWNvbmRzID0gZGF0ZVRpbWVzdGFtcFNvdXJjZS5ub3dTZWNvbmRzLmJpbmQoZGF0ZVRpbWVzdGFtcFNvdXJjZSk7XG5cbi8qKlxuICogUmV0dXJucyBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoIHVzaW5nIGVpdGhlciB0aGUgUGVyZm9ybWFuY2Ugb3IgRGF0ZSBBUElzLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBhdmFpbGFiaWxpdHkgb2YgdGhlIFBlcmZvcm1hbmNlIEFQSS5cbiAqXG4gKiBTZWUgYHVzaW5nUGVyZm9ybWFuY2VBUElgIHRvIHRlc3Qgd2hldGhlciB0aGUgUGVyZm9ybWFuY2UgQVBJIGlzIHVzZWQuXG4gKlxuICogQlVHOiBOb3RlIHRoYXQgYmVjYXVzZSBvZiBob3cgYnJvd3NlcnMgaW1wbGVtZW50IHRoZSBQZXJmb3JtYW5jZSBBUEksIHRoZSBjbG9jayBtaWdodCBzdG9wIHdoZW4gdGhlIGNvbXB1dGVyIGlzXG4gKiBhc2xlZXAuIFRoaXMgY3JlYXRlcyBhIHNrZXcgYmV0d2VlbiBgZGF0ZVRpbWVzdGFtcEluU2Vjb25kc2AgYW5kIGB0aW1lc3RhbXBJblNlY29uZHNgLiBUaGVcbiAqIHNrZXcgY2FuIGdyb3cgdG8gYXJiaXRyYXJ5IGFtb3VudHMgbGlrZSBkYXlzLCB3ZWVrcyBvciBtb250aHMuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU5MC5cbiAqL1xuZXhwb3J0IGNvbnN0IHRpbWVzdGFtcEluU2Vjb25kcyA9IHRpbWVzdGFtcFNvdXJjZS5ub3dTZWNvbmRzLmJpbmQodGltZXN0YW1wU291cmNlKTtcblxuLy8gUmUtZXhwb3J0ZWQgd2l0aCBhbiBvbGQgbmFtZSBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuXG5leHBvcnQgY29uc3QgdGltZXN0YW1wV2l0aE1zID0gdGltZXN0YW1wSW5TZWNvbmRzO1xuXG4vKipcbiAqIEEgYm9vbGVhbiB0aGF0IGlzIHRydWUgd2hlbiB0aW1lc3RhbXBJblNlY29uZHMgdXNlcyB0aGUgUGVyZm9ybWFuY2UgQVBJIHRvIHByb2R1Y2UgbW9ub3RvbmljIHRpbWVzdGFtcHMuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2luZ1BlcmZvcm1hbmNlQVBJID0gcGxhdGZvcm1QZXJmb3JtYW5jZSAhPT0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoLiBUaGlzIHZhbHVlIGlzIG9ubHkgdXNhYmxlIGluIGEgYnJvd3NlciwgYW5kIG9ubHkgd2hlbiB0aGVcbiAqIHBlcmZvcm1hbmNlIEFQSSBpcyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luID0gKCgpOiBudW1iZXIgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCB7IHBlcmZvcm1hbmNlIH0gPSBnZXRHbG9iYWxPYmplY3Q8V2luZG93PigpO1xuICBpZiAoIXBlcmZvcm1hbmNlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAocGVyZm9ybWFuY2UudGltZU9yaWdpbikge1xuICAgIHJldHVybiBwZXJmb3JtYW5jZS50aW1lT3JpZ2luO1xuICB9XG4gIC8vIFdoaWxlIHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBwZXJmb3JtYW5jZS50aW1lT3JpZ2luLCBwZXJmb3JtYW5jZS50aW1lT3JpZ2luXG4gIC8vIGlzIG5vdCBhcyB3aWRlbHkgc3VwcG9ydGVkLiBOYW1lbHksIHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gaXMgdW5kZWZpbmVkIGluIFNhZmFyaSBhcyBvZiB3cml0aW5nLlxuICAvLyBBbHNvIGFzIG9mIHdyaXRpbmcsIHBlcmZvcm1hbmNlLnRpbWluZyBpcyBub3QgYXZhaWxhYmxlIGluIFdlYiBXb3JrZXJzIGluIG1haW5zdHJlYW0gYnJvd3NlcnMsIHNvIGl0IGlzIG5vdCBhbHdheXNcbiAgLy8gYSB2YWxpZCBmYWxsYmFjay4gSW4gdGhlIGFic2VuY2Ugb2YgYW4gaW5pdGlhbCB0aW1lIHByb3ZpZGVkIGJ5IHRoZSBicm93c2VyLCBmYWxsYmFjayB0byB0aGUgY3VycmVudCB0aW1lIGZyb20gdGhlXG4gIC8vIERhdGUgQVBJLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuIChwZXJmb3JtYW5jZS50aW1pbmcgJiYgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCkgfHwgRGF0ZS5ub3coKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/dist/time.js\n");

/***/ })

}]);