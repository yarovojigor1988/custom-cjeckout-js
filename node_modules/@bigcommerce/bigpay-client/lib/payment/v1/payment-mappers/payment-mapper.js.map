{"version":3,"sources":["../../../../src/payment/v1/payment-mappers/payment-mapper.js"],"names":["PaymentMapper","paymentMethodIdMapper","PaymentMethodIdMapper","create","data","order","orderMeta","payment","paymentMethod","payload","device_info","deviceSessionId","device","deviceFingerprint","fingerprint_id","gateway","mapToId","notify_url","callbackUrl","return_url","returnUrl","vault_payment_instrument","instrumentId","shouldSaveInstrument","set_as_default_stored_instrument","shouldSetAsDefaultInstrument","method","nonce","formattedPayload","bigpay_token","mapToBigPayToken","credit_card_token","token","cryptogramId","credit_card_cryptogram","mapToCryptogram","credit_card","mapToCreditCard","account_name","ccName","month","ccExpiry","number","ccNumber","verification_value","ccCvv","year","customer_code","ccCustomerCode","three_d_secure","threeDSecure","hosted_form_nonce","hostedFormNonce","credit_card_number_confirmation","verification_nonce","payment_cryptogram","eci","xid","transactionId","account_mask","accountMask"],"mappings":"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","sourcesContent":["import objectAssign from 'object-assign';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n            set_as_default_stored_instrument: (payment.instrumentId || payment.shouldSaveInstrument) ? payment.shouldSetAsDefaultInstrument : null,\n        };\n\n        const { method } = paymentMethod;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.formattedPayload) {\n            objectAssign(payload, payment.formattedPayload);\n        } else if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n            hosted_form_nonce: payment.hostedFormNonce,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            verification_nonce: payment.nonce,\n            three_d_secure: payment.threeDSecure,\n            hosted_form_nonce: payment.hostedFormNonce,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n"],"file":"payment-mapper.js"}