{"version":3,"sources":["../../../src/payment/offsite-payment-mappers/address-mapper.js"],"names":["AddressMapper","data","mapToAddress","addressKey","address","formattedAddressKey","city","company","countryCode","country","firstName","lastName","phone","provinceCode","province","addressLine1","addressLine2","postCode"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAEqBA,a;;;;;;;;AAQjB;AACJ;AACA;AACA;wCACwBC,I,EAAM;AACtB,aAAO,KAAKC,YAAL,CAAkBD,IAAlB,EAAwB,gBAAxB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;yCACyBA,I,EAAM;AACvB,aAAO,KAAKC,YAAL,CAAkBD,IAAlB,EAAwB,iBAAxB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;iCACiBA,I,EAAME,U,EAAY;AAAA;;AAC3B,UAAMC,OAAO,GAAGH,IAAI,CAACE,UAAD,CAAJ,IAAoB,EAApC;AACA,UAAME,mBAAmB,GAAG,wBAAYF,UAAZ,CAA5B;AAEA,aAAO,wEACCE,mBADD,YAC8BD,OAAO,CAACE,IADtC,uCAECD,mBAFD,eAEiCD,OAAO,CAACG,OAFzC,uCAGCF,mBAHD,oBAGsCD,OAAO,CAACI,WAH9C,uCAICH,mBAJD,eAIiCD,OAAO,CAACK,OAJzC,uCAKCJ,mBALD,kBAKoCD,OAAO,CAACM,SAL5C,uCAMCL,mBAND,iBAMmCD,OAAO,CAACO,QAN3C,uCAOCN,mBAPD,aAO+BD,OAAO,CAACQ,KAPvC,uCAQCP,mBARD,kBAQoCD,OAAO,CAACS,YAR5C,uCASCR,mBATD,aAS+BD,OAAO,CAACU,QATvC,uCAUCT,mBAVD,gBAUkCD,OAAO,CAACW,YAV1C,uCAWCV,mBAXD,gBAWkCD,OAAO,CAACY,YAX1C,uCAYCX,mBAZD,WAY6BD,OAAO,CAACa,QAZrC,aAAP;AAcH;;;;AA/CD;AACJ;AACA;6BACoB;AACZ,aAAO,IAAIjB,aAAJ,EAAP;AACH","sourcesContent":["import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n"],"file":"address-mapper.js"}