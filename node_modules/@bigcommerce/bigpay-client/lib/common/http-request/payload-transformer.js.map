{"version":3,"sources":["../../../src/common/http-request/payload-transformer.js"],"names":["PayloadTransformer","data","contentType","APPLICATION_JSON","JSON","stringify","xhr","headers","parseResponseHeaders","getAllResponseHeaders","getResponseHeader","status","statusText","response","responseText","parse","rawHeaders","lines","replace","split","reduce","line","parts","key","shift","trim","toLowerCase","join"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAEqBA,kB;;;;;;;;AAQjB;AACJ;AACA;AACA;AACA;8BACcC,I,EAAsC;AAAA,UAAhCC,WAAgC,uEAAlBC,8BAAkB;;AAC5C,UAAIF,IAAI,IAAI,qBAASC,WAAT,EAAsBC,8BAAtB,CAAZ,EAAqD;AACjD,eAAOC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAP;AACH;;AAED,aAAOA,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;iCACiBK,G,EAAK;AACd,UAAMC,OAAO,GAAG,KAAKC,oBAAL,CAA0BF,GAAG,CAACG,qBAAJ,EAA1B,CAAhB;AACA,UAAMP,WAAW,GAAGI,GAAG,CAACI,iBAAJ,CAAsB,cAAtB,CAApB;AAFc,UAGNC,MAHM,GAGiBL,GAHjB,CAGNK,MAHM;AAAA,UAGEC,UAHF,GAGiBN,GAHjB,CAGEM,UAHF;AAKd,UAAIX,IAAI,GAAG,cAAcK,GAAd,GAAoBA,GAAG,CAACO,QAAxB,GAAmCP,GAAG,CAACQ,YAAlD;;AAEA,UAAIb,IAAI,IAAI,qBAASC,WAAT,EAAsBC,8BAAtB,CAAZ,EAAqD;AACjDF,QAAAA,IAAI,GAAGG,IAAI,CAACW,KAAL,CAAWd,IAAX,CAAP;AACH;;AAED,aAAO;AACHA,QAAAA,IAAI,EAAJA,IADG;AACGM,QAAAA,OAAO,EAAPA,OADH;AACYI,QAAAA,MAAM,EAANA,MADZ;AACoBC,QAAAA,UAAU,EAAVA;AADpB,OAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;yCACyBI,U,EAAY;AAC7B,UAAMC,KAAK,GAAGD,UAAU,GAAGA,UAAU,CAACE,OAAX,CAAmB,cAAnB,EAAmC,GAAnC,EAAwCC,KAAxC,CAA8C,OAA9C,CAAH,GAA4D,EAApF;AAEA,aAAOF,KAAK,CAACG,MAAN,CAAa,UAACb,OAAD,EAAUc,IAAV,EAAmB;AACnC,YAAMC,KAAK,GAAGD,IAAI,CAACF,KAAL,CAAW,GAAX,CAAd;AACA,YAAMI,GAAG,GAAG,CAACD,KAAK,CAACE,KAAN,MAAiB,EAAlB,EAAsBC,IAAtB,EAAZ;;AAEA,YAAI,CAACF,GAAL,EAAU;AACN,iBAAOhB,OAAP;AACH;;AAED,eAAO,4BAAa,EAAb,EAAiBA,OAAjB,sBACFgB,GAAG,CAACG,WAAJ,EADE,EACkBJ,KAAK,CAACK,IAAN,CAAW,GAAX,EAAgBF,IAAhB,EADlB,EAAP;AAGH,OAXM,EAWJ,EAXI,CAAP;AAYH;;;;AA/DD;AACJ;AACA;6BACoB;AACZ,aAAO,IAAIzB,kBAAJ,EAAP;AACH","sourcesContent":["import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return {\n            data, headers, status, statusText,\n        };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n"],"file":"payload-transformer.js"}