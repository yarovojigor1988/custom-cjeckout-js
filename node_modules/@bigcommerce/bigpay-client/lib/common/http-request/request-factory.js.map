{"version":3,"sources":["../../../src/common/http-request/request-factory.js"],"names":["RequestFactory","url","options","callback","xhr","XMLHttpRequest","onerror","Error","statusText","onload","open","method","setOptions","headers","headerKeys","Object","keys","forEach","key","value","setRequestHeader","withCredentials","setHeaders"],"mappings":";;;;;;;;;;;;;IAAqBA,c;;;;;;;;AAQjB;AACJ;AACA;AACA;AACA;AACA;kCACkBC,G,EAAKC,O,EAASC,Q,EAAU;AAClC,UAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AAEAD,MAAAA,GAAG,CAACE,OAAJ,GAAc,YAAM;AAChB,YAAIH,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAD,CAAR;AACH;AACJ,OAJD;;AAMAJ,MAAAA,GAAG,CAACK,MAAJ,GAAa,YAAM;AACf,YAAIN,QAAJ,EAAc;AACVA,UAAAA,QAAQ;AACX;AACJ,OAJD;;AAMAC,MAAAA,GAAG,CAACM,IAAJ,CAASR,OAAO,CAACS,MAAjB,EAAyBV,GAAzB,EAA8B,IAA9B;AACA,WAAKW,UAAL,CAAgBR,GAAhB,EAAqBF,OAArB;AAEA,aAAOE,GAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;+BACeA,G,EAAKS,O,EAAS;AACrB,UAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAnB;AAEAC,MAAAA,UAAU,CAACG,OAAX,CAAmB,UAACC,GAAD,EAAS;AACxB,YAAMC,KAAK,GAAGN,OAAO,CAACK,GAAD,CAArB;AAEAd,QAAAA,GAAG,CAACgB,gBAAJ,CAAqBF,GAArB,EAA0BC,KAA1B;AACH,OAJD;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;+BACef,G,EAAKF,O,EAAS;AACrBE,MAAAA,GAAG,CAACiB,eAAJ,GAAsBnB,OAAO,CAACmB,eAA9B;;AAEA,UAAInB,OAAO,CAACW,OAAZ,EAAqB;AACjB,aAAKS,UAAL,CAAgBlB,GAAhB,EAAqBF,OAAO,CAACW,OAA7B;AACH;AACJ;;;;AA9DD;AACJ;AACA;6BACoB;AACZ,aAAO,IAAIb,cAAJ,EAAP;AACH","sourcesContent":["export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n"],"file":"request-factory.js"}