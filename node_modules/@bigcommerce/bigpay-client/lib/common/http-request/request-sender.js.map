{"version":3,"sources":["../../../src/common/http-request/request-sender.js"],"names":["RequestSender","requestFactory","RequestFactory","create","payloadTransformer","PayloadTransformer","url","data","options","callback","mergedOptions","DEFAULT_OPTIONS","xhr","createRequest","error","response","fromResponse","isSuccessfulRequest","payload","toRequest","headers","send","method","POST","sendRequest","status"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAEqBA,a;;;;AACjB;AACJ;AACA;6BACoB;AACZ,UAAMC,cAAc,GAAGC,wBAAeC,MAAf,EAAvB;;AACA,UAAMC,kBAAkB,GAAGC,4BAAmBF,MAAnB,EAA3B;;AAEA,aAAO,IAAIH,aAAJ,CAAkBC,cAAlB,EAAkCG,kBAAlC,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;AACI,yBAAYH,cAAZ,EAA4BG,kBAA5B,EAAgD;AAAA;;AAC5C;AACR;AACA;AACA;AACQ,SAAKH,cAAL,GAAsBA,cAAtB;AAEA;AACR;AACA;AACA;;AACQ,SAAKG,kBAAL,GAA0BA,kBAA1B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;gCACgBE,G,EAAKC,I,EAAMC,O,EAASC,Q,EAAU;AAAA;;AACtC,UAAMC,aAAa,GAAG,yBAAW,EAAX,EAAeC,uBAAf,EAAgCH,OAAhC,CAAtB;AAEA,UAAMI,GAAG,GAAG,KAAKX,cAAL,CAAoBY,aAApB,CAAkCP,GAAlC,EAAuCI,aAAvC,EAAsD,UAACI,KAAD,EAAW;AACzE,YAAMC,QAAQ,GAAG,KAAI,CAACX,kBAAL,CAAwBY,YAAxB,CAAqCJ,GAArC,CAAjB;;AAEA,YAAI,CAACH,QAAL,EAAe;AACX;AACH;;AAED,YAAIK,KAAK,IAAI,CAAC,KAAI,CAACG,mBAAL,CAAyBL,GAAzB,CAAd,EAA6C;AACzCH,UAAAA,QAAQ,CAACM,QAAD,CAAR;AACA;AACH;;AAEDN,QAAAA,QAAQ,CAAC,IAAD,EAAOM,QAAP,CAAR;AACH,OAbW,CAAZ;AAeA,UAAMG,OAAO,GAAG,KAAKd,kBAAL,CAAwBe,SAAxB,CAAkCZ,IAAlC,EAAwCG,aAAa,CAACU,OAAd,CAAsB,cAAtB,CAAxC,CAAhB;AAEAR,MAAAA,GAAG,CAACS,IAAJ,CAASH,OAAT;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;gCACgBZ,G,EAAKC,I,EAAMC,O,EAASC,Q,EAAU;AACtC,UAAMC,aAAa,GAAG,2BAAa,EAAb,EAAiBF,OAAjB,EAA0B;AAC5Cc,QAAAA,MAAM,EAAEC;AADoC,OAA1B,CAAtB;AAIA,WAAKC,WAAL,CAAiBlB,GAAjB,EAAsBC,IAAtB,EAA4BG,aAA5B,EAA2CD,QAA3C;AACH;AAED;AACJ;AACA;AACA;AACA;;;;wCACwBG,G,EAAK;AACrB,aAAOA,GAAG,CAACa,MAAJ,IAAc,GAAd,IAAqBb,GAAG,CAACa,MAAJ,GAAa,GAAzC;AACH","sourcesContent":["import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n"],"file":"request-sender.js"}