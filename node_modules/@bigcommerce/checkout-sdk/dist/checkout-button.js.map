{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"lodash\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/payment/payment-strategy-type.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/form/form-fields-actions.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/signin-email/signin-email-actions.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///external \"shallowequal\"","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///external \"reselect\"","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/form/form-fields-state.ts","webpack:///./src/form/form-fields-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/signin-email/signin-email-state.ts","webpack:///./src/signin-email/signin-email-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/signin-email/signin-email-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack:///./src/payment/strategies/masterpass/format-locale.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/form/form-fields-action-creator.ts","webpack:///./src/form/form-fields-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack:///./src/bundles/checkout-button.ts","webpack:///./src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack:///./src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/shipping/getShippableItemsCount.ts","webpack:///./src/shipping/getLineItemsCount.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","PaymentStrategyType","ShippingStrategyActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","CustomerActionType","InstrumentActionType","GiftCertificateActionType","ButtonType","ButtonColor","BillingAddressFormat","RemoteCheckoutActionType","ContentType","ACKNOWLEDGE","FINALIZE","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","FormFieldsActionType","isPlainObject","CountryActionType","ShippingCountryActionType","SignInEmailActionType","StoreCreditActionType","HOSTED","OFFLINE","INTERNAL_USE_ONLY","PaymentActionType","joinIncludes","includes","join","SpamProtectionActionType","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","instanceMethods","set","bindMethodDecorator","boundMethod","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","loadHostedFields","hostedFields","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","config","renderButtonCallback","_paypalCheckout","_paypalcheckoutInstance","_error","instance","loadPayPalSDK","currency","get3DS","_3ds","version","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","createHostedFields","_teardown","default","mod","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","map","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","id","LoadCheckoutRequested","loadConfig","loadFormFields","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","customItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","origin","window","location","isPrivate","indexOf","joinErrors","reduce","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","push","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","VerifyCheckoutSucceeded","orderId","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","formFields","countries","countryCode","selectedCountry","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","getLoadError","loadError","isLoading","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","barclays","braintreepaypal","authorizenet","elavon","checkoutcom","stripe","cybersource","cybersourcev2","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","createCartSelector","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","getStoreConfig","formState","storeConfig","getStoreConfigOrThrow","getExternalSource","externalSource","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","instrument","bigpayToken","some","card","getInstruments","supportedProvider","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","language","formattedLocale","countryLocales","CheckoutIncludes","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","test","selector","idPrefix","containers","document","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","_createSignInButton","_walletButton","parentNode","removeChild","getElementById","_getAmazonPayV2ButtonOptions","amazonButtonOptions","createButton","shopPath","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","createCheckoutSession","sandbox","productType","getShippableItemsCount","PayOnly","PayAndShip","placement","Cart","_braintreeSDKCreator","_formPoster","_offerCredit","_renderButtonsData","paypalOptions","braintreepaypalcredit","_paymentMethod","storeState","shopperCurrency","paypalCheckoutInstance","renderButtons","updatedPaypalOptions","FUNDING_SOURCES","fundingKey","FUNDING","skipCreditSource","allowCredit","_validateHeight","source","button","Buttons","env","fundingSource","commit","style","shape","createOrder","_setupPayment","onPaymentError","onApprove","_tokenizePayment","shouldProcessPayment","onAuthorizeError","isEligible","render","height","onError","addresses","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","amount","offerCredit","CheckoutButtonNotInitialized","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","stateOrProvinceCode","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_methodId","_getMethodId","buttonOptions","buttonType","buttonColor","googlePayButton","_handleWalletButtonClick","appendChild","googlepayadyenv2","googlepayauthorizenet","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","event","preventDefault","hasPhysicalItems","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","_locale","initializationData","masterpassScriptLoaderParams","useMasterpassSrc","isMasterpassSrcEnabled","load","masterpass","_masterpassClient","_signInButton","removeEventListener","buttonContainer","createElement","subdomain","src","addEventListener","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","_paypalScriptLoader","_host","clientId","allowedSources","disallowedSources","CREDIT","Button","funding","allowed","disallowed","size","actions","onAuthorize","res","_onError","paymentID","payerID","payerId","payerInfo","payer","payer_info","_paypalCommercePaymentProcessor","buttonParams","onClick","_handleClickButtonProvider","paypalCommerce","messagingContainer","isMessagesAvailable","_getParamsScript","renderMessages","_isCredit","orderID","order_id","intent","isPayPalCreditAvailable","attributionId","disableFunding","components","createCheckoutButtonInitializer","host","locale","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","paypalCommercePaymentProcessor","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_CYBERSOURCEV2","GOOGLEPAY_ORBITAL","GOOGLEPAY_STRIPE","PAYPALEXPRESS","PAYPALCOMMERCE","AMAZON_PAY_V2","createCheckoutButtonRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","_formFieldsRequestSender","loadFields","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","info","cardType","lastFour","currencyCode","gatewayMerchantId","merchantName","apiVersion","apiVersionMinor","merchantInfo","authJwt","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","sourceUrl","baseRequest","_getGooglePaymentDataRequest","btoa","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","paymentMethodData","tokenizationData","androidPayCards","description","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","cardNetwork","cardDetails","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","credentials","Json","Authorization","brand","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","scriptSrc","async","attributes","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","getOrderStatus","getFirstAndLastName","fullName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_billingAddressActionCreator","_consignmentActionCreator","_configureWallet","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","cardInformation","number","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","loadPaypalCommerce","isProgressiveOnboardingAvailable","_validateParams","paypalLoadScript","_paypalCommerceRequestSender","_validateStyleParams","updatedStyle","color","layout","tagline","horizontal","paramsScript","_gatewayId","optionalParams","paramsForProvider","onRenderButton","_fundingSource","_paypalButtons","_processNotEligible","renderFields","apmFieldsContainer","apmFieldsStyles","Fields","fieldsParams","fields","_paypalFields","fieldContainerElement","querySelector","innerHTML","getOrderId","_orderId","cartTotal","Messages","_paypalMessages","renderHostedFields","events","HostedFields","styles","paymentsSDK","_hostedFields","submitHostedFields","submit","getHostedFieldsValidationState","isValid","close","PAYPAL_COMMERCE_ALTERNATIVE_METHODS","PAYLATER","createPaypalCommercePaymentProcessor","paypalScriptLoader","paypalCommerceRequestSender","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","signout","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","_subscriptionsRequestSender","addedByPromotion","total","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,gBClFrDhC,EAAOD,QAAUkC,QAAQ,U,cCAzBjC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,4B,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,eCAzBjC,EAAOD,QAAUkC,QAAQ,yB,8BCMzB,IAAYC,EAAZ,2CAAYA,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,2DAnBJ,CAAYA,MAAqB,M,cCNjClC,EAAOD,QAAUkC,QAAQ,mB,6BCAzB,IAAKE,GAAL,SAAKA,GACD,oBACA,uCACA,kBACA,sBACA,kBACA,kDACA,0BACA,sBACA,0BACA,cACA,4BACA,mCACA,uCACA,qCACA,uCACA,2BACA,gDACA,sBACA,sBACA,4BACA,gCACA,8BACA,oDACA,kBACA,sBACA,kBACA,kBACA,kBACA,oBACA,mDACA,oBACA,oBACA,wCACA,kBACA,iCACA,8CACA,mCACA,gDACA,0DACA,yEACA,2BACA,oBACA,qBACA,oBACA,sBACA,wBACA,qCACA,kDACA,kDACA,4CACA,uBACA,iBACA,0BACA,sCACA,kBACA,YAxDJ,CAAKA,MAAmB,KA2DT,O,6BCzDf,IAAYC,EAAZ,2CAAYA,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAfJ,CAAYA,MAA0B,M,6BCAtC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAfJ,CAAYA,MAA0B,M,6BCEtC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,uEAfJ,CAAYA,MAAyB,M,mECFzBC,E,gBAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4DACA,oDACA,kDAC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","file":"checkout-button.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 201);\n","module.exports = require(\"tslib\");","module.exports = require(\"lodash\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAYV2 = 'amazonpay',\n    BARCLAYS = 'barclays',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CHECKOUTCOM = 'checkoutcom',\n    CHECKOUTCOM_APM = 'checkoutcomapm',\n    CHECKOUTCOM_FAWRY = 'checkoutcomfawry',\n    CHECKOUTCOM_SEPA = 'checkoutcomsepa',\n    CHECKOUTCOM_IDEAL = 'checkoutcomideal',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CLEARPAY = 'clearpay',\n    CONVERGE = 'converge',\n    CYBERSOURCE = 'cybersource',\n    CYBERSOURCEV2 = 'cybersourcev2',\n    DIGITALRIVER = 'digitalriver',\n    CYBERSOURCEV2_GOOGLE_PAY = 'googlepaycybersourcev2',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    MOLLIE = 'mollie',\n    MONERIS = 'moneris',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    ORBITAL_GOOGLE_PAY = 'googlepayorbital',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n    QUADPAY = 'quadpay',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCustomer:\n        return 'Unable to proceed because customer data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadFormFieldsAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction |\n    CreateCustomerAddressAction |\n    CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    CreateCustomerRequestedAction |\n    CreateCustomerSucceededAction |\n    CreateCustomerFailedAction |\n    SpamProtectionAction |\n    LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    CreateCustomerAddressRequestedAction |\n    CreateCustomerAddressSucceededAction |\n    CreateCustomerAddressFailedAction |\n    LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    LoadFormFieldsRequestedAction |\n    LoadFormFieldsSucceededAction |\n    LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    CheckoutVerifyRequestedAction |\n    CheckoutVerifyFailedAction |\n    CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"reselect\");","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.70.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript('//js.braintreegateway.com/web/3.70.0/js/hosted-fields.min.js');\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout, Config,\n    GooglePayBraintreeSDK,\n    PaypalClientInstance,\n    RenderButtons } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _paypalcheckoutInstance?: PaypalClientInstance;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n                .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(config: Config, renderButtonCallback: RenderButtons): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }, (_error: string, instance: PaypalClientInstance) =>  {\n                    this._paypalcheckoutInstance = instance;\n                    instance.loadPayPalSDK({\n                        currency: config.currency,\n                    }, () => {\n                        renderButtonCallback(instance);\n                    });\n                }));\n        } else if (this._paypalcheckoutInstance) {\n            renderButtonCallback(this._paypalcheckoutInstance);\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n                .then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2}));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n                .catch(error => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n                .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig(),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true })\n            ),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport { CustomerAction, CustomerActionType } from './customer-actions';\nimport CustomerState, { CustomerErrorsState, CustomerStatusesState, DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | CustomerAction | ContinueAsGuestAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerErrorsState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case CustomerActionType.CreateCustomerFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(errors, 'createAddressError', undefined);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n        return objectSet(errors, 'createAddressError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerStatusesState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case CustomerActionType.CreateCustomerFailed:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(statuses, 'isCreating', false);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n        return objectSet(statuses, 'isCreatingAddress', true);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(statuses, 'isCreatingAddress', false);\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, { DEFAULT_STATE, FormFieldsErrorState, FormFieldsStatusesState } from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction\n): FormFields | undefined {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction\n): FormFieldsErrorState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction\n): FormFieldsStatusesState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.VerifyCheckoutSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.shippingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.billingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => () => formFields ? formFields.customerAccount : []\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: FormFieldsState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    const getCustomerOrThrow = createSelector(\n        getCustomer,\n        getCustomer => () => {\n            return guard(getCustomer(), () => new MissingDataError(MissingDataErrorType.MissingCustomer));\n        }\n    );\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        status => () => status\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () => data && formFields ? ({\n            ...data.storeConfig,\n            formFields,\n        }) : undefined\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE,\n        formState: FormFieldsState\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state, { formState }),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) => (methodId: string) => {\n            const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n            return currentPayment?.paymentId;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            getPaymentId: getPaymentId(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export const supportedLocales: {[language: string]: string[]} = {es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: ['en_us', 'en_gb', 'en_ca', 'en_es', 'en_fr', 'en_ie', 'en_sg', 'en_au', 'en_nz', 'en_my', 'en_hk', 'en_th', 'en_ae', 'en_sa', 'en_qa', 'en_kw', 'en_za'],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca']};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_CYBERSOURCEV2 = 'googlepaycybersourcev2',\n    GOOGLEPAY_ORBITAL = 'googlepayorbital',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { AmazonPayV2ButtonParams, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { AmazonPayV2ButtonInitializeOptions } from './amazon-pay-v2-button-options';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, amazonpay } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" or \"methodId\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = await this._createSignInButton(containerId, paymentMethod, amazonpay);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _createSignInButton(containerId: string, paymentMethod: PaymentMethod, options?: AmazonPayV2ButtonInitializeOptions): Promise<HTMLElement> {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const amazonButtonOptions = options ?? await this._getAmazonPayV2ButtonOptions(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n\n    private async _getAmazonPayV2ButtonOptions(paymentMethod: PaymentMethod): Promise<AmazonPayV2ButtonParams> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCart();\n        const { storeProfile: { shopPath } } = state.config.getStoreConfigOrThrow();\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId || !ledgerCurrency || !shopPath) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            merchantId,\n            createCheckoutSession: {\n                url: `${shopPath}/remote-checkout/${paymentMethod.id}/payment-session`,\n                method: checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n            sandbox: !!testMode,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement: AmazonPayV2Placement.Cart,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeShippingAddressOverride,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    PaypalClientInstance,\n    RenderButtonsData } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalButtonStyleOptions, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false,\n        private _window: PaypalHostWindow,\n        private _renderButtonsData?: RenderButtonsData\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        const storeState = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const currency = storeState.config.getStoreConfig()?.shopperCurrency;\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        const container = `#${options.containerId}`;\n\n        this._renderButtonsData = {\n            paymentMethod,\n            paypalOptions,\n            container,\n        };\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout({currency: currency?.code }, (paypalCheckoutInstance: PaypalClientInstance) => this.renderButtons(paypalCheckoutInstance)),\n            this._braintreeSDKCreator.getPaypal(),\n        ])\n            .then(([paypalCheckout]) => {\n                if (!this._paypalCheckout) {\n                    this._paypalCheckout = paypalCheckout;\n                }\n            });\n    }\n\n    renderButtons(paypalCheckoutInstance: PaypalClientInstance) {\n        const { paypalOptions, paymentMethod, container } = this._renderButtonsData as RenderButtonsData;\n        const { paypal } = this._window;\n        let updatedPaypalOptions: BraintreePaypalButtonInitializeOptions;\n\n        if (paypal) {\n            const FUNDING_SOURCES = [];\n            for (const fundingKey in paypal.FUNDING) {\n                if (paypal.FUNDING.hasOwnProperty(fundingKey)) {\n                    const skipCreditSource = (fundingKey === 'CREDIT' || fundingKey === 'PAYLATER') && !paypalOptions.allowCredit;\n                    if (fundingKey === 'CARD' || skipCreditSource) {\n                        continue;\n                    }\n                    FUNDING_SOURCES.push(fundingKey.toLowerCase());\n                }\n            }\n\n            if (paypalOptions) {\n                 updatedPaypalOptions = this._validateHeight(paypalOptions);\n            }\n\n            FUNDING_SOURCES.forEach(source => {\n                const button = paypal.Buttons({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    fundingSource: source,\n                    commit: false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(updatedPaypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons', 'height'),\n                    },\n                    createOrder: () => this._setupPayment(paypalCheckoutInstance, paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onApprove: (data: PaypalAuthorizeData) => this._tokenizePayment(data, paypalCheckoutInstance, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                });\n\n                if (button.isEligible()) {\n                    button.render(container);\n                }\n            });\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n        this._paypalCheckout = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _validateHeight(paypalOptions: BraintreePaypalButtonInitializeOptions): BraintreePaypalButtonInitializeOptions {\n        const updatedPaypalOptions = {...paypalOptions};\n        const { style } = updatedPaypalOptions;\n        const { height } = style as PaypalButtonStyleOptions;\n\n        if (updatedPaypalOptions.style) {\n            if (typeof height === 'number') {\n                updatedPaypalOptions.style.height = height < 25\n                    ? 25\n                    : (height > 55 ? 55 : height);\n            } else {\n                delete updatedPaypalOptions.style.height;\n            }\n        }\n\n        return updatedPaypalOptions;\n    }\n\n    private _setupPayment(\n        paypalCheckoutInstance: PaypalClientInstance,\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return paypalCheckoutInstance.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout?.outstandingBalance,\n                    currency: config?.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        paypalCheckoutInstance: PaypalClientInstance,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paymentMethod || !paypalCheckoutInstance) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            paypalCheckoutInstance.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string, buttonOptions: GooglePayButtonInitializeOptions): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick, buttonType, buttonColor);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(options: CheckoutButtonInitializeOptions): GooglePayButtonInitializeOptions {\n\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaycheckoutcom' && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === 'googlepaycybersourcev2' && options.googlepaycybersourcev2) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === 'googlepayorbital' && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { formatLocale, getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                        size: (paymentMethod.id === 'paypalexpress' && paypalOptions.style?.size === 'small') ? 'responsive' : paypalOptions.style?.size,\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, DisableFundingType, PaypalCommerceInitializationData, PaypalCommercePaymentProcessor, PaypalCommerceScriptParams } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _isCredit?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const { initializationData } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const buttonParams: ButtonsOptions = {\n            onApprove: data => this._tokenizePayment(data),\n            onClick: data => this._handleClickButtonProvider(data),\n        };\n\n        if (options.paypalCommerce && options.paypalCommerce.style) {\n            buttonParams.style = options.paypalCommerce.style;\n        }\n\n        const messagingContainer = options.paypalCommerce?.messagingContainer;\n        const isMessagesAvailable = Boolean(messagingContainer && document.getElementById(messagingContainer));\n\n        await this._paypalCommercePaymentProcessor.initialize(this._getParamsScript(initializationData, cart));\n\n        this._paypalCommercePaymentProcessor.renderButtons(cart.id, `#${options.containerId}`, buttonParams);\n\n        if (isMessagesAvailable) {\n            this._paypalCommercePaymentProcessor.renderMessages(cart.cartAmount, `#${messagingContainer}`);\n        }\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isCredit = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider({ fundingSource }: ClickDataOptions): void {\n        this._isCredit = fundingSource === 'credit' || fundingSource === 'paylater';\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this._isCredit ? 'paypalcommercecredit' : 'paypalcommerce',\n            order_id: orderID,\n        });\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptParams {\n        const { clientId, intent, isPayPalCreditAvailable, merchantId, attributionId } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            'client-id': clientId,\n            'merchant-id': merchantId,\n            commit: false,\n            currency: cart.currency.code,\n            components: ['buttons', 'messages'],\n            'disable-funding': disableFunding,\n            intent,\n            'data-partner-attribution-id': attributionId,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayCybersourceV2Initializer, GooglePayOrbitalInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { createPaypalCommercePaymentProcessor } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n    const paypalCommercePaymentProcessor = createPaypalCommercePaymentProcessor(scriptLoader, requestSender);\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            formPoster,\n            undefined,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            formPoster,\n            true,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader),\n            locale\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCybersourceV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ORBITAL, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayOrbitalInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalCommercePaymentProcessor\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(\n        private _formFieldsRequestSender: FormFieldsRequestSender\n    ) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            })\n        ).pipe(\n            catchError(response => throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n  }\nexport default class MasterpassScriptLoader {\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    async load({ useMasterpassSrc, language, testMode, checkoutId }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [\n                `locale=${language}`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            const sourceUrl = [\n               `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n               params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n\n        }\n\n        await this._scriptLoader.loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`);\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey: string = '';\n    private _testMode: boolean = true;\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        return {\n            nonce: finalToken,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<string> {\n        if (!token || !token.protocolVersion) {\n            throw new PaymentMethodFailedError('Unable to parse response from GooglePay.');\n        }\n\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken.token;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL: string = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL: string = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'cybersource',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'chase',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\n\nimport { OrderData, OrderStatus } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isAPM) {\n            provider = 'paypalcommercealternativemethodscheckout';\n        }\n\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body as OrderData;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, {headers});\n\n        return res.body;\n    }\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 =  paymentData.paymentMethodData.info.billingAddress.address1;\n        const city =  paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode =  paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode =  paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","\nexport interface ApproveDataOptions {\n    orderID?: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string>;\n    onApprove?(data: ApproveDataOptions): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    base?: {\n        backgroundColor?: string;\n        color?: string;\n        fontSize?: string;\n        fontFamily?: string;\n        lineHeight?: string;\n        letterSpacing?: string;\n    };\n    input?: {\n        backgroundColor?: string;\n        fontSize?: string;\n        color?: string;\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: string;\n        padding?: string;\n    };\n    invalid?: {\n        color?: string;\n    };\n    active?: {\n        color?: string;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    SOFORT: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions): PaypalCommerceButtons;\n    Fields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n    isProgressiveOnboardingAvailable?: boolean;\n    clientToken?: string;\n    attributionId?: string;\n}\n\nexport type DisableFundingType = Array<'credit' | 'card'>;\n\nexport type ComponentsScriptType = Array<'buttons' | 'messages' | 'hosted-fields' | 'fields'>;\n\nexport interface PaypalCommerceScriptParams  {\n    'client-id': string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: DisableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    components?: ComponentsScriptType;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptParams, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce(params: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._validateParams(params, isProgressiveOnboardingAvailable);\n\n        if (!this._window.paypalLoadScript) {\n            const scriptSrc = 'https://unpkg.com/@paypal/paypal-js@1.0.2/dist/paypal.browser.min.js';\n\n            await this._scriptLoader.loadScript(scriptSrc, {async: true, attributes: {}});\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(params);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    _validateParams(options: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): void {\n        const CLIENT_ID = 'client-id';\n        const MERCHANT_ID = 'merchant-id';\n        let param;\n\n        if (!options) {\n            param = 'options';\n        } else if (!options[CLIENT_ID]) {\n            param = CLIENT_ID;\n        } else if (!options[MERCHANT_ID] && !isProgressiveOnboardingAvailable) {\n            param = MERCHANT_ID;\n        }\n\n        if (param) {\n            throw new InvalidArgumentError(`Unable to proceed because \"${param}\" argument in PayPal script is not provided.`);\n        }\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentStrategyType from '../../payment-strategy-type';\n\nimport { ButtonsOptions, FieldsOptions, ParamsForProvider, PaypalButtonStyleOptions, PaypalCommerceButtons, PaypalCommerceFields, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsApprove, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceHostedFieldsSubmitOptions, PaypalCommerceMessages, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceScriptParams, PaypalCommerceSDK, PaypalCommerceSDKFunding, PaypalFieldsStyleOptions, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape } from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport interface RenderApmFieldsParams {\n    apmFieldsContainer: string;\n    fundingKey: keyof PaypalCommerceSDKFunding;\n    apmFieldsStyles?: PaypalFieldsStyleOptions;\n    fullName?: string;\n    email?: string;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _paypalFields?: PaypalCommerceFields;\n    private _paypalMessages?: PaypalCommerceMessages;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n    private _orderId?: string;\n    private _gatewayId?: string;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(paramsScript: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean, gatewayId?: string): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript, isProgressiveOnboardingAvailable);\n        this._gatewayId = gatewayId;\n\n        return this._paypal;\n    }\n\n    renderButtons(cartId: string, container: string, params: ButtonsOptions = {}, optionalParams: OptionalParamsRenderButtons = {}): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n\n            onClick: async (data, actions) => {\n                this._fundingSource = data.fundingSource;\n\n                return params.onClick?.(data, actions);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            this._processNotEligible(buttonParams, fundingKey);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    renderFields({\n        apmFieldsContainer,\n        fundingKey,\n        apmFieldsStyles,\n        fullName,\n        email,\n    }: RenderApmFieldsParams): PaypalCommerceFields {\n        if (!this._paypal || !this._paypal.Fields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const fieldsParams: FieldsOptions = {\n            fundingSource: this._paypal.FUNDING[fundingKey],\n            style: apmFieldsStyles,\n            fields: {\n                name: {\n                    value: fullName,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        this._paypalFields = this._paypal.Fields(fieldsParams);\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        this._paypalFields.render(apmFieldsContainer);\n\n        return this._paypalFields;\n    }\n\n    getOrderId() {\n        return this._orderId;\n    }\n\n    renderMessages(cartTotal: number, container: string): PaypalCommerceMessages {\n        if (!this._paypal || !this._paypal.Messages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n        this._paypalMessages = this._paypal.Messages({\n            amount: cartTotal,\n            placement: 'cart',\n            style: {\n                layout: 'text',\n            },\n        });\n        this._paypalMessages.render(container);\n\n        return this._paypalMessages;\n    }\n\n    async renderHostedFields(cartId: string, params: ParamsRenderHostedFields, events?: EventsHostedFields): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: () => this._setupPayment(cartId, { isCreditCard: true }),\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach(key => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(key, events[key] as (event: PaypalCommerceHostedFieldsState) => void);\n            });\n        }\n    }\n\n    async submitHostedFields(options?: PaypalCommerceHostedFieldsSubmitOptions): Promise<PaypalCommerceHostedFieldsApprove> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit(omitBy(options, isNil));\n    }\n\n    getHostedFieldsValidationState(): { isValid: boolean; fields: PaypalCommerceHostedFieldsState['fields'] } {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { fields } = this._hostedFields.getState();\n\n        const isValid = (Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>)\n            .every(key => fields[key]?.isValid);\n\n        return { isValid, fields };\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close?.();\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = { ...params, isCredit: this._fundingSource === 'credit' || this._fundingSource === 'paylater' };\n        const isAPM = this._gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, {...paramsForProvider, isAPM});\n        this._orderId = orderId;\n\n        return orderId;\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions  => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n    private _processNotEligible(buttonParams: ButtonsOptions, fundingKey?: keyof PaypalCommerceSDKFunding): void {\n        if (fundingKey === this._paypal?.FUNDING.PAYLATER) {\n            buttonParams.fundingSource = this._paypal?.FUNDING.CREDIT;\n\n            this._paypalButtons = this._paypal?.Buttons(buttonParams);\n\n            if (this._paypalButtons?.isEligible()) {\n                return;\n            }\n        }\n\n        throw new NotImplementedError(`PayPal ${this._fundingSource || ''} is not available for your region. Please use PayPal Checkout instead.`);\n    }\n\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './index';\n\nexport default function createPaypalCommercePaymentProcessor(scriptLoader: ScriptLoader, requestSender: RequestSender) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(paypalScriptLoader, paypalCommerceRequestSender);\n}\n","import { PaymentMethod } from '../..';\nimport { AmazonPayV2ButtonInitializeOptions } from '../../../checkout-buttons/strategies/amazon-pay-v2';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonInitializeOptions): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(containerId, options);\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}