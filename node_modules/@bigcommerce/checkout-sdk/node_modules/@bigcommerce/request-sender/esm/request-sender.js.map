{"version":3,"file":"request-sender.js","sourceRoot":"","sources":["../src/request-sender.ts"],"names":[],"mappings":"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","sourcesContent":["import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash.merge';\n\nimport Cache, { DefaultCache } from './cache';\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    private _cache: Cache;\n\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options: RequestSenderOptions = {}\n    ) {\n        this._cache = this._options.cache || new DefaultCache();\n    }\n\n    sendRequest<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(url, options);\n        const cachedRequest = this._getCachedRequest<T>(url, requestOptions);\n\n        if (cachedRequest) {\n            return Promise.resolve(cachedRequest);\n        }\n\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse<T>(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    this._cacheRequest(url, requestOptions, response);\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(url: string, options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            encodeParams: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers && !this._isAssetRequest(url, options)) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n\n    private _shouldCacheRequest(options: RequestOptions): boolean {\n        const method = options.method || 'GET';\n\n        return method.toUpperCase() === 'GET' && Boolean(options.cache);\n    }\n\n    private _getCachedRequest<T>(url: string, options: RequestOptions): Response<T> | null {\n        if (this._shouldCacheRequest(options)) {\n            return this._cache.read<T>(url, options);\n        }\n\n        return null;\n    }\n\n    private _cacheRequest<T>(url: string, options: RequestOptions, response: Response<T>): void {\n        if (this._shouldCacheRequest(options)) {\n            this._cache.write(url, options, response);\n        }\n    }\n\n    private _isAssetRequest(url: string, options?: RequestOptions): boolean {\n        if (options && options.method && options.method.toUpperCase() !== 'GET') {\n            return false;\n        }\n\n        return /\\.(png|gif|jpe?g|css|js|json|svg|html?)$/.test(url.split('?')[0]);\n    }\n}\n"]}