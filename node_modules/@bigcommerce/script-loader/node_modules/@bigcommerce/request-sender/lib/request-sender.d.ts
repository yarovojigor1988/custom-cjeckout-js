import { CookiesStatic } from 'js-cookie';
import PayloadTransformer from './payload-transformer';
import RequestFactory from './request-factory';
import RequestOptions from './request-options';
import RequestSenderOptions from './request-sender-options';
import Response from './response';
export default class RequestSender {
    private _requestFactory;
    private _payloadTransformer;
    private _cookie;
    private _options;
    private _cache;
    constructor(_requestFactory: RequestFactory, _payloadTransformer: PayloadTransformer, _cookie: CookiesStatic, _options?: RequestSenderOptions);
    sendRequest<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    get<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    post<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    put<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    patch<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    delete<T>(url: string, options?: RequestOptions): Promise<Response<T>>;
    private _mergeDefaultOptions;
    private _prependHost;
    private _shouldCacheRequest;
    private _getCachedRequest;
    private _cacheRequest;
    private _isAssetRequest;
}
