import merge from 'lodash.merge';
import { DefaultCache } from './cache';
import isPromise from './is-promise';
import Timeout from './timeout';
export default class RequestSender {
    constructor(_requestFactory, _payloadTransformer, _cookie, _options = {}) {
        this._requestFactory = _requestFactory;
        this._payloadTransformer = _payloadTransformer;
        this._cookie = _cookie;
        this._options = _options;
        this._cache = this._options.cache || new DefaultCache();
    }
    sendRequest(url, options) {
        const requestOptions = this._mergeDefaultOptions(url, options);
        const cachedRequest = this._getCachedRequest(url, requestOptions);
        if (cachedRequest) {
            return Promise.resolve(cachedRequest);
        }
        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);
        return new Promise((resolve, reject) => {
            const requestHandler = () => {
                const response = this._payloadTransformer.toResponse(request);
                if (response.status >= 200 && response.status < 300) {
                    this._cacheRequest(url, requestOptions, response);
                    resolve(response);
                }
                else {
                    reject(response);
                }
            };
            request.onload = requestHandler;
            request.onerror = requestHandler;
            request.onabort = requestHandler;
            request.ontimeout = requestHandler;
            if (requestOptions.timeout instanceof Timeout) {
                requestOptions.timeout.onComplete(() => request.abort());
                requestOptions.timeout.start();
            }
            if (isPromise(requestOptions.timeout)) {
                requestOptions.timeout.then(() => request.abort());
            }
            request.send(this._payloadTransformer.toRequestBody(requestOptions));
        });
    }
    get(url, options) {
        return this.sendRequest(url, Object.assign(Object.assign({}, options), { method: 'GET' }));
    }
    post(url, options) {
        return this.sendRequest(url, Object.assign(Object.assign({}, options), { method: 'POST' }));
    }
    put(url, options) {
        return this.sendRequest(url, Object.assign(Object.assign({}, options), { method: 'PUT' }));
    }
    patch(url, options) {
        return this.sendRequest(url, Object.assign(Object.assign({}, options), { method: 'PATCH' }));
    }
    delete(url, options) {
        return this.sendRequest(url, Object.assign(Object.assign({}, options), { method: 'DELETE' }));
    }
    _mergeDefaultOptions(url, options) {
        const defaultOptions = {
            credentials: true,
            encodeParams: true,
            headers: {
                Accept: 'application/json, text/plain, */*',
            },
            method: 'GET',
        };
        const csrfToken = this._cookie.get('XSRF-TOKEN');
        if (csrfToken && defaultOptions.headers && !this._isAssetRequest(url, options)) {
            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;
        }
        if (options && options.body && defaultOptions.headers) {
            defaultOptions.headers['Content-Type'] = 'application/json';
        }
        return merge({}, defaultOptions, options);
    }
    _prependHost(url) {
        if (!this._options.host || /^https?:\/\//.test(url)) {
            return url;
        }
        return `${this._options.host.replace(/\/$/, '')}/${url.replace(/^\//, '')}`;
    }
    _shouldCacheRequest(options) {
        const method = options.method || 'GET';
        return method.toUpperCase() === 'GET' && Boolean(options.cache);
    }
    _getCachedRequest(url, options) {
        if (this._shouldCacheRequest(options)) {
            return this._cache.read(url, options);
        }
        return null;
    }
    _cacheRequest(url, options, response) {
        if (this._shouldCacheRequest(options)) {
            this._cache.write(url, options, response);
        }
    }
    _isAssetRequest(url, options) {
        if (options && options.method && options.method.toUpperCase() !== 'GET') {
            return false;
        }
        return /\.(png|gif|jpe?g|css|js|json|svg|html?)$/.test(url.split('?')[0]);
    }
}
//# sourceMappingURL=request-sender.js.map