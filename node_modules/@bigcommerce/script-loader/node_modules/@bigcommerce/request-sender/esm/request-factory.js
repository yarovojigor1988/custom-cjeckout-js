import * as queryString from 'query-string';
export default class RequestFactory {
    createRequest(url, options) {
        const xhr = new XMLHttpRequest();
        this._configureRequest(xhr, url, options);
        return xhr;
    }
    _configureRequest(xhr, url, options = {}) {
        xhr.open(options.method || 'GET', this._formatUrl(url, options.params, options.encodeParams), true);
        if (options.headers) {
            this._configureRequestHeaders(xhr, options.headers);
        }
        if (typeof options.credentials === 'boolean') {
            xhr.withCredentials = options.credentials;
        }
        if (typeof options.timeout === 'number') {
            xhr.timeout = options.timeout;
        }
    }
    _configureRequestHeaders(xhr, headers) {
        Object.keys(headers)
            .filter(key => headers[key] !== null)
            .forEach(key => {
            xhr.setRequestHeader(key, headers[key]);
        });
    }
    _formatUrl(url, params, encodeParams = true) {
        if (!params || Object.keys(params).length === 0) {
            return url;
        }
        return `${url}?${queryString.stringify(params, { encode: encodeParams })}`;
    }
}
//# sourceMappingURL=request-factory.js.map