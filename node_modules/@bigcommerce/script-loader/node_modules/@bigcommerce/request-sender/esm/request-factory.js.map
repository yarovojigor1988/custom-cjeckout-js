{"version":3,"file":"request-factory.js","sourceRoot":"","sources":["../src/request-factory.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,WAAW,MAAM,cAAc,CAAC;AAK5C,MAAM,CAAC,OAAO,OAAO,cAAc;IAC/B,aAAa,CAAC,GAAW,EAAE,OAAwB;QAC/C,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QAEjC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAE1C,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,iBAAiB,CAAC,GAAmB,EAAE,GAAW,EAAE,UAA0B,EAAE;QACpF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;QAEpG,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE;YAC1C,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC;SAC7C;QAED,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE;YACrC,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SACjC;IACL,CAAC;IAEO,wBAAwB,CAAC,GAAmB,EAAE,OAAgB;QAClE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACf,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;aACpC,OAAO,CAAC,GAAG,CAAC,EAAE;YACf,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,UAAU,CAAC,GAAW,EAAE,MAAe,EAAE,eAAwB,IAAI;QACzE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7C,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC/E,CAAC;CACJ","sourcesContent":["import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params, options.encodeParams), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers)\n            .filter(key => headers[key] !== null)\n            .forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object, encodeParams: boolean = true): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params, { encode: encodeParams })}`;\n    }\n}\n"]}